import {
  require_jsx_runtime
} from "./chunk-S725DACQ.js";
import {
  require_react_dom
} from "./chunk-QT63QQJV.js";
import {
  require_react
} from "./chunk-RLJ2RCJQ.js";
import {
  __publicField,
  __toESM
} from "./chunk-DC5AMYBS.js";

// node_modules/reshaped/dist/components/Accordion/Accordion.js
var import_jsx_runtime12 = __toESM(require_jsx_runtime());

// node_modules/reshaped/dist/components/Accordion/AccordionControlled.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var import_react3 = __toESM(require_react());

// node_modules/reshaped/dist/utilities/helpers.js
var range = (start, end) => {
  if (start > end)
    return [];
  return Array.from({ length: end - start + 1 }, (_, i) => start + i);
};
var debounce = (cb, wait = 20) => {
  let timer;
  const callable = (...args) => {
    clearTimeout(timer);
    timer = setTimeout(() => cb(...args), wait);
  };
  return callable;
};
function debounceHandler(handler, timeout) {
  const debounced = debounce(handler, timeout);
  return (event) => {
    if ("persist" in event)
      event.persist();
    return debounced(event);
  };
}
var throttle = (cb, wait) => {
  let waiting = false;
  return (...args) => {
    if (!waiting) {
      cb(...args);
      waiting = true;
      setTimeout(() => {
        waiting = false;
        setTimeout(() => {
          if (waiting)
            return;
          cb(...args);
        }, wait);
      }, wait);
    }
  };
};
var classNames = (...args) => {
  return args.reduce((acc, cur) => {
    if (Array.isArray(cur)) {
      const className = classNames(...cur);
      if (!className)
        return acc;
      return `${acc} ${className}`;
    }
    if (cur)
      return `${acc} ${cur}`;
    return acc;
  }, "");
};
var applyClassName = (passedClassName, value, options) => {
  const { base, excludeValueFromClassName } = options || {};
  const className = typeof passedClassName === "string" ? passedClassName : passedClassName(value);
  if (value === true && base || excludeValueFromClassName)
    return className;
  if (value === true && !base)
    return `${className}-true`;
  if (value === false && !base)
    return `${className}-false`;
  if (value !== void 0)
    return `${className}-${value}`;
  return null;
};
var responsiveClassNames = (s85, className, value, options) => {
  if (typeof value !== "object") {
    const staticClassName = applyClassName(className, value, {
      base: true,
      excludeValueFromClassName: options == null ? void 0 : options.excludeValueFromClassName
    });
    return staticClassName ? [s85[staticClassName]] : [];
  }
  return Object.keys(value).reduce((acc, viewport) => {
    const base = viewport === "s";
    const viewportClassName = applyClassName(className, value[viewport], {
      base,
      excludeValueFromClassName: options == null ? void 0 : options.excludeValueFromClassName
    });
    const suffix = base ? "" : `--${viewport}`;
    return [...acc, s85[`${viewportClassName}${suffix}`]];
  }, []);
};
var responsiveVariables = (variableName, value) => {
  if (value === void 0)
    return {};
  if (typeof value !== "object")
    return { [`${variableName}-s`]: value };
  return Object.keys(value).reduce((acc, key) => {
    const viewportValue = value[key];
    if (viewportValue === void 0)
      return acc;
    if (viewportValue === false)
      return acc;
    return {
      ...acc,
      [`${variableName}-${key}`]: viewportValue
    };
  }, {});
};
var isResponsive = (prop) => {
  if (prop === null)
    return false;
  return typeof prop === "object" && prop !== null && "s" in prop;
};
var responsivePropDependency = (prop, resolver) => {
  if (!isResponsive(prop))
    return resolver(prop, "s");
  const keys = Object.keys(prop);
  return keys.reduce((acc, viewport) => {
    const viewportValue = prop[viewport];
    if (viewportValue === void 0 || viewportValue === null)
      return acc;
    return { ...acc, [viewport]: resolver(viewportValue, viewport) };
  }, {});
};

// node_modules/reshaped/dist/hooks/useElementId.js
var import_react = __toESM(require_react());
var useElementId = (id) => {
  const generatedId = import_react.default.useId();
  if (id)
    return id;
  return generatedId;
};
var useElementId_default = useElementId;

// node_modules/reshaped/dist/components/Accordion/Accordion.context.js
var import_react2 = __toESM(require_react());
var AccordionContext = import_react2.default.createContext({
  active: false,
  onToggle: () => {
  },
  triggerId: "",
  contentId: ""
});
var Accordion_context_default = AccordionContext;

// node_modules/reshaped/dist/components/Accordion/AccordionControlled.js
var AccordionControlled = (props) => {
  const { children, onToggle, active, iconPosition, iconSize, className, attributes } = props;
  const rootClassNames = classNames(className);
  const id = useElementId_default();
  const value = import_react3.default.useMemo(
    () => ({
      triggerId: `${id}-trigger`,
      contentId: `${id}-content`,
      active,
      onToggle,
      iconPosition,
      iconSize
    }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [active]
  );
  return (0, import_jsx_runtime.jsx)("div", { ...attributes, className: rootClassNames, children: (0, import_jsx_runtime.jsx)(Accordion_context_default.Provider, { value, children }) });
};
var AccordionControlled_default = AccordionControlled;

// node_modules/reshaped/dist/components/Accordion/AccordionUncontrolled.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var import_react4 = __toESM(require_react());
var AccordionUncontrolled = (props) => {
  const { defaultActive, onToggle, ...controlledProps } = props;
  const [active, setActive] = import_react4.default.useState(defaultActive || false);
  const handleToggle = (active2) => {
    setActive(active2);
    onToggle == null ? void 0 : onToggle(active2);
  };
  return (0, import_jsx_runtime2.jsx)(AccordionControlled_default, { ...controlledProps, onToggle: handleToggle, active });
};
var AccordionUncontrolled_default = AccordionUncontrolled;

// node_modules/reshaped/dist/components/Accordion/AccordionTrigger.js
var import_jsx_runtime9 = __toESM(require_jsx_runtime());
var import_react9 = __toESM(require_react());

// node_modules/reshaped/dist/components/Actionable/Actionable.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var import_react5 = __toESM(require_react());

// node_modules/reshaped/dist/constants/keys.js
var SPACE = " ";
var ENTER = "Enter";
var TAB = "Tab";
var UP = "ArrowUp";
var DOWN = "ArrowDown";
var RIGHT = "ArrowRight";
var LEFT = "ArrowLeft";
var BACKSPACE = "Backspace";

// node_modules/reshaped/dist/components/Actionable/Actionable.js
import s from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Actionable/Actionable.module.css";
var Actionable = (0, import_react5.forwardRef)((props, ref) => {
  const { children, href, onClick, type, disabled, insetFocus, borderRadius, as, fullWidth, className, attributes } = props;
  const rootClassNames = classNames(s.root, className, disabled && s["--disabled"], borderRadius && s[`--radius-${borderRadius}`], insetFocus && s["--inset"], fullWidth && s["--full-width"]);
  const rootAttributes = { ...attributes };
  const hasClickHandler = onClick || (attributes == null ? void 0 : attributes.onClick);
  const hasFocusHandler = (attributes == null ? void 0 : attributes.onFocus) || (attributes == null ? void 0 : attributes.onBlur);
  const isLink = Boolean(href || (attributes == null ? void 0 : attributes.href));
  const isButton = Boolean(hasClickHandler || hasFocusHandler || type || (attributes == null ? void 0 : attributes.ref));
  const renderedAsButton = !isLink && isButton && (!as || as === "button");
  let TagName;
  if (isLink) {
    TagName = "a";
    rootAttributes.href = disabled ? void 0 : href || (attributes == null ? void 0 : attributes.href);
  } else if (renderedAsButton) {
    TagName = "button";
    rootAttributes.type = type || (attributes == null ? void 0 : attributes.type) || "button";
    rootAttributes.disabled = disabled || (attributes == null ? void 0 : attributes.disabled);
  } else if (isButton) {
    const isFocusable = as === "label";
    const simulateButton = !isFocusable || hasClickHandler || hasFocusHandler;
    TagName = as || "span";
    rootAttributes.role = simulateButton ? "button" : void 0;
    rootAttributes.tabIndex = simulateButton ? 0 : void 0;
  } else {
    TagName = as || "span";
  }
  const handlePress = (event) => {
    var _a;
    if (disabled)
      return;
    onClick == null ? void 0 : onClick(event);
    (_a = attributes == null ? void 0 : attributes.onClick) == null ? void 0 : _a.call(attributes, event);
  };
  const handleKeyDown = (event) => {
    const isSpace = event.key === SPACE;
    const isEnter = event.key === ENTER;
    if (!isSpace && !isEnter)
      return;
    if (rootAttributes.role !== "button")
      return;
    event.preventDefault();
    handlePress(event);
  };
  return (0, import_jsx_runtime3.jsx)(TagName, { ref, ...rootAttributes, className: rootClassNames, onClick: handlePress, onKeyDown: handleKeyDown, children });
});
var Actionable_default = Actionable;

// node_modules/reshaped/dist/components/View/View.js
var import_react6 = __toESM(require_react());
var import_jsx_runtime6 = __toESM(require_jsx_runtime());
var import_react7 = __toESM(require_react());

// node_modules/reshaped/dist/components/Divider/Divider.js
var import_jsx_runtime4 = __toESM(require_jsx_runtime());
import s2 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Divider/Divider.module.css";
var Divider = (props) => {
  const { vertical, blank, className, attributes } = props;
  const rootClassNames = classNames(s2.root, className, blank && s2["--blank"], ...responsiveClassNames(s2, "--vertical", vertical));
  let ariaOrientation;
  if (typeof vertical === "boolean" || vertical === void 0) {
    ariaOrientation = vertical ? "vertical" : "horizontal";
  }
  return (0, import_jsx_runtime4.jsx)("div", { ...attributes, role: "separator", "aria-orientation": ariaOrientation, className: rootClassNames });
};
var Divider_default = Divider;

// node_modules/reshaped/dist/components/Hidden/Hidden.js
var import_jsx_runtime5 = __toESM(require_jsx_runtime());
import s3 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Hidden/Hidden.module.css";
var Hidden = (props) => {
  const { as: TagName = "div", children, visibility, hide } = props;
  const rootClassNames = classNames(s3.root, ...responsiveClassNames(s3, "--hidden", hide), visibility && s3["--visibility"]);
  return (0, import_jsx_runtime5.jsx)(TagName, { className: rootClassNames, children });
};
var Hidden_default = Hidden;

// node_modules/reshaped/dist/components/View/View.js
import s17 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/View/View.module.css";

// node_modules/reshaped/dist/styles/radius/index.js
import s4 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/styles/radius/radius.module.css";
var getRadiusStyles = (value) => {
  if (!value)
    return null;
  return {
    classNames: [s4.root, ...responsiveClassNames(s4, "--radius", value)]
  };
};
var radius_default = getRadiusStyles;

// node_modules/reshaped/dist/styles/bleed/index.js
import s5 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/styles/bleed/bleed.module.css";
var getBleedStyles = (value) => {
  if (value === void 0)
    return null;
  const classNames2 = [
    s5.root,
    ...responsiveClassNames(s5, "--bleed", responsivePropDependency(value, (value2) => typeof value2 === "number" && value2 > 0))
  ];
  const variables = responsiveVariables("--rs-bleed", value);
  return { classNames: classNames2, variables };
};
var bleed_default = getBleedStyles;

// node_modules/reshaped/dist/styles/width/index.js
import s6 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/styles/width/width.module.css";
var getWidthStyles = (value) => {
  if (!value)
    return null;
  const variables = responsiveVariables("--rs-w", value);
  const classNames2 = responsiveClassNames(s6, (value2) => typeof value2 === "number" ? "unit" : "literal", value, { excludeValueFromClassName: true });
  return { classNames: classNames2, variables };
};
var width_default = getWidthStyles;

// node_modules/reshaped/dist/styles/height/index.js
import s7 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/styles/height/height.module.css";
var getHeightStyles = (value) => {
  if (!value)
    return null;
  const variables = responsiveVariables("--rs-h", value);
  const classNames2 = responsiveClassNames(s7, (value2) => typeof value2 === "number" ? "unit" : "literal", value, { excludeValueFromClassName: true });
  return { classNames: classNames2, variables };
};
var height_default = getHeightStyles;

// node_modules/reshaped/dist/styles/maxWidth/index.js
import s8 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/styles/maxWidth/maxWidth.module.css";
var getMaxWidthStyles = (value) => {
  if (!value)
    return null;
  const variables = responsiveVariables("--rs-max-w", value);
  const classNames2 = responsiveClassNames(s8, (value2) => typeof value2 === "number" ? "unit" : "literal", value, { excludeValueFromClassName: true });
  return { classNames: classNames2, variables };
};
var maxWidth_default = getMaxWidthStyles;

// node_modules/reshaped/dist/styles/maxHeight/index.js
import s9 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/styles/maxHeight/maxHeight.module.css";
var getMaxHeightStyles = (value) => {
  if (!value)
    return null;
  const variables = responsiveVariables("--rs-max-h", value);
  const classNames2 = responsiveClassNames(s9, (value2) => typeof value2 === "number" ? "unit" : "literal", value, { excludeValueFromClassName: true });
  return { classNames: classNames2, variables };
};
var maxHeight_default = getMaxHeightStyles;

// node_modules/reshaped/dist/styles/minWidth/index.js
import s10 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/styles/minWidth/minWidth.module.css";
var getMinWidthStyles = (value) => {
  if (!value)
    return null;
  const variables = responsiveVariables("--rs-min-w", value);
  const classNames2 = responsiveClassNames(s10, (value2) => typeof value2 === "number" ? "unit" : "literal", value, { excludeValueFromClassName: true });
  return { classNames: classNames2, variables };
};
var minWidth_default = getMinWidthStyles;

// node_modules/reshaped/dist/styles/minHeight/index.js
import s11 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/styles/minHeight/minHeight.module.css";
var getMinHeightStyles = (value) => {
  if (!value)
    return null;
  const variables = responsiveVariables("--rs-min-h", value);
  const classNames2 = responsiveClassNames(s11, (value2) => typeof value2 === "number" ? "unit" : "literal", value, { excludeValueFromClassName: true });
  return { classNames: classNames2, variables };
};
var minHeight_default = getMinHeightStyles;

// node_modules/reshaped/dist/styles/position/index.js
import s12 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/styles/position/position.module.css";
var getPositionStyles = (value) => {
  if (!value)
    return null;
  const classNames2 = responsiveClassNames(s12, "--position", value);
  return { classNames: classNames2 };
};
var position_default = getPositionStyles;

// node_modules/reshaped/dist/styles/inset/index.js
import s13 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/styles/inset/inset.module.css";
var getInsetStyles = (value, side) => {
  if (value === void 0)
    return null;
  const suffix = side ? `-${side}` : "";
  const variableName = `--rs-inset${suffix}`;
  const variables = responsiveVariables(variableName, value);
  const classNames2 = responsiveClassNames(s13, `--inset${suffix}`, value, {
    excludeValueFromClassName: true
  });
  return { classNames: classNames2, variables };
};
var inset_default = getInsetStyles;

// node_modules/reshaped/dist/styles/aspectRatio/index.js
import s14 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/styles/aspectRatio/aspectRatio.module.css";
var getAspectRatioStyles = (value) => {
  if (!value)
    return null;
  const variables = responsiveVariables("--rs-ratio", value);
  return { classNames: s14.root, variables };
};
var aspectRatio_default = getAspectRatioStyles;

// node_modules/reshaped/dist/styles/border/index.js
import s15 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/styles/border/border.module.css";
var getBorderStyles = (value) => {
  if (!value)
    return null;
  return {
    classNames: [s15.root, ...responsiveClassNames(s15, "--border", value)]
  };
};
var border_default = getBorderStyles;

// node_modules/reshaped/dist/styles/textAlign/index.js
import s16 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/styles/textAlign/textAlign.module.css";
var getTextAlignStyles = (value) => {
  if (!value)
    return null;
  return {
    classNames: [...responsiveClassNames(s16, "--text-align", value)]
  };
};
var textAlign_default = getTextAlignStyles;

// node_modules/reshaped/dist/components/View/View.js
var ViewItem = (props) => {
  const { columns, grow, gapBefore, as: TagName = "div", order: order2, children, className, attributes } = props;
  const itemClassNames = classNames(s17.item, className, gapBefore === "auto" && s17["item--gap-auto"], gapBefore !== void 0 && s17["item--gap-before"], columns && s17["item--columns"], ...responsiveClassNames(s17, "item--grow", grow), ...responsiveClassNames(s17, "item--columns", columns));
  const itemVariables = {
    ...responsiveVariables("--rs-view-item-order", order2),
    ...responsiveVariables("--rs-view-item-gap-before", gapBefore)
  };
  return (0, import_jsx_runtime6.jsx)(TagName, { ...attributes, style: { ...attributes == null ? void 0 : attributes.style, ...itemVariables }, className: itemClassNames, children });
};
var View = (props) => {
  const {
    /**
     * Layout props
     */
    align,
    justify,
    wrap,
    gap,
    height,
    width,
    aspectRatio,
    maxHeight,
    maxWidth,
    minHeight,
    minWidth,
    padding,
    paddingInline,
    paddingBlock,
    paddingBottom,
    paddingEnd,
    paddingStart,
    paddingTop,
    bleed,
    /**
     * Style props
     * */
    animated,
    backgroundColor,
    borderColor,
    borderRadius,
    shadow,
    textAlign,
    overflow,
    position = "relative",
    inset,
    insetTop,
    insetBottom,
    insetStart,
    insetEnd,
    zIndex,
    /**
     * Item prop
     */
    grow,
    /**
     * Using any here to let TS save on type resolving, otherwise TS throws an error due to the type complexity
     * It still resolves the attributes correctly based on the tag
     */
    as: TagName = "div",
    children,
    divided,
    className,
    attributes
  } = props;
  let isFlex = !!align || !!justify || !!gap || !!props.direction;
  const direction = props.direction || (isFlex ? "column" : void 0);
  const radiusStyles = radius_default(borderRadius);
  const bleedStyles = bleed_default(bleed);
  const widthStyles = width_default(width);
  const heightStyles = height_default(height);
  const maxWidthStyles = maxWidth_default(maxWidth);
  const maxHeightStyles = maxHeight_default(maxHeight);
  const minWidthStyles = minWidth_default(minWidth);
  const minHeightStyles = minHeight_default(minHeight);
  const positionStyles = position_default(position);
  const insetStyles = inset_default(inset);
  const insetTopStyles = inset_default(insetTop, "top");
  const insetBottomStyles = inset_default(insetBottom, "bottom");
  const insetStartStyles = inset_default(insetStart, "start");
  const insetEndStyles = inset_default(insetEnd, "end");
  const aspectRatioStyles = aspectRatio_default(aspectRatio);
  const borderStyles = border_default(borderColor);
  const textAlignStyles = textAlign_default(textAlign);
  let renderedItemIndex = 0;
  let nowrap;
  const renderDivider = ({ className: className2, key }) => {
    const dividerClassName = classNames(s17.divider, className2);
    let isDividerVertical = false;
    if (typeof direction === "string" && direction.startsWith("row")) {
      isDividerVertical = true;
    } else if (direction) {
      const viewports = Object.keys(direction);
      isDividerVertical = viewports.reduce((acc, viewport) => {
        const viewportDirection = direction[viewport];
        if (!viewportDirection)
          return acc;
        return {
          ...acc,
          [viewport]: viewportDirection.startsWith("row")
        };
      }, {});
    }
    return (0, import_jsx_runtime6.jsx)("div", { className: dividerClassName, children: (0, import_jsx_runtime6.jsx)(Divider_default, { vertical: isDividerVertical, blank: true }) }, `${key}-divider`);
  };
  const renderItem = ({ className: className2, child, index }) => {
    var _a, _b, _c;
    const isItem = child.type === ViewItem;
    const isView = child.type === View;
    const key = child.key || index;
    const dividerElement = !!index && divided && renderDivider({ className: className2, key });
    let itemElement;
    if (isItem) {
      itemElement = import_react7.default.cloneElement(child, {
        className: classNames(className2, child.props.className)
      });
    } else if (className2 || !import_react7.default.isValidElement(child)) {
      itemElement = (0, import_jsx_runtime6.jsx)("div", { className: className2, children: child }, key);
    } else {
      itemElement = child;
    }
    if (isItem && ((_a = child.props) == null ? void 0 : _a.grow))
      nowrap = child.props.grow;
    if (isItem && ((_b = child.props) == null ? void 0 : _b.gap) === "auto")
      nowrap = true;
    if ((isItem || isView) && ((_c = child.props) == null ? void 0 : _c.grow))
      isFlex = true;
    return [dividerElement, itemElement];
  };
  const formattedChildren = import_react7.default.Children.map(children, (child, index) => {
    if (!child)
      return null;
    const renderedIndex = renderedItemIndex;
    renderedItemIndex += 1;
    if (child.type === Hidden_default) {
      const { children: hiddenChild, ...hiddenProps } = child.props;
      const key = child.key || index;
      return (0, import_react6.createElement)(Hidden_default, { ...hiddenProps, key }, renderItem({ child: hiddenChild, index: renderedIndex }));
    }
    if (child.type === import_react7.default.Fragment && import_react7.default.Children.count(child.props.children) > 1) {
      return child.props.children.map((child2) => {
        if (!child2)
          return null;
        const index2 = renderedIndex;
        renderedItemIndex += 1;
        return renderItem({ child: child2, index: index2 });
      });
    }
    return renderItem({ child, index: renderedIndex });
  });
  const rootClassNames = classNames(
    s17.root,
    className,
    radiusStyles == null ? void 0 : radiusStyles.classNames,
    positionStyles == null ? void 0 : positionStyles.classNames,
    bleedStyles == null ? void 0 : bleedStyles.classNames,
    widthStyles == null ? void 0 : widthStyles.classNames,
    heightStyles == null ? void 0 : heightStyles.classNames,
    aspectRatioStyles == null ? void 0 : aspectRatioStyles.classNames,
    maxWidthStyles == null ? void 0 : maxWidthStyles.classNames,
    maxHeightStyles == null ? void 0 : maxHeightStyles.classNames,
    minWidthStyles == null ? void 0 : minWidthStyles.classNames,
    minHeightStyles == null ? void 0 : minHeightStyles.classNames,
    insetStyles == null ? void 0 : insetStyles.classNames,
    insetTopStyles == null ? void 0 : insetTopStyles.classNames,
    insetBottomStyles == null ? void 0 : insetBottomStyles.classNames,
    insetStartStyles == null ? void 0 : insetStartStyles.classNames,
    insetEndStyles == null ? void 0 : insetEndStyles.classNames,
    borderStyles == null ? void 0 : borderStyles.classNames,
    textAlignStyles == null ? void 0 : textAlignStyles.classNames,
    backgroundColor && s17[`--bg-${backgroundColor}`],
    shadow && s17[`--shadow-${shadow}`],
    overflow && s17[`--overflow-${overflow}`],
    animated && s17["--animated"],
    divided && s17["--divided"],
    (padding !== void 0 || paddingInline !== void 0 || paddingBlock !== void 0) && s17["--padding"],
    paddingBottom !== void 0 && s17["--padding-bottom"],
    paddingEnd !== void 0 && s17["--padding-end"],
    paddingStart !== void 0 && s17["--padding-start"],
    paddingTop !== void 0 && s17["--padding-top"],
    (isFlex || nowrap) && s17["--flex"],
    ...responsiveClassNames(s17, "--direction", direction),
    ...responsiveClassNames(s17, "--align", align),
    ...responsiveClassNames(s17, "--justify", justify),
    ...responsiveClassNames(s17, "--nowrap", nowrap || wrap === false),
    ...responsiveClassNames(s17, "--wrap", wrap),
    ...responsiveClassNames(s17, "item--grow", grow)
  );
  const rootVariables = {
    ...attributes == null ? void 0 : attributes.style,
    ...responsiveVariables("--rs-view-gap", gap),
    ...responsiveVariables("--rs-view-p-vertical", paddingBlock || padding),
    ...responsiveVariables("--rs-view-p-horizontal", paddingInline || padding),
    ...responsiveVariables("--rs-view-p-bottom", paddingBottom),
    ...responsiveVariables("--rs-view-p-top", paddingTop),
    ...responsiveVariables("--rs-view-p-start", paddingStart),
    ...responsiveVariables("--rs-view-p-end", paddingEnd),
    ...bleedStyles == null ? void 0 : bleedStyles.variables,
    ...widthStyles == null ? void 0 : widthStyles.variables,
    ...heightStyles == null ? void 0 : heightStyles.variables,
    ...aspectRatioStyles == null ? void 0 : aspectRatioStyles.variables,
    ...maxWidthStyles == null ? void 0 : maxWidthStyles.variables,
    ...maxHeightStyles == null ? void 0 : maxHeightStyles.variables,
    ...minWidthStyles == null ? void 0 : minWidthStyles.variables,
    ...minHeightStyles == null ? void 0 : minHeightStyles.variables,
    ...insetStyles == null ? void 0 : insetStyles.variables,
    ...insetTopStyles == null ? void 0 : insetTopStyles.variables,
    ...insetBottomStyles == null ? void 0 : insetBottomStyles.variables,
    ...insetStartStyles == null ? void 0 : insetStartStyles.variables,
    ...insetEndStyles == null ? void 0 : insetEndStyles.variables,
    ...zIndex ? { "--rs-view-z": zIndex } : {}
  };
  return (0, import_jsx_runtime6.jsx)(TagName, { ...attributes, className: rootClassNames, style: rootVariables, children: formattedChildren });
};
View.Item = ViewItem;
var View_default = View;

// node_modules/reshaped/dist/components/Icon/Icon.js
var import_jsx_runtime7 = __toESM(require_jsx_runtime());
var import_react8 = __toESM(require_react());
import s18 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Icon/Icon.module.css";
var Icon = (props) => {
  const { svg: Component, className, color, size = "1em", autoWidth, attributes } = props;
  const heightStyles = height_default(size);
  const rootClassName = classNames(s18.root, className, heightStyles == null ? void 0 : heightStyles.classNames, color && s18[`--color-${color}`], autoWidth && s18["--auto"]);
  const icon = import_react8.default.isValidElement(Component) ? Component : (
    // @ts-ignore
    (0, import_jsx_runtime7.jsx)(Component, {})
  );
  const style = { ...attributes == null ? void 0 : attributes.style, ...heightStyles == null ? void 0 : heightStyles.variables };
  return (
    // All icons are decorative, a11y attributes should be set for buttons wrapping them
    (0, import_jsx_runtime7.jsx)("span", { ...attributes, "aria-hidden": "true", className: rootClassName, style, children: import_react8.default.cloneElement(icon, { focusable: false }) })
  );
};
var Icon_default = Icon;

// node_modules/reshaped/dist/icons/ChevronDown.js
var import_jsx_runtime8 = __toESM(require_jsx_runtime());
var IconChevronDown = () => {
  return (0, import_jsx_runtime8.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", stroke: "currentColor", fill: "none", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round", children: (0, import_jsx_runtime8.jsx)("polyline", { points: "6 9 12 15 18 9" }) });
};
var ChevronDown_default = IconChevronDown;

// node_modules/reshaped/dist/components/Accordion/AccordionTrigger.js
import s19 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Accordion/Accordion.module.css";
var AccordionTrigger = (props) => {
  const { children } = props;
  const { active, onToggle, triggerId, contentId, iconPosition = "end", iconSize } = import_react9.default.useContext(Accordion_context_default);
  const iconClassNames = classNames(s19.icon, active && s19["icon--active"]);
  const handleClick = () => {
    onToggle == null ? void 0 : onToggle(!active);
  };
  const attributes = { "aria-expanded": active, "aria-controls": contentId, id: triggerId };
  if (typeof children === "function") {
    return (0, import_jsx_runtime9.jsx)(import_jsx_runtime9.Fragment, { children: children({ ...attributes, onClick: handleClick }, { active }) });
  }
  return (0, import_jsx_runtime9.jsx)(Actionable_default, { onClick: handleClick, fullWidth: true, attributes, children: (0, import_jsx_runtime9.jsxs)(View_default, { gap: 2, direction: iconPosition === "start" ? "row-reverse" : "row", align: "center", children: [(0, import_jsx_runtime9.jsx)(View_default.Item, { grow: true, children }), (0, import_jsx_runtime9.jsx)(Icon_default, { size: iconSize || 4, svg: ChevronDown_default, className: iconClassNames })] }) });
};
var AccordionTrigger_default = AccordionTrigger;

// node_modules/reshaped/dist/components/Accordion/AccordionContent.js
var import_jsx_runtime11 = __toESM(require_jsx_runtime());
var import_react11 = __toESM(require_react());

// node_modules/reshaped/dist/components/_private/Expandable/Expandable.js
var import_jsx_runtime10 = __toESM(require_jsx_runtime());
var import_react10 = __toESM(require_react());

// node_modules/reshaped/dist/utilities/animation.js
var onNextFrame = (cb) => {
  requestAnimationFrame(() => {
    requestAnimationFrame(() => cb());
  });
};
var transitionAttribute = "data-rs-no-transition";
var disableTransitions = () => {
  document.documentElement.setAttribute(transitionAttribute, "true");
};
var enableTransitions = () => {
  document.documentElement.removeAttribute(transitionAttribute);
};
var checkTransitions = () => {
  return !document.documentElement.hasAttribute(transitionAttribute);
};

// node_modules/reshaped/dist/components/_private/Expandable/Expandable.js
import s20 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/_private/Expandable/Expandable.module.css";
var Expandable = (props) => {
  const { children, active, attributes } = props;
  const rootRef = import_react10.default.useRef(null);
  const mountedRef = import_react10.default.useRef(false);
  const [animatedHeight, setAnimatedHeight] = import_react10.default.useState(active ? "auto" : null);
  const contentClassNames = classNames(s20.root, mountedRef.current && animatedHeight !== "auto" && s20["--animated"]);
  const handleTransitionEnd = (e) => {
    if (e.propertyName !== "height")
      return;
    setAnimatedHeight(active ? "auto" : null);
  };
  import_react10.default.useEffect(() => {
    onNextFrame(() => {
      mountedRef.current = true;
    });
  }, []);
  import_react10.default.useEffect(() => {
    const rootEl = rootRef.current;
    if (!rootEl || !mountedRef.current)
      return;
    let targetHeight = 0;
    if (active) {
      rootEl.style.height = "auto";
      targetHeight = rootEl.clientHeight;
      rootEl.style.height = "0";
    }
    if (!active) {
      rootEl.style.height = `${rootEl.clientHeight}px`;
    }
    setAnimatedHeight(targetHeight);
  }, [active]);
  return (0, import_jsx_runtime10.jsx)("div", { ...attributes, className: contentClassNames, ref: rootRef, style: animatedHeight !== null ? { height: animatedHeight, overflow: animatedHeight === "auto" ? "visible" : void 0 } : void 0, onTransitionEnd: handleTransitionEnd, role: "region", hidden: !active && animatedHeight === null, children });
};
var Expandable_default = Expandable;

// node_modules/reshaped/dist/components/Accordion/AccordionContent.js
var AccordionContent = (props) => {
  const { children } = props;
  const { active, triggerId, contentId } = import_react11.default.useContext(Accordion_context_default);
  return (0, import_jsx_runtime11.jsx)(Expandable_default, { active, attributes: { "aria-labelledby": triggerId, id: contentId }, children });
};
var AccordionContent_default = AccordionContent;

// node_modules/reshaped/dist/components/Accordion/Accordion.js
var Accordion = (props) => {
  const { active } = props;
  if (active !== void 0)
    return (0, import_jsx_runtime12.jsx)(AccordionControlled_default, { ...props });
  return (0, import_jsx_runtime12.jsx)(AccordionUncontrolled_default, { ...props });
};
Accordion.Trigger = AccordionTrigger_default;
Accordion.Content = AccordionContent_default;
var Accordion_default = Accordion;

// node_modules/reshaped/dist/components/ActionBar/ActionBar.js
var import_jsx_runtime13 = __toESM(require_jsx_runtime());
import s21 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/ActionBar/ActionBar.module.css";
var ActionBar = (props) => {
  const { position = "bottom", padding, paddingBlock = 3, paddingInline = 4, children, elevated, className, attributes } = props;
  const rootClassNames = classNames(s21.root, elevated && s21["--elevated"], position && s21[`--position-${position}`], className);
  return (0, import_jsx_runtime13.jsx)(View_default, { className: rootClassNames, attributes, paddingBlock: padding || paddingBlock, paddingInline: padding || paddingInline, children });
};
var ActionBar_default = ActionBar;

// node_modules/reshaped/dist/components/Alert/Alert.js
var import_jsx_runtime15 = __toESM(require_jsx_runtime());

// node_modules/reshaped/dist/components/Text/Text.js
var import_jsx_runtime14 = __toESM(require_jsx_runtime());
import s22 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Text/Text.module.css";
var tagMap = {
  "title-1": "h1",
  "title-2": "h2",
  "title-3": "h3",
  "title-4": "h4",
  "title-5": "h5",
  "title-6": "h6"
};
var Text = (props) => {
  const { variant, color, weight, align, decoration, maxLines, wrap, children, className, attributes } = props;
  const largestVariant = typeof variant === "string" ? variant : (variant == null ? void 0 : variant.xl) || (variant == null ? void 0 : variant.l) || (variant == null ? void 0 : variant.m) || (variant == null ? void 0 : variant.s);
  const alignStyles = textAlign_default(align);
  const TagName = props.as || largestVariant && tagMap[largestVariant] || "div";
  const rootClassName = classNames(s22.root, color && s22[`--color-${color}`], ...responsiveClassNames(s22, "--variant", variant), ...responsiveClassNames(s22, "--weight", weight), decoration && s22[`--decoration-${decoration}`], maxLines !== void 0 && s22[`--clamp`], maxLines === 1 && s22["--break-all"], wrap && s22[`--wrap-${wrap}`], alignStyles == null ? void 0 : alignStyles.classNames, className);
  const style = {
    ...attributes == null ? void 0 : attributes.style,
    "--rs-text-lines": maxLines
  };
  return (0, import_jsx_runtime14.jsx)(TagName, { ...attributes, className: rootClassName, style, children });
};
var Text_default = Text;

// node_modules/reshaped/dist/components/Alert/Alert.js
import s23 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Alert/Alert.module.css";
var Alert = (props) => {
  const { title, children, icon, actionsSlot, color = "neutral", inline, bleed, className, attributes } = props;
  const isNeutral = color === "neutral";
  const renderContent = () => {
    if (inline) {
      return (0, import_jsx_runtime15.jsxs)(import_jsx_runtime15.Fragment, { children: [title && (0, import_jsx_runtime15.jsx)(Text_default, { variant: "body-3", weight: "medium", as: "span", children: title }), title && children && " ", children && (0, import_jsx_runtime15.jsx)(Text_default, { variant: "body-3", as: "span", children })] });
    }
    return (0, import_jsx_runtime15.jsxs)(View_default, { gap: 1, children: [title && (0, import_jsx_runtime15.jsx)(Text_default, { variant: "body-3", weight: "medium", children: title }), children && (0, import_jsx_runtime15.jsx)(Text_default, { variant: "body-3", children })] });
  };
  const applyActions = (content) => {
    if (!actionsSlot)
      return content;
    return (0, import_jsx_runtime15.jsxs)(View_default, { gap: inline ? 4 : 2, direction: inline ? "row" : "column", children: [inline ? (0, import_jsx_runtime15.jsx)(View_default.Item, { grow: true, children: content }) : content, actionsSlot && (0, import_jsx_runtime15.jsx)(Text_default, { variant: "body-3", weight: "medium", children: (0, import_jsx_runtime15.jsx)(View_default, { direction: "row", gap: 3, children: actionsSlot }) })] });
  };
  return (0, import_jsx_runtime15.jsx)(View_default, { direction: "row", gap: 3, padding: 4, bleed, borderRadius: "medium", borderColor: `${color}-faded`, backgroundColor: `${color}-faded`, className, attributes: {
    ...attributes,
    role: color === "critical" ? "alert" : "status"
  }, children: icon ? (0, import_jsx_runtime15.jsxs)(import_jsx_runtime15.Fragment, { children: [(0, import_jsx_runtime15.jsx)("div", { className: s23.icon, children: (0, import_jsx_runtime15.jsx)(Icon_default, { svg: icon, size: 5, color: isNeutral ? "primary" : color }) }), (0, import_jsx_runtime15.jsx)(View_default.Item, { grow: true, children: applyActions(renderContent()) })] }) : applyActions(renderContent()) });
};
var Alert_default = Alert;

// node_modules/reshaped/dist/components/Autocomplete/Autocomplete.js
var import_jsx_runtime43 = __toESM(require_jsx_runtime());
var import_react35 = __toESM(require_react());

// node_modules/reshaped/dist/components/TextField/TextField.js
var import_jsx_runtime22 = __toESM(require_jsx_runtime());

// node_modules/reshaped/dist/components/FormControl/FormControlClient.js
var import_jsx_runtime16 = __toESM(require_jsx_runtime());
var import_react13 = __toESM(require_react());

// node_modules/reshaped/dist/components/FormControl/FormControl.context.js
var import_react12 = __toESM(require_react());
var FormControlContext = import_react12.default.createContext({ attributes: {} });
var Provider = FormControlContext.Provider;
var useFormControlPrivate = () => import_react12.default.useContext(FormControlContext);
var useFormControl = () => {
  const { attributes, required, hasError, disabled } = useFormControlPrivate();
  return { attributes, required, hasError, disabled };
};

// node_modules/reshaped/dist/components/FormControl/FormControl.utilities.js
var getCaptionId = (id, variant) => `${id}-${variant || "caption"}`;

// node_modules/reshaped/dist/components/FormControl/FormControlClient.js
var FormControl = (props) => {
  const { children, id: passedId, required, hasError, group, disabled, size } = props;
  const id = useElementId_default(passedId);
  const WrapperTagName = group ? "fieldset" : "div";
  const [helperRendered, setHelperRendered] = import_react13.default.useState(false);
  const [errorRendered, setErrorRendered] = import_react13.default.useState(false);
  const describedby = [
    helperRendered && getCaptionId(id),
    errorRendered && getCaptionId(id, "error")
  ].filter(Boolean).join(" ");
  const attributes = { id, "aria-describedby": describedby };
  const errorRef = () => {
    setErrorRendered(true);
  };
  const helperRef = () => {
    setHelperRendered(true);
  };
  return (0, import_jsx_runtime16.jsx)(WrapperTagName, { children: (0, import_jsx_runtime16.jsx)(Provider, { value: { required, hasError, errorRef, helperRef, attributes, group, disabled, size }, children }) });
};
var FormControlClient_default = FormControl;

// node_modules/reshaped/dist/components/FormControl/FormControlLabel.js
var import_jsx_runtime17 = __toESM(require_jsx_runtime());
import s24 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/FormControl/FormControl.module.css";
var FormControlLabel = (props) => {
  const { children } = props;
  const { attributes, required, group, disabled, size } = useFormControlPrivate();
  const id = `${attributes.id}-label`;
  const tagProps = group ? { as: "legend", attributes: { id } } : {
    as: "label",
    attributes: { id, htmlFor: attributes.id }
  };
  return (0, import_jsx_runtime17.jsxs)(Text_default, { ...tagProps, variant: size === "large" ? "body-2" : "body-3", weight: "medium", className: s24.label, color: disabled ? "disabled" : void 0, children: [children, required && (0, import_jsx_runtime17.jsx)(Text_default, { color: disabled ? "disabled" : "critical", as: "span", children: "*" })] });
};
var FormControlLabel_default = FormControlLabel;

// node_modules/reshaped/dist/components/FormControl/FormControlError.js
var import_jsx_runtime19 = __toESM(require_jsx_runtime());

// node_modules/reshaped/dist/components/FormControl/FormControlCaption.js
var import_jsx_runtime18 = __toESM(require_jsx_runtime());
import s25 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/FormControl/FormControl.module.css";
var FormControlCaption = (props) => {
  const { children, variant, disabled } = props;
  const { attributes, size, helperRef, errorRef } = useFormControlPrivate();
  const id = getCaptionId(attributes.id, variant);
  const color = variant === "error" ? "critical" : "neutral-faded";
  const ref = variant === "error" ? errorRef : helperRef;
  return (0, import_jsx_runtime18.jsx)(Text_default, { as: "span", variant: size === "large" ? "body-3" : "caption-1", color: disabled && !variant ? "disabled" : color, attributes: { id, role: color ? "alert" : void 0, ref }, className: s25.caption, children });
};
var FormControlCaption_default = FormControlCaption;

// node_modules/reshaped/dist/components/FormControl/FormControlError.js
var FormControlError = (props) => {
  const { children } = props;
  const { hasError } = useFormControlPrivate();
  if (!hasError)
    return null;
  return (0, import_jsx_runtime19.jsx)(FormControlCaption_default, { variant: "error", children });
};
var FormControlError_default = FormControlError;

// node_modules/reshaped/dist/components/FormControl/FormControlHelper.js
var import_jsx_runtime20 = __toESM(require_jsx_runtime());
var FormControlHelper = (props) => {
  const { children } = props;
  const { disabled } = useFormControlPrivate();
  return (0, import_jsx_runtime20.jsx)(FormControlCaption_default, { disabled, children });
};
var FormControlHelper_default = FormControlHelper;

// node_modules/reshaped/dist/components/FormControl/FormControl.js
var FormControl2 = FormControlClient_default;
FormControl2.Label = FormControlLabel_default;
FormControl2.Helper = FormControlHelper_default;
FormControl2.Error = FormControlError_default;
var FormControl_default = FormControl2;

// node_modules/reshaped/dist/components/_private/Aligner/Aligner.js
var import_jsx_runtime21 = __toESM(require_jsx_runtime());
import s26 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/_private/Aligner/Aligner.module.css";
var Aligner = (props) => {
  const { side: passedSide = "all", children, className, attributes } = props;
  const sides = typeof passedSide === "string" ? [passedSide] : passedSide;
  const rootClassNames = classNames(s26.root, sides.map((side) => s26[`--side-${side}`]), className);
  return (0, import_jsx_runtime21.jsx)("div", { ...attributes, className: rootClassNames, children });
};
var Aligner_default = Aligner;

// node_modules/reshaped/dist/components/TextField/TextField.js
import s27 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/TextField/TextField.module.css";
var TextFieldSlot = (props) => {
  const { slot, icon, size, affix, position } = props;
  if (!icon && !slot && !affix)
    return null;
  const content = [
    slot && (0, import_jsx_runtime22.jsx)("div", { className: classNames(s27.slot, s27[`slot--position-${position}`]), children: slot }, "slot"),
    icon && (0, import_jsx_runtime22.jsx)("div", { className: s27.icon, children: (0, import_jsx_runtime22.jsx)(Icon_default, { size: responsivePropDependency(size, (size2) => {
      if (size2 === "large")
        return 5;
      if (size2 === "xlarge")
        return 6;
      return 4;
    }), svg: icon }) }, "icon"),
    affix && (0, import_jsx_runtime22.jsx)("div", { className: classNames(s27.affix, s27[`affix--position-${position}`]), children: affix }, "affix")
  ].filter(Boolean);
  return position === "end" ? content.reverse() : content;
};
var TextField = (props) => {
  var _a;
  const { onChange, onFocus, onBlur, name, value, defaultValue, placeholder, icon, endIcon, startSlot, endSlot, prefix, suffix, size = "medium", variant = "outline", focused, multiline, className, attributes } = props;
  const formControl = useFormControl();
  const id = useElementId_default(props.id);
  const inputId = (formControl == null ? void 0 : formControl.attributes.id) || ((_a = props.inputAttributes) == null ? void 0 : _a.id) || id;
  const disabled = (formControl == null ? void 0 : formControl.disabled) || props.disabled;
  const hasError = (formControl == null ? void 0 : formControl.hasError) || props.hasError;
  const inputAttributes = { ...props.inputAttributes, ...formControl == null ? void 0 : formControl.attributes };
  const rootClassName = classNames(s27.root, className, size && responsiveClassNames(s27, "--size", size), hasError && s27["--status-error"], disabled && s27["--disabled"], focused && s27["--focused"], multiline && s27["--multiline"], variant && s27[`--variant-${variant}`]);
  const handleChange = (event) => {
    if (!onChange)
      return;
    onChange({ name, value: event.target.value, event });
  };
  return (0, import_jsx_runtime22.jsxs)("div", { ...attributes, "data-rs-aligner-target": true, className: rootClassName, children: [(0, import_jsx_runtime22.jsx)(TextFieldSlot, { position: "start", icon, slot: startSlot, size, affix: prefix }), (0, import_jsx_runtime22.jsx)("input", { ...inputAttributes, className: s27.input, disabled, name, placeholder, value, defaultValue, onChange: handleChange, onFocus: onFocus || (inputAttributes == null ? void 0 : inputAttributes.onFocus), onBlur: onBlur || (inputAttributes == null ? void 0 : inputAttributes.onBlur), id: inputId }), (0, import_jsx_runtime22.jsx)(TextFieldSlot, { position: "end", icon: endIcon, slot: endSlot, size, affix: suffix })] });
};
TextField.Aligner = Aligner_default;
var TextField_default = TextField;

// node_modules/reshaped/dist/components/DropdownMenu/DropdownMenu.js
var import_jsx_runtime42 = __toESM(require_jsx_runtime());
var import_react34 = __toESM(require_react());

// node_modules/reshaped/dist/components/Popover/Popover.js
var import_jsx_runtime38 = __toESM(require_jsx_runtime());

// node_modules/reshaped/dist/components/_private/Flyout/Flyout.js
var import_jsx_runtime31 = __toESM(require_jsx_runtime());

// node_modules/reshaped/dist/components/_private/Flyout/FlyoutUncontrolled.js
var import_jsx_runtime25 = __toESM(require_jsx_runtime());
var import_react25 = __toESM(require_react());

// node_modules/reshaped/dist/components/_private/Flyout/FlyoutControlled.js
var import_jsx_runtime24 = __toESM(require_jsx_runtime());
var import_react24 = __toESM(require_react());

// node_modules/reshaped/dist/utilities/Chain.js
var Chain = class {
  constructor() {
    __publicField(this, "chain", {});
    __publicField(this, "tailId", null);
    __publicField(this, "idCounter", 0);
  }
  generateId() {
    this.idCounter += 1;
    return this.idCounter;
  }
  getAll() {
    return this.chain;
  }
  get(id) {
    return this.chain[id];
  }
  isLast(id) {
    return this.tailId !== null && id === this.tailId;
  }
  isEmpty() {
    return typeof this.tailId !== "number";
  }
  add(data) {
    const previousId = this.tailId;
    const previousItem = previousId && this.get(previousId);
    const id = this.generateId();
    this.chain[id] = { previousId, data };
    if (previousItem)
      previousItem.nextId = id;
    this.tailId = id;
    return id;
  }
  remove(id) {
    const target = this.chain[id];
    if (!target)
      return;
    const previousId = target.previousId;
    const previousItem = previousId && this.get(previousId);
    const nextId = target.nextId;
    const nextItem = nextId && this.get(nextId);
    if (previousItem)
      previousItem.nextId = target.nextId ?? null;
    if (nextItem)
      nextItem.previousId = target.previousId ?? null;
    if (!nextId)
      this.tailId = previousId ?? null;
    const data = this.get(id).data;
    delete this.chain[id];
    return data;
  }
  removePreviousTill(id, condition) {
    const target = this.get(id);
    const data = this.remove(id);
    if (!target || !target.previousId)
      return data;
    const keepIterating = !condition(target);
    if (keepIterating)
      return this.removePreviousTill(target.previousId, condition);
    return data;
  }
};
var Chain_default = Chain;

// node_modules/reshaped/dist/utilities/a11y/TrapScreenReader.js
var TrapScreenReader = class {
  constructor(root) {
    __publicField(this, "root");
    /**
     * Elements ignored by screen reader when trap is active
     */
    __publicField(this, "hiddenElements", []);
    /**
     * Apply aria-hidden to all elements except the passed
     */
    __publicField(this, "hideSiblingsFromScreenReader", (el) => {
      let sibling = el.parentNode && el.parentNode.firstChild;
      while (sibling) {
        const notCurrent = sibling !== el;
        const isValid = sibling.nodeType === 1 && !sibling.hasAttribute("aria-hidden");
        if (notCurrent && isValid) {
          sibling.setAttribute("aria-hidden", "true");
          this.hiddenElements.push(sibling);
        }
        sibling = sibling.nextSibling;
      }
    });
    __publicField(this, "release", () => {
      this.hiddenElements.forEach((el) => {
        el.removeAttribute("aria-hidden");
      });
      this.hiddenElements = [];
    });
    __publicField(this, "trap", () => {
      let currentEl = this.root;
      this.release();
      while (currentEl !== document.body && currentEl.parentElement) {
        this.hideSiblingsFromScreenReader(currentEl);
        currentEl = currentEl.parentElement;
      }
    });
    this.root = root;
  }
};
var TrapScreenReader_default = TrapScreenReader;

// node_modules/reshaped/dist/utilities/a11y/focus.js
var pseudoFocusAttribute = "data-rs-focus";
var focusableSelector = 'a,button,input:not([type="hidden"]),textarea,select,details,[tabindex]:not([tabindex="-1"])';
var getActiveElement = () => {
  const pseudoFocusedEl = document.querySelector(`[${pseudoFocusAttribute}]`);
  return pseudoFocusedEl || document.activeElement;
};
var focusElement = (el, options) => {
  var _a;
  (_a = document.querySelector(`[${pseudoFocusAttribute}]`)) == null ? void 0 : _a.removeAttribute(pseudoFocusAttribute);
  if (options == null ? void 0 : options.pseudoFocus) {
    el.setAttribute(pseudoFocusAttribute, "true");
  } else {
    el.focus();
  }
};
var getFocusableElements = (rootEl, options) => {
  const focusableElements = Array.from(rootEl.querySelectorAll(focusableSelector));
  const filteredElements = focusableElements.filter((el) => {
    if (el.hasAttribute("disabled"))
      return false;
    if (el.clientHeight === 0)
      return false;
    if (el.type === "radio") {
      let sameNameRadioEls;
      if (el.form) {
        const formInputs = el.form.elements.namedItem(el.name);
        if (!formInputs)
          return false;
        const multipleElementsFound = "length" in formInputs;
        if (!multipleElementsFound) {
          sameNameRadioEls = [formInputs];
        } else {
          sameNameRadioEls = Array.from(formInputs).filter((el2) => "type" in el2 && el2.type === "radio");
        }
      } else {
        sameNameRadioEls = Array.from(rootEl.querySelectorAll(`[type="radio"][name="${el.name}"]`));
      }
      if (sameNameRadioEls == null ? void 0 : sameNameRadioEls.length) {
        const checkedEl = Array.from(sameNameRadioEls).find((el2) => el2.checked);
        if (checkedEl && el !== checkedEl)
          return false;
        if (!checkedEl && el !== sameNameRadioEls[0])
          return false;
      }
    }
    return true;
  });
  if ((options == null ? void 0 : options.additionalElement) && filteredElements.length) {
    filteredElements.unshift(options.additionalElement);
  }
  return filteredElements;
};
var getFocusData = (args) => {
  const { root, target, options } = args;
  const focusable = getFocusableElements(root, { additionalElement: options == null ? void 0 : options.additionalElement });
  const focusableLimit = focusable.length - 1;
  const currentElement = getActiveElement();
  const currentIndex = focusable.indexOf(currentElement);
  const positions2 = {
    next: currentIndex + 1,
    prev: currentIndex - 1,
    first: 0,
    last: focusableLimit
  };
  let nextIndex = positions2[target];
  const isOverflow = nextIndex > focusableLimit || nextIndex < 0;
  if (isOverflow) {
    if (options == null ? void 0 : options.circular) {
      nextIndex = target === "prev" ? positions2.last : positions2.first;
    } else {
      nextIndex = target === "prev" ? positions2.first : positions2.last;
    }
  }
  return { overflow: isOverflow, el: focusable[nextIndex] };
};
var focusTargetElement = (root, target) => {
  const data = getFocusData({ root, target });
  focusElement(data.el);
};
var focusNextElement = (root) => focusTargetElement(root, "next");
var focusPreviousElement = (root) => focusTargetElement(root, "prev");
var focusFirstElement = (root) => focusTargetElement(root, "first");
var focusLastElement = (root) => focusTargetElement(root, "last");

// node_modules/reshaped/dist/utilities/a11y/keyboardMode.js
var keyboardModeAttribute = "data-rs-keyboard";
var enableKeyboardMode = () => {
  document.documentElement.setAttribute(keyboardModeAttribute, "true");
};
var disableKeyboardMode = () => {
  document.documentElement.removeAttribute(keyboardModeAttribute);
};
var checkKeyboardMode = () => {
  return document.documentElement.hasAttribute(keyboardModeAttribute);
};

// node_modules/reshaped/dist/utilities/a11y/TrapFocus.js
var _TrapFocus = class _TrapFocus {
  constructor(root) {
    __publicField(this, "chainId");
    __publicField(this, "root");
    __publicField(this, "trigger", null);
    __publicField(this, "options", {});
    __publicField(this, "trapped");
    __publicField(this, "screenReaderTrap");
    __publicField(this, "mutationObserver", null);
    /**
     * Handle keyboard navigation while focus is trapped
     */
    __publicField(this, "handleKeyDown", (event) => {
      if (_TrapFocus.chain.tailId !== this.chainId)
        return;
      const { mode, onNavigateOutside, pseudoFocus, includeTrigger } = this.options;
      let navigationMode = "tabs";
      if (mode === "action-menu" || mode === "selection-menu")
        navigationMode = "arrows";
      const key = event.key;
      const isTab = key === TAB;
      const isNextTab = isTab && !event.shiftKey;
      const isBackTab = isTab && event.shiftKey;
      const isUp = navigationMode === "arrows" && key === UP;
      const isDown = navigationMode === "arrows" && key === DOWN;
      const isPrev = isBackTab && navigationMode === "tabs" || isUp;
      const isNext = isNextTab && navigationMode === "tabs" || isDown;
      const isFocusedOnTrigger = getActiveElement() === this.trigger;
      const focusData = getFocusData({
        root: this.root,
        target: isPrev ? "prev" : "next",
        options: {
          additionalElement: includeTrigger ? this.trigger : void 0,
          circular: mode !== "action-menu"
        }
      });
      const hasNavigatedOutside = isTab && navigationMode === "arrows" || mode === "content-menu" && isTab && focusData.overflow;
      if (hasNavigatedOutside) {
        if (isBackTab && !isFocusedOnTrigger)
          event.preventDefault();
        this.release();
        onNavigateOutside == null ? void 0 : onNavigateOutside();
        return;
      }
      if (!isPrev && !isNext)
        return;
      event.preventDefault();
      if (!focusData.el)
        return;
      focusElement(focusData.el, { pseudoFocus });
    });
    __publicField(this, "addListeners", () => document.addEventListener("keydown", this.handleKeyDown));
    __publicField(this, "removeListeners", () => document.removeEventListener("keydown", this.handleKeyDown));
    /**
     * Trap the focus, add observer and keyboard event listeners
     * and create a chain item
     */
    __publicField(this, "trap", (options = {}) => {
      const { mode = "dialog", includeTrigger, initialFocusEl } = options;
      const trigger = getActiveElement();
      const focusable = getFocusableElements(this.root, {
        additionalElement: includeTrigger ? trigger : void 0
      });
      const pseudoFocus = mode === "selection-menu";
      this.options = { ...options, pseudoFocus };
      this.trigger = trigger;
      this.mutationObserver = new MutationObserver(() => {
        const currentActiveElement = getActiveElement();
        if (this.root.contains(currentActiveElement))
          return;
        const focusable2 = getFocusableElements(this.root, {
          additionalElement: includeTrigger ? trigger : void 0
        });
        if (!focusable2.length)
          return;
        focusElement(focusable2[0], { pseudoFocus });
      });
      this.removeListeners();
      if (mode === "dialog")
        this.screenReaderTrap.trap();
      this.mutationObserver.observe(this.root, { childList: true, subtree: true });
      if (!focusable.length && !initialFocusEl)
        return;
      this.addListeners();
      const tailItem = _TrapFocus.chain.tailId && _TrapFocus.chain.get(_TrapFocus.chain.tailId);
      if (!tailItem || this.root !== tailItem.data.root) {
        this.chainId = _TrapFocus.chain.add(this);
        focusElement(initialFocusEl || focusable[0], { pseudoFocus });
      }
      this.trapped = true;
    });
    /**
     * Disabled the trap focus for the element,
     * cleanup all observers/handlers and trap for the previous element in the chain
     */
    __publicField(this, "release", (releaseOptions = {}) => {
      var _a;
      const { withoutFocusReturn } = releaseOptions;
      if (!this.trapped || !this.chainId)
        return;
      this.trapped = false;
      if (this.trigger && !withoutFocusReturn) {
        this.trigger.focus({ preventScroll: !checkKeyboardMode() });
      }
      _TrapFocus.chain.removePreviousTill(this.chainId, (item) => document.body.contains(item.data.trigger));
      (_a = this.mutationObserver) == null ? void 0 : _a.disconnect();
      this.removeListeners();
      this.screenReaderTrap.release();
      const previousItem = _TrapFocus.chain.tailId && _TrapFocus.chain.get(_TrapFocus.chain.tailId);
      if (previousItem) {
        const trapInstance = new _TrapFocus(previousItem.data.root);
        trapInstance.trap(previousItem.data.options);
      }
    });
    this.root = root;
    this.screenReaderTrap = new TrapScreenReader_default(root);
  }
};
__publicField(_TrapFocus, "chain", new Chain_default());
var TrapFocus = _TrapFocus;
var TrapFocus_default = TrapFocus;

// node_modules/reshaped/dist/hooks/_private/useIsDismissible.js
var import_react14 = __toESM(require_react());
var queue = {};
var latestId = null;
var removeFromQueue = (id) => {
  if (!queue[id])
    return;
  if (id === latestId)
    latestId = queue[id].parentId;
  delete queue[id];
  if (latestId === null)
    queue = {};
};
var addToQueue = (id, contentRef, triggerRef) => {
  var _a;
  const parentItem = latestId ? queue[latestId] : void 0;
  const insideParent = (triggerRef == null ? void 0 : triggerRef.current) && parentItem && ((_a = parentItem.contentRef.current) == null ? void 0 : _a.contains(triggerRef.current));
  if (!insideParent && triggerRef && latestId) {
    removeFromQueue(latestId);
  }
  queue[id] = { parentId: latestId, triggerRef, contentRef };
  latestId = id;
};
var useIsDismissible = (active = false, contentRef, triggerRef) => {
  const id = useElementId_default();
  const isDismissible = import_react14.default.useCallback(() => latestId === id, [id]);
  import_react14.default.useEffect(() => {
    if (active) {
      addToQueue(id, contentRef, triggerRef);
    } else {
      removeFromQueue(id);
    }
  }, [active, id, contentRef, triggerRef]);
  return isDismissible;
};
var useIsDismissible_default = useIsDismissible;

// node_modules/reshaped/dist/hooks/useIsomorphicLayoutEffect.js
var import_react15 = __toESM(require_react());
var useIsomorphicLayoutEffect = typeof window !== "undefined" ? import_react15.default.useLayoutEffect : import_react15.default.useEffect;
var useIsomorphicLayoutEffect_default = useIsomorphicLayoutEffect;

// node_modules/reshaped/dist/hooks/useHotkeys.js
var import_react17 = __toESM(require_react());

// node_modules/reshaped/dist/hooks/_private/useSingletonHotkeys.js
var import_jsx_runtime23 = __toESM(require_jsx_runtime());
var import_react16 = __toESM(require_react());
var COMBINATION_DELIMETER = "+";
var pressedMap = {};
var modifiedKeys = [];
var formatHotkey = (hotkey) => {
  if (hotkey === " ")
    return hotkey;
  return hotkey.replace(/\s/g, "").toLowerCase();
};
var getHotkeyId = (hotkey) => {
  return formatHotkey(hotkey).split(COMBINATION_DELIMETER).sort().join(COMBINATION_DELIMETER);
};
var getEventKey = (e) => {
  if (!e.key)
    return;
  if (e.altKey && /^[Key|Digit|Numpad]/.test(e.code)) {
    return e.code.toLowerCase().replace(/key|digit|numpad/, "");
  }
  return e.key.toLowerCase();
};
var walkHotkeys = (hotkeys, cb) => {
  Object.keys(hotkeys).forEach((key) => {
    key.split(",").forEach((hotkey) => {
      const data = hotkeys[key];
      if (!data)
        return;
      cb(getHotkeyId(hotkey), data);
    });
  });
};
var HotkeyStore = class {
  constructor() {
    __publicField(this, "hotkeyMap", {});
    __publicField(this, "getSize", () => Object.keys(this.hotkeyMap).length);
    __publicField(this, "bindHotkeys", (hotkeys, ref, options) => {
      walkHotkeys(hotkeys, (id, hotkeyData) => {
        if (!hotkeyData)
          return;
        if (!this.hotkeyMap[id]) {
          this.hotkeyMap[id] = /* @__PURE__ */ new Set();
        }
        this.hotkeyMap[id].add({ callback: hotkeyData, ref, options });
      });
    });
    __publicField(this, "unbindHotkeys", (hotkeys) => {
      walkHotkeys(hotkeys, (id, hotkeyCallback) => {
        var _a, _b;
        if (!hotkeyCallback)
          return;
        (_a = this.hotkeyMap[id]) == null ? void 0 : _a.forEach((data) => {
          if (data.callback === hotkeyCallback) {
            this.hotkeyMap[id].delete(data);
          }
        });
        if (!((_b = this.hotkeyMap[id]) == null ? void 0 : _b.size)) {
          delete this.hotkeyMap[id];
        }
      });
    });
    __publicField(this, "handleKeyDown", (pressedMap2, e) => {
      const pressedKeys = Object.keys(pressedMap2);
      if (!pressedKeys.length)
        return;
      const pressedId = getHotkeyId(pressedKeys.join(COMBINATION_DELIMETER));
      const pressedFormattedKeys = pressedId.split(COMBINATION_DELIMETER);
      const hotkeyData = this.hotkeyMap[pressedId];
      const hotkeyControlModData = pressedFormattedKeys.includes("control") && this.hotkeyMap[pressedId.replace("control", "mod")];
      const hotkeyMetaModData = pressedFormattedKeys.includes("meta") && this.hotkeyMap[pressedId.replace("meta", "mod")];
      [hotkeyData, hotkeyControlModData, hotkeyMetaModData].forEach((hotkeyData2) => {
        if (!hotkeyData2)
          return;
        if (hotkeyData2 == null ? void 0 : hotkeyData2.size) {
          hotkeyData2.forEach((data) => {
            var _a;
            if (((_a = data.ref) == null ? void 0 : _a.current) && !(e.target === data.ref.current || data.ref.current.contains(e.target))) {
              return;
            }
            const resolvedEvent = pressedMap2[pressedId];
            if (data.options.preventDefault) {
              resolvedEvent == null ? void 0 : resolvedEvent.preventDefault();
              e.preventDefault();
            }
            data.callback(resolvedEvent);
          });
        }
      });
    });
  }
};
var globalHotkeyStore = new HotkeyStore();
var HotkeyContext = import_react16.default.createContext({});
var SingletonHotkeysProvider = (props) => {
  const { children } = props;
  const [_, setTriggerCount] = import_react16.default.useState(0);
  const [hooksCount, setHooksCount] = import_react16.default.useState(0);
  const addPressedKey = import_react16.default.useCallback((e) => {
    if (e.repeat || hooksCount === 0)
      return;
    const eventKey = getEventKey(e);
    if (!eventKey)
      return;
    pressedMap[eventKey] = e;
    setTriggerCount(Object.keys(pressedMap).length);
    if (e.metaKey)
      modifiedKeys.push(...Object.keys(pressedMap));
    if (pressedMap.Meta)
      modifiedKeys.push(eventKey);
  }, [hooksCount]);
  const removePressedKey = import_react16.default.useCallback((e) => {
    if (hooksCount === 0)
      return;
    const eventKey = getEventKey(e);
    if (!eventKey)
      return;
    delete pressedMap[eventKey];
    if (eventKey === "meta" || eventKey === "control") {
      delete pressedMap.mod;
    }
    if (eventKey === "meta") {
      modifiedKeys.forEach((key) => {
        if (!pressedMap[key])
          return;
        delete pressedMap[key];
      });
      modifiedKeys = [];
    }
    setTriggerCount(Object.keys(pressedMap).length);
  }, [hooksCount]);
  const isPressed = (hotkey) => {
    const keys = formatHotkey(hotkey).split(COMBINATION_DELIMETER);
    if (keys.some((key) => !pressedMap[key]))
      return false;
    return true;
  };
  const addHotkeys = import_react16.default.useCallback((hotkeys, ref, options = {}) => {
    setHooksCount((prev) => prev + 1);
    globalHotkeyStore.bindHotkeys(hotkeys, ref, options);
    return () => {
      setHooksCount((prev) => prev - 1);
      globalHotkeyStore.unbindHotkeys(hotkeys);
    };
  }, []);
  const handleWindowKeyDown = import_react16.default.useCallback((e) => {
    if (!e.key)
      return;
    addPressedKey(e);
    globalHotkeyStore.handleKeyDown(pressedMap, e);
  }, [addPressedKey]);
  const handleWindowKeyUp = import_react16.default.useCallback((e) => {
    if (!e.key)
      return;
    removePressedKey(e);
  }, [removePressedKey]);
  import_react16.default.useEffect(() => {
    window.addEventListener("keydown", handleWindowKeyDown);
    window.addEventListener("keyup", handleWindowKeyUp);
    return () => {
      window.removeEventListener("keydown", handleWindowKeyDown);
      window.removeEventListener("keyup", handleWindowKeyUp);
    };
  }, [handleWindowKeyDown, handleWindowKeyUp]);
  return (0, import_jsx_runtime23.jsx)(HotkeyContext.Provider, { value: { addHotkeys, isPressed }, children });
};
var useSingletonHotkeys = () => import_react16.default.useContext(HotkeyContext);
var useSingletonHotkeys_default = useSingletonHotkeys;

// node_modules/reshaped/dist/hooks/useHotkeys.js
var useHotkeys = (hotkeys, deps = [], options) => {
  const { addHotkeys, isPressed } = useSingletonHotkeys_default();
  const generatedRef = import_react17.default.useRef(null);
  const elementRef = (options == null ? void 0 : options.ref) || generatedRef;
  import_react17.default.useEffect(() => {
    if (options == null ? void 0 : options.disabled)
      return;
    const remove = addHotkeys(hotkeys, elementRef, { preventDefault: options == null ? void 0 : options.preventDefault });
    return () => remove == null ? void 0 : remove();
  }, [
    addHotkeys,
    // eslint-disable-next-line react-hooks/exhaustive-deps
    Object.keys(hotkeys).join(","),
    options == null ? void 0 : options.disabled,
    options == null ? void 0 : options.preventDefault,
    // eslint-disable-next-line react-hooks/exhaustive-deps
    ...deps
  ]);
  return { ref: elementRef, checkHotkeyState: isPressed };
};
var useHotkeys_default = useHotkeys;

// node_modules/reshaped/dist/hooks/useHandlerRef.js
var import_react18 = __toESM(require_react());
var useHandlerRef = (cb) => {
  const ref = import_react18.default.useRef(cb);
  useIsomorphicLayoutEffect_default(() => {
    ref.current = cb;
  });
  return ref;
};
var useHandlerRef_default = useHandlerRef;

// node_modules/reshaped/dist/hooks/_private/useOnClickOutside.js
var import_react19 = __toESM(require_react());
var useOnClickOutside = (refs, handler) => {
  const handlerRef = useHandlerRef_default(handler);
  import_react19.default.useEffect(() => {
    if (!handlerRef.current)
      return;
    const handleClick = (event) => {
      var _a;
      let isInside = false;
      refs.forEach((elRef) => {
        if (!elRef.current || elRef.current === event.target || elRef.current.contains(event.target)) {
          isInside = true;
        }
      });
      if (isInside)
        return;
      (_a = handlerRef.current) == null ? void 0 : _a.call(handlerRef, event);
    };
    document.addEventListener("mousedown", handleClick);
    document.addEventListener("touchstart", handleClick);
    return () => {
      document.removeEventListener("mousedown", handleClick);
      document.removeEventListener("touchstart", handleClick);
    };
  }, [handlerRef, ...refs]);
};
var useOnClickOutside_default = useOnClickOutside;

// node_modules/reshaped/dist/hooks/useRTL.js
var import_react21 = __toESM(require_react());

// node_modules/reshaped/dist/hooks/_private/useSingletonEnvironment.js
var import_react20 = __toESM(require_react());
var SingletonEnvironmentContext = import_react20.default.createContext({
  rtl: [false, () => {
  }],
  defaultViewport: "s"
});
var useSingletonRTL = (defaultRTL) => {
  const state = import_react20.default.useState(defaultRTL || false);
  const [isRTL, setRTL] = state;
  useIsomorphicLayoutEffect_default(() => {
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.attributeName !== "dir")
          return;
        const nextRTL = mutation.target.dir === "rtl";
        if (isRTL !== nextRTL)
          setRTL(nextRTL);
      });
    });
    observer.observe(document.documentElement, { attributes: true });
    return () => observer.disconnect();
  }, [isRTL]);
  useIsomorphicLayoutEffect_default(() => {
    document.documentElement.setAttribute("dir", isRTL ? "rtl" : "ltr");
  }, [isRTL]);
  return state;
};

// node_modules/reshaped/dist/hooks/useRTL.js
var useRTL = () => {
  return import_react21.default.useContext(SingletonEnvironmentContext).rtl;
};
var useRTL_default = useRTL;

// node_modules/reshaped/dist/components/_private/Flyout/useFlyout.js
var import_react22 = __toESM(require_react());

// node_modules/reshaped/dist/utilities/dom.js
var getClosestFlyoutTarget = (el) => {
  const style = el && window.getComputedStyle(el);
  const overflowY = style == null ? void 0 : style.overflowY;
  const position = style == null ? void 0 : style.position;
  const isScrollable = overflowY == null ? void 0 : overflowY.includes("scroll");
  const isFixed = position === "fixed" || position === "sticky";
  if (el === document.body || !el)
    return document.body;
  if (isScrollable && el.scrollHeight > el.clientHeight || isFixed)
    return el;
  return getClosestFlyoutTarget(el.parentElement);
};
var disableUserSelect = () => {
  document.body.style.userSelect = "none";
};
var enableUserSelect = () => {
  document.body.style.userSelect = "";
};
var preventDefault = (e) => e.preventDefault();
var disableScroll = () => {
  window.addEventListener("wheel", preventDefault, { passive: false });
  window.addEventListener("touchmove", preventDefault, { passive: false });
};
var enableScroll = () => {
  window.removeEventListener("wheel", preventDefault);
  window.removeEventListener("touchmove", preventDefault);
};

// node_modules/reshaped/dist/components/_private/Flyout/utilities/calculatePosition.js
var SCREEN_OFFSET = 16;
var getRTLPosition = (position) => {
  if (position.includes("start"))
    return position.replace("start", "end");
  if (position.includes("end"))
    return position.replace("end", "start");
  return position;
};
var centerBySize = (originSize, targetSize) => {
  return Math.floor(originSize / 2 - targetSize / 2);
};
var calculatePosition = (args) => {
  const { triggerBounds, flyoutBounds, scopeOffset, position: passedPosition, rtl, width } = args;
  let left = 0;
  let top = 0;
  let position = passedPosition;
  if (rtl)
    position = getRTLPosition(position);
  if (width === "full" || width === "trigger") {
    position = position.includes("top") ? "top" : "bottom";
  }
  switch (position) {
    case "bottom":
    case "top":
      left = centerBySize(triggerBounds.width, flyoutBounds.width) + triggerBounds.left;
      break;
    case "start":
    case "start-top":
    case "start-bottom":
      left = triggerBounds.left - flyoutBounds.width;
      break;
    case "end":
    case "end-top":
    case "end-bottom":
      left = triggerBounds.right;
      break;
    case "top-start":
    case "bottom-start":
      left = triggerBounds.left;
      break;
    case "top-end":
    case "bottom-end":
      left = triggerBounds.right - flyoutBounds.width;
      break;
    default:
      break;
  }
  switch (position) {
    case "top":
    case "top-start":
    case "top-end":
      top = triggerBounds.top - flyoutBounds.height;
      break;
    case "bottom":
    case "bottom-start":
    case "bottom-end":
      top = triggerBounds.bottom;
      break;
    case "start":
    case "end":
      top = centerBySize(triggerBounds.height, flyoutBounds.height) + triggerBounds.top;
      break;
    case "start-top":
    case "end-top":
      top = triggerBounds.top;
      break;
    case "start-bottom":
    case "end-bottom":
      top = triggerBounds.bottom - flyoutBounds.height;
      break;
    default:
      break;
  }
  if (top === void 0 || left === void 0) {
    throw Error(`[Reshaped, flyout]: ${position} position is not valid`);
  }
  top = Math.round(top + (window.scrollY || 0) - scopeOffset.top);
  left = Math.round(left + (window.scrollX || 0) - scopeOffset.left);
  let widthStyle = Math.ceil(flyoutBounds.width);
  const height = Math.ceil(flyoutBounds.height);
  if (width === "full") {
    left = SCREEN_OFFSET;
    widthStyle = window.innerWidth - SCREEN_OFFSET * 2;
  } else if (width === "trigger") {
    widthStyle = triggerBounds.width;
  }
  const styles = { left, top, width: widthStyle, height };
  return { styles, position, scopeOffset };
};
var calculatePosition_default = calculatePosition;

// node_modules/reshaped/dist/components/_private/Flyout/useFlyout.js
var topPos = ["top-start", "top", "top-end"];
var bottomPos = ["bottom-start", "bottom", "bottom-end"];
var startPos = ["start", "start-bottom", "start-top"];
var endPos = ["end", "end-bottom", "end-top"];
var order = {
  top: [...topPos, ...bottomPos, ...endPos, ...startPos],
  bottom: [...bottomPos, ...topPos, ...endPos, ...startPos],
  start: [...startPos, ...endPos, ...topPos, ...bottomPos],
  end: [...endPos, ...startPos, ...topPos, ...bottomPos]
};
var getPositionOrder = (position) => {
  const types = ["top", "bottom", "start", "end"];
  const type = types.find((type2) => position.startsWith(type2)) || "bottom";
  return order[type];
};
var fullyVisible = (args) => {
  const { styles, scopeOffset } = args;
  const htmlEl = document.documentElement;
  const pageLeft = htmlEl.scrollLeft;
  const pageRight = pageLeft + htmlEl.clientWidth;
  const pageTop = htmlEl.scrollTop;
  const pageBottom = pageTop + htmlEl.clientHeight;
  return styles.left + scopeOffset.left >= pageLeft && styles.left + styles.width + scopeOffset.left <= pageRight && styles.top + scopeOffset.top >= pageTop && styles.top + styles.height + scopeOffset.top <= pageBottom;
};
var defaultStyles = {
  left: 0,
  top: 0,
  width: "auto",
  height: "auto",
  // z-index doesn't accept strings
  zIndex: "var(--rs-z-index-flyout)"
};
var resetStyles = {
  left: 0,
  top: 0,
  position: "fixed",
  // opacity: 0,
  visibility: "hidden",
  animation: "none",
  transition: "none",
  zIndex: "var(--rs-z-index-tooltip)"
};
var flyout = (args) => {
  const { triggerEl, flyoutEl, triggerBounds: passedTriggerBounds, ...options } = args;
  const { position, forcePosition, width, container } = options;
  const targetClone = flyoutEl.cloneNode(true);
  const triggerBounds = passedTriggerBounds || triggerEl.getBoundingClientRect();
  targetClone.style = "";
  Object.keys(resetStyles).forEach((key) => {
    const value = resetStyles[key];
    targetClone.style[key] = value.toString();
  });
  if (width) {
    if (width === "trigger") {
      targetClone.style.width = `${triggerBounds.width}px`;
    } else if (width !== "full") {
      targetClone.style.width = width;
    }
  }
  const rootNode = triggerEl == null ? void 0 : triggerEl.getRootNode();
  const shadowRoot = rootNode instanceof ShadowRoot ? rootNode : null;
  (shadowRoot || document.body).appendChild(targetClone);
  const flyoutBounds = targetClone.getBoundingClientRect();
  const containerParent = container || getClosestFlyoutTarget(triggerEl);
  const containerBounds = containerParent.getBoundingClientRect();
  const scopeOffset = {
    top: containerBounds.top + document.documentElement.scrollTop - containerParent.scrollTop,
    left: containerBounds.left + document.documentElement.scrollLeft - containerParent.scrollLeft
  };
  let calculated = calculatePosition_default({ triggerBounds, flyoutBounds, scopeOffset, ...options });
  if (!fullyVisible(calculated) && !forcePosition) {
    const order2 = getPositionOrder(position);
    const mobileOrder = order2.filter((position2) => position2 === "top" || position2 === "bottom");
    const test = (testOrder, extraOptions = {}) => {
      const { fullWidth } = extraOptions;
      testOrder.some((currentPosition) => {
        const calculateOptions = {
          ...options,
          width: fullWidth ? "full" : options.width,
          position: currentPosition
        };
        const tested = calculatePosition_default({
          triggerBounds,
          flyoutBounds,
          scopeOffset,
          ...calculateOptions
        });
        if (fullyVisible(tested)) {
          calculated = tested;
          return true;
        }
        return false;
      });
    };
    test(order2);
    if (!fullyVisible(calculated)) {
      test(mobileOrder, { fullWidth: true });
    }
  }
  targetClone.parentNode.removeChild(targetClone);
  return calculated;
};
var flyoutReducer = (state, action) => {
  switch (action.type) {
    case "render":
      if (state.status !== "idle")
        return state;
      return { ...state, status: "rendered", styles: { pointerEvents: "none", ...resetStyles } };
    case "position":
      if (!action.payload.sync && state.status !== "rendered")
        return state;
      if (action.payload.sync && state.status !== "visible")
        return state;
      return {
        ...state,
        status: action.payload.sync ? "visible" : "positioned",
        position: action.payload.position,
        styles: { ...defaultStyles, ...action.payload.styles }
      };
    case "show":
      if (state.status !== "positioned")
        return state;
      return { ...state, status: "visible" };
    case "hide":
      if (state.status !== "visible")
        return state;
      return { ...state, status: "hidden" };
    case "remove":
      if (state.status !== "hidden" && state.status !== "visible")
        return state;
      return { ...state, status: "idle", styles: resetStyles };
    default:
      throw new Error("Invalid reducer type");
  }
};
var useFlyout = (args) => {
  const { triggerElRef, flyoutElRef, triggerBoundsRef, ...options } = args;
  const { position: defaultPosition = "bottom", forcePosition, width, container } = options;
  const [isRTL] = useRTL_default();
  const [state, dispatch] = import_react22.default.useReducer(flyoutReducer, {
    position: defaultPosition,
    styles: defaultStyles,
    status: "idle"
  });
  const render = import_react22.default.useCallback(() => {
    dispatch({ type: "render" });
  }, []);
  const show = import_react22.default.useCallback(() => {
    dispatch({ type: "show" });
  }, []);
  const hide = import_react22.default.useCallback(() => {
    dispatch({ type: "hide" });
  }, []);
  const remove = import_react22.default.useCallback(() => {
    dispatch({ type: "remove" });
  }, []);
  const updatePosition = import_react22.default.useCallback((options2) => {
    if (!triggerElRef.current || !flyoutElRef.current)
      return;
    const nextFlyoutData = flyout({
      triggerEl: triggerElRef.current,
      flyoutEl: flyoutElRef.current,
      triggerBounds: triggerBoundsRef.current,
      width,
      position: defaultPosition,
      forcePosition,
      rtl: isRTL,
      container
    });
    if (nextFlyoutData)
      dispatch({ type: "position", payload: { ...nextFlyoutData, sync: options2 == null ? void 0 : options2.sync } });
  }, [
    container,
    defaultPosition,
    forcePosition,
    isRTL,
    flyoutElRef,
    triggerElRef,
    triggerBoundsRef,
    width
  ]);
  import_react22.default.useEffect(() => {
    if (state.status === "rendered")
      updatePosition();
  }, [state.status, updatePosition]);
  return import_react22.default.useMemo(() => ({
    position: state.position,
    styles: state.styles,
    status: state.status,
    updatePosition,
    render,
    hide,
    remove,
    show
  }), [render, updatePosition, hide, remove, show, state.position, state.styles, state.status]);
};
var useFlyout_default = useFlyout;

// node_modules/reshaped/dist/components/_private/Flyout/Flyout.constants.js
var mouseEnter = 800;
var mouseEnterShort = 100;
var mouseLeave = 150;

// node_modules/reshaped/dist/components/_private/Flyout/utilities/cooldown.js
var Cooldown = class {
  constructor() {
    __publicField(this, "status", "cold");
    __publicField(this, "timer");
    __publicField(this, "warm", () => {
      clearTimeout(this.timer);
      this.status = "warm";
    });
    __publicField(this, "cool", () => {
      this.status = "cooling";
      const currentTimer = setTimeout(() => {
        this.status = "cold";
        if (currentTimer === this.timer)
          this.timer = void 0;
      }, 500);
      this.timer = currentTimer;
    });
  }
};
var cooldown_default = new Cooldown();

// node_modules/reshaped/dist/components/_private/Flyout/Flyout.context.js
var import_react23 = __toESM(require_react());
var FlyoutContext = import_react23.default.createContext({});
var FlyoutTriggerContext = import_react23.default.createContext({});
var FlyoutContentContext = import_react23.default.createContext(false);
var useFlyoutContext = () => import_react23.default.useContext(FlyoutContext);
var useFlyoutTriggerContext = () => import_react23.default.useContext(FlyoutTriggerContext);
var useFlyoutContentContext = () => import_react23.default.useContext(FlyoutContentContext);
var Provider2 = FlyoutContext.Provider;
var TriggerProvider = FlyoutTriggerContext.Provider;
var ContentProvider = FlyoutContentContext.Provider;

// node_modules/reshaped/dist/components/_private/Flyout/FlyoutControlled.js
var FlyoutRoot = (props) => {
  const { triggerType = "click", onOpen, onClose, children, disabled, forcePosition, trapFocusMode, width, disableHideAnimation, disableContentHover, disableCloseOnOutsideClick, contentGap, contentClassName, contentAttributes, position: passedPosition, active: passedActive, id: passedId, instanceRef, containerRef } = props;
  const onOpenRef = useHandlerRef_default(onOpen);
  const onCloseRef = useHandlerRef_default(onClose);
  const resolvedActive = disabled === true ? false : passedActive;
  const parentFlyoutContext = useFlyoutContext();
  const parentFlyoutTriggerContext = useFlyoutTriggerContext();
  const parentFlyoutContentContext = useFlyoutContentContext();
  const isSubmenu = parentFlyoutContext.trapFocusMode === "action-menu" || parentFlyoutContext.trapFocusMode === "content-menu";
  const [isRTL] = useRTL_default();
  const internalTriggerElRef = import_react24.default.useRef(null);
  const triggerElRef = !parentFlyoutContentContext && (parentFlyoutTriggerContext == null ? void 0 : parentFlyoutTriggerContext.triggerElRef) || internalTriggerElRef;
  const triggerBoundsRef = import_react24.default.useRef();
  const flyoutElRef = import_react24.default.useRef(null);
  const id = useElementId_default(passedId);
  const timerRef = import_react24.default.useRef();
  const trapFocusRef = import_react24.default.useRef(null);
  const lockedRef = import_react24.default.useRef(false);
  const transitionStartedRef = import_react24.default.useRef(false);
  const lockedBlurEffects = import_react24.default.useRef(false);
  const shouldReturnFocusRef = import_react24.default.useRef(true);
  const hoverTriggeredWithTouchEventRef = import_react24.default.useRef(false);
  const flyout2 = useFlyout_default({
    triggerElRef,
    flyoutElRef,
    triggerBoundsRef,
    width,
    position: passedPosition,
    defaultActive: resolvedActive,
    container: containerRef == null ? void 0 : containerRef.current,
    forcePosition
  });
  const { status, updatePosition, render, hide, remove, show } = flyout2;
  const isDismissible = useIsDismissible_default(triggerType !== "hover" && status !== "idle", flyoutElRef, triggerElRef);
  const clearTimer = import_react24.default.useCallback(() => {
    if (timerRef.current)
      clearTimeout(timerRef.current);
  }, [timerRef]);
  const handleOpen = import_react24.default.useCallback(() => {
    var _a;
    const canOpen = !lockedRef.current && status === "idle";
    if (!canOpen)
      return;
    (_a = onOpenRef.current) == null ? void 0 : _a.call(onOpenRef);
  }, [status, onOpenRef]);
  const handleClose = import_react24.default.useCallback((options) => {
    var _a, _b;
    const isLocked = triggerType === "click" && !isDismissible();
    const canClose = !isLocked && (status !== "idle" || disabled);
    if (!canClose)
      return;
    (_a = onCloseRef.current) == null ? void 0 : _a.call(onCloseRef);
    if (options == null ? void 0 : options.closeParents)
      (_b = parentFlyoutContext == null ? void 0 : parentFlyoutContext.handleClose) == null ? void 0 : _b.call(parentFlyoutContext);
  }, [status, isDismissible, triggerType, onCloseRef, disabled, parentFlyoutContext]);
  const handleBlur = import_react24.default.useCallback((e) => {
    var _a;
    if (!checkKeyboardMode())
      return;
    const focusedContent = (_a = flyoutElRef.current) == null ? void 0 : _a.contains(e.relatedTarget);
    if (
      // Empty flyouts don't move the focus so they have to be closed on blur
      focusedContent || // Prevent from closing in case user interacts with items inside content
      lockedBlurEffects.current
    ) {
      return;
    }
    handleClose();
  }, [handleClose]);
  const handleFocus = import_react24.default.useCallback(() => {
    if (triggerType === "hover" && !checkKeyboardMode())
      return;
    handleOpen();
  }, [handleOpen, triggerType]);
  const handleTouchStart = import_react24.default.useCallback(() => {
    if (triggerType !== "hover")
      return;
    hoverTriggeredWithTouchEventRef.current = true;
  }, [triggerType]);
  const handleMouseEnter = import_react24.default.useCallback(() => {
    clearTimer();
    if (hoverTriggeredWithTouchEventRef.current) {
      handleOpen();
      hoverTriggeredWithTouchEventRef.current = false;
    } else {
      timerRef.current = setTimeout(handleOpen, cooldown_default.timer || isSubmenu ? mouseEnterShort : mouseEnter);
      if (!isSubmenu && triggerType === "hover")
        cooldown_default.warm();
    }
  }, [clearTimer, timerRef, handleOpen, isSubmenu, triggerType]);
  const handleMouseLeave = import_react24.default.useCallback(() => {
    cooldown_default.cool();
    clearTimer();
    timerRef.current = setTimeout(() => handleClose(), mouseLeave);
  }, [clearTimer, timerRef, handleClose]);
  const handleTriggerClick = import_react24.default.useCallback(() => {
    if (status === "idle") {
      handleOpen();
    } else {
      handleClose();
    }
  }, [status, handleOpen, handleClose]);
  const handleTriggerMouseDown = import_react24.default.useCallback(() => {
    var _a;
    const rect = (_a = triggerElRef.current) == null ? void 0 : _a.getBoundingClientRect();
    triggerBoundsRef.current = rect;
  }, [triggerElRef]);
  const handleContentMouseDown = () => {
    lockedBlurEffects.current = true;
    hoverTriggeredWithTouchEventRef.current = true;
  };
  const handleContentMouseUp = () => {
    lockedBlurEffects.current = false;
  };
  const handleTransitionStart = import_react24.default.useCallback((e) => {
    if (!resolvedActive)
      return;
    if (flyoutElRef.current !== e.currentTarget || e.propertyName !== "transform")
      return;
    transitionStartedRef.current = true;
  }, [resolvedActive]);
  const handleTransitionEnd = import_react24.default.useCallback((e) => {
    if (flyoutElRef.current !== e.currentTarget || e.propertyName !== "transform")
      return;
    if (status === "hidden") {
      transitionStartedRef.current = false;
      remove();
    }
  }, [remove, status]);
  useIsomorphicLayoutEffect_default(() => {
    if (resolvedActive) {
      render();
      return;
    }
    if (disabled)
      cooldown_default.cool();
    if (checkTransitions() && !disableHideAnimation && transitionStartedRef.current && (cooldown_default.status !== "warm" || triggerType !== "hover")) {
      hide();
    } else {
      remove();
    }
  }, [resolvedActive, render, hide, remove, disableHideAnimation, disabled]);
  import_react24.default.useEffect(() => {
    if (status === "positioned")
      onNextFrame(() => show());
  }, [status, show]);
  useIsomorphicLayoutEffect_default(() => {
    var _a;
    if (status !== "visible" || !flyoutElRef.current)
      return;
    if ((_a = trapFocusRef.current) == null ? void 0 : _a.trapped)
      return;
    trapFocusRef.current = new TrapFocus_default(flyoutElRef.current);
    trapFocusRef.current.trap({
      mode: trapFocusMode,
      includeTrigger: triggerType === "hover" && trapFocusMode !== "dialog" && !isSubmenu,
      onNavigateOutside: () => {
        handleClose();
      }
    });
  }, [status, triggerType, trapFocusMode]);
  import_react24.default.useEffect(() => {
    var _a;
    if (!disableHideAnimation && status !== "hidden")
      return;
    if (disableHideAnimation && status !== "idle")
      return;
    if ((_a = trapFocusRef.current) == null ? void 0 : _a.trapped) {
      if (triggerType === "hover") {
        lockedRef.current = true;
        setTimeout(() => {
          lockedRef.current = false;
        }, 100);
      }
      trapFocusRef.current.release({ withoutFocusReturn: !shouldReturnFocusRef.current });
      shouldReturnFocusRef.current = true;
    }
  }, [status, triggerType, disableHideAnimation]);
  import_react24.default.useEffect(() => {
    return () => {
      var _a;
      return (_a = trapFocusRef.current) == null ? void 0 : _a.release();
    };
  }, []);
  import_react24.default.useEffect(() => {
    const resizeObserver = new ResizeObserver(() => updatePosition({ sync: true }));
    resizeObserver.observe(document.body);
    if (triggerElRef.current)
      resizeObserver.observe(triggerElRef.current);
    return () => resizeObserver.disconnect();
  }, [updatePosition, triggerElRef]);
  import_react24.default.useEffect(() => {
    updatePosition();
  }, [isRTL, updatePosition]);
  import_react24.default.useImperativeHandle(instanceRef, () => ({
    open: handleOpen,
    close: handleClose,
    updatePosition: () => updatePosition({ sync: true })
  }), [handleOpen, handleClose, updatePosition]);
  useHotkeys_default({ Escape: () => handleClose() }, [handleClose]);
  useOnClickOutside_default([flyoutElRef, triggerElRef], () => {
    if (disableCloseOnOutsideClick)
      return;
    shouldReturnFocusRef.current = false;
    handleClose();
  });
  return (0, import_jsx_runtime24.jsx)(Provider2, { value: {
    id,
    flyout: flyout2,
    width,
    triggerElRef,
    flyoutElRef,
    handleClose,
    handleOpen,
    handleFocus,
    handleBlur,
    handleMouseEnter,
    handleMouseLeave,
    handleTouchStart,
    handleTransitionStart,
    handleTransitionEnd,
    handleMouseDown: handleTriggerMouseDown,
    handleClick: handleTriggerClick,
    handleContentMouseDown,
    handleContentMouseUp,
    triggerType,
    trapFocusMode,
    contentGap,
    contentClassName,
    contentAttributes,
    containerRef,
    disableContentHover,
    isSubmenu
  }, children });
};
var FlyoutControlled_default = FlyoutRoot;

// node_modules/reshaped/dist/components/_private/Flyout/FlyoutUncontrolled.js
var FlyoutUncontrolled = (props) => {
  const { defaultActive, onClose, onOpen } = props;
  const [active, setActive] = import_react25.default.useState(defaultActive || false);
  const handleClose = () => {
    setActive(false);
    if (onClose)
      onClose();
  };
  const handleOpen = () => {
    setActive(true);
    if (onOpen)
      onOpen();
  };
  return (0, import_jsx_runtime25.jsx)(FlyoutControlled_default, { ...props, defaultActive: void 0, active, onClose: handleClose, onOpen: handleOpen });
};
var FlyoutUncontrolled_default = FlyoutUncontrolled;

// node_modules/reshaped/dist/components/_private/Flyout/FlyoutTrigger.js
var import_jsx_runtime26 = __toESM(require_jsx_runtime());
var FlyoutTrigger = (props) => {
  const { children } = props;
  const { id, triggerElRef, triggerType, flyout: flyout2, handleFocus, handleBlur, handleMouseEnter, handleMouseLeave, handleMouseDown, handleTouchStart, handleClick, trapFocusMode, isSubmenu } = useFlyoutContext();
  let childrenAttributes = {
    ref: triggerElRef
  };
  if (triggerType === "click" || trapFocusMode === "action-menu") {
    childrenAttributes.onClick = handleClick;
    childrenAttributes.onMouseDown = handleMouseDown;
  }
  if (triggerType === "hover") {
    childrenAttributes.onMouseEnter = handleMouseEnter;
    childrenAttributes.onMouseLeave = handleMouseLeave;
    childrenAttributes.onTouchStart = handleTouchStart;
  }
  if (triggerType === "hover" && !isSubmenu || triggerType === "focus") {
    childrenAttributes.onFocus = handleFocus;
    childrenAttributes.onBlur = handleBlur;
    childrenAttributes["aria-describedby"] = id;
  }
  if (triggerType === "click" || triggerType === "focus" || trapFocusMode === "action-menu") {
    if (trapFocusMode === "dialog") {
      childrenAttributes["aria-haspopup"] = "dialog";
    } else if (trapFocusMode === "selection-menu") {
      childrenAttributes["aria-haspopup"] = "listbox";
      childrenAttributes["aria-autocomplete"] = "list";
    } else {
      childrenAttributes["aria-haspopup"] = "menu";
    }
    childrenAttributes["aria-expanded"] = flyout2.status !== "idle";
    childrenAttributes["aria-controls"] = flyout2.status !== "idle" ? id : void 0;
  }
  return (0, import_jsx_runtime26.jsx)(TriggerProvider, { value: { triggerElRef }, children: children(childrenAttributes) });
};
var FlyoutTrigger_default = FlyoutTrigger;

// node_modules/reshaped/dist/components/_private/Flyout/FlyoutContent.js
var import_jsx_runtime30 = __toESM(require_jsx_runtime());
var import_react31 = __toESM(require_react());

// node_modules/reshaped/dist/components/_private/Portal/Portal.js
var import_jsx_runtime29 = __toESM(require_jsx_runtime());
var import_react30 = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());

// node_modules/reshaped/dist/components/Theme/Theme.js
var import_jsx_runtime27 = __toESM(require_jsx_runtime());
var import_react28 = __toESM(require_react());

// node_modules/reshaped/dist/components/Theme/Theme.context.js
var import_react26 = __toESM(require_react());
var ThemeContext = import_react26.default.createContext({
  theme: "",
  rootTheme: "",
  colorMode: "light",
  setTheme: () => {
  },
  setRootTheme: () => {
  }
});
var GlobalColorModeContext = import_react26.default.createContext({
  mode: "light",
  setMode: () => {
  },
  invertMode: () => {
  }
});

// node_modules/reshaped/dist/components/Theme/Theme.utilities.js
var getRootThemeEl = () => document.querySelector("[data-rs-root]") || document.documentElement;

// node_modules/reshaped/dist/components/Theme/useTheme.js
var import_react27 = __toESM(require_react());
var useGlobalColorMode = () => {
  const { mode } = import_react27.default.useContext(GlobalColorModeContext);
  return mode;
};
var useTheme = () => {
  const { colorMode, theme, setTheme, rootTheme, setRootTheme } = import_react27.default.useContext(ThemeContext);
  const { mode, setMode, invertMode } = import_react27.default.useContext(GlobalColorModeContext);
  return import_react27.default.useMemo(() => ({
    theme,
    setTheme,
    rootTheme,
    setRootTheme,
    colorMode: colorMode || mode,
    setColorMode: setMode,
    invertColorMode: invertMode
  }), [colorMode, mode, setMode, invertMode, theme, setTheme, setRootTheme, rootTheme]);
};

// node_modules/reshaped/dist/components/Theme/Theme.js
import s28 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Theme/Theme.module.css";
var Theme = (props) => (0, import_jsx_runtime27.jsx)(PrivateTheme, { ...props });
var PrivateTheme = (props) => {
  const { name, defaultName, colorMode, scoped, children, className } = props;
  const [mounted, setMounted] = import_react28.default.useState(false);
  const [stateTheme, setStateTheme] = import_react28.default.useState(defaultName);
  const globalColorMode = useGlobalColorMode();
  const parentTheme = useTheme();
  const isRootProvider = !parentTheme.theme;
  const usedTheme = name || stateTheme || parentTheme.theme;
  const rootTheme = isRootProvider ? usedTheme : parentTheme.rootTheme;
  const parentColorMode = isRootProvider ? globalColorMode : parentTheme.colorMode;
  const invertedColorMode = parentColorMode === "light" ? "dark" : "light";
  const usedColorMode = colorMode === "inverted" ? invertedColorMode : colorMode || parentColorMode;
  const rootClassNames = classNames(s28.root, className);
  const setRootTheme = import_react28.default.useCallback((theme) => {
    if (isRootProvider) {
      setStateTheme(theme);
    } else {
      parentTheme.setRootTheme(theme);
    }
  }, [isRootProvider, parentTheme]);
  const setTheme = import_react28.default.useCallback((theme) => {
    setStateTheme(theme);
  }, []);
  useIsomorphicLayoutEffect_default(() => {
    setMounted(true);
  }, []);
  useIsomorphicLayoutEffect_default(() => {
    if (!document || !isRootProvider)
      return;
    const themeRootEl = getRootThemeEl();
    const hasColorModeApplied = themeRootEl.getAttribute("data-rs-color-mode");
    themeRootEl.setAttribute("data-rs-theme", usedTheme);
    if (!hasColorModeApplied)
      themeRootEl.setAttribute("data-rs-color-mode", usedColorMode);
    return () => {
      themeRootEl.removeAttribute("data-rs-theme");
      if (!hasColorModeApplied)
        themeRootEl.removeAttribute("data-rs-color-mode");
    };
  }, [usedTheme, usedColorMode, isRootProvider]);
  const value = import_react28.default.useMemo(() => ({
    theme: usedTheme,
    rootTheme,
    colorMode: usedColorMode,
    setTheme,
    setRootTheme
  }), [usedTheme, usedColorMode, setTheme, setRootTheme, rootTheme]);
  return (0, import_jsx_runtime27.jsx)(ThemeContext.Provider, { value, children: (0, import_jsx_runtime27.jsx)("div", { className: rootClassNames, "data-rs-root": scoped ? true : void 0, "data-rs-theme": isRootProvider ? void 0 : usedTheme, "data-rs-color-mode": isRootProvider || !colorMode && !mounted ? void 0 : usedColorMode, children }) });
};
var Theme_default = Theme;

// node_modules/reshaped/dist/components/Theme/GlobalColorMode.js
var import_jsx_runtime28 = __toESM(require_jsx_runtime());
var import_react29 = __toESM(require_react());
var GlobalColorMode = (props) => {
  const { defaultMode, children } = props;
  const [mode, setMode] = import_react29.default.useState(defaultMode || "light");
  const changeColorMode = import_react29.default.useCallback((targetMode) => {
    getRootThemeEl().setAttribute("data-rs-color-mode", targetMode);
    setMode((prevMode) => {
      if (prevMode !== targetMode) {
        disableTransitions();
      }
      return targetMode;
    });
  }, []);
  useIsomorphicLayoutEffect_default(() => {
    onNextFrame(() => {
      enableTransitions();
    });
  }, [mode]);
  useIsomorphicLayoutEffect_default(() => {
    const nextColorMode = getRootThemeEl().getAttribute("data-rs-color-mode");
    if (nextColorMode)
      changeColorMode(nextColorMode);
  }, []);
  const value = import_react29.default.useMemo(() => ({
    mode,
    setMode: changeColorMode,
    invertMode: () => {
      changeColorMode(mode === "light" ? "dark" : "light");
    }
  }), [mode, changeColorMode]);
  return (0, import_jsx_runtime28.jsx)(GlobalColorModeContext.Provider, { value, children });
};
var GlobalColorMode_default = GlobalColorMode;

// node_modules/reshaped/dist/components/_private/Portal/Portal.js
import s29 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/_private/Portal/Portal.module.css";
var PortalScopeContext = import_react30.default.createContext({});
var usePortalScope = () => {
  return import_react30.default.useContext(PortalScopeContext);
};
var Portal = (props) => {
  var _a;
  const { children, targetRef } = props;
  const rootRef = import_react30.default.useRef(null);
  const rootNode = (_a = rootRef.current) == null ? void 0 : _a.getRootNode();
  const isShadowDom = rootNode instanceof ShadowRoot;
  const defaultTargetEl = isShadowDom ? rootNode : document.body;
  const portal = usePortalScope();
  const nextScopeRef = targetRef || portal.scopeRef;
  const targetEl = (nextScopeRef == null ? void 0 : nextScopeRef.current) || defaultTargetEl;
  return (0, import_jsx_runtime29.jsxs)(import_jsx_runtime29.Fragment, { children: [import_react_dom.default.createPortal((0, import_jsx_runtime29.jsx)(Theme_default, { children }), targetEl), (0, import_jsx_runtime29.jsx)("div", { ref: rootRef, className: s29.root })] });
};
function PortalScope(props) {
  const { children } = props;
  const ref = import_react30.default.useRef(null);
  return (0, import_jsx_runtime29.jsx)(PortalScopeContext.Provider, { value: { scopeRef: ref }, children: children(ref) });
}
Portal.Scope = PortalScope;
var Portal_default = Portal;

// node_modules/reshaped/dist/components/_private/Flyout/FlyoutContent.js
import s30 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/_private/Flyout/Flyout.module.css";
var FlyoutContent = (props) => {
  const { children, className, attributes } = props;
  const { flyout: flyout2, id, flyoutElRef, triggerElRef, handleTransitionEnd, handleTransitionStart, triggerType, handleMouseEnter, handleMouseLeave, handleContentMouseDown, handleContentMouseUp, contentGap, contentClassName, contentAttributes, trapFocusMode, disableContentHover, width, containerRef, isSubmenu } = useFlyoutContext();
  const { styles, status, position } = flyout2;
  const [mounted, setMounted] = import_react31.default.useState(false);
  useIsomorphicLayoutEffect_default(() => {
    setMounted(true);
  }, []);
  import_react31.default.useEffect(() => {
    const el = flyoutElRef.current;
    if (!el)
      return;
    el.addEventListener("transitionstart", handleTransitionStart);
    return () => el.removeEventListener("transitionstart", handleTransitionStart);
  }, [handleTransitionStart, flyoutElRef, status]);
  if (status === "idle" || !mounted)
    return null;
  const contentClassNames = classNames(
    s30.content,
    status === "visible" && s30["--visible"],
    // animating only when we're opening the first flyout or closing the last flyout within the same cooldown
    // content is rendered only once flyout is already warm so checking for timer instead
    (cooldown_default.status === "cooling" || !cooldown_default.timer || isSubmenu || triggerType !== "hover") && s30["--animated"],
    position && s30[`--position-${position}`],
    width === "trigger" && s30["--width-trigger"],
    triggerType === "hover" && disableContentHover && s30["--hover-disabled"]
  );
  const innerClassNames = classNames(s30.inner, className, contentClassName);
  let role;
  if (triggerType === "hover") {
    role = "tooltip";
  } else if (trapFocusMode === "dialog") {
    role = "dialog";
  } else if (trapFocusMode === "selection-menu") {
    role = "listbox";
  } else if (trapFocusMode === "action-menu") {
    role = "menu";
  }
  const content = (0, import_jsx_runtime30.jsx)(ContentProvider, { value: true, children: (0, import_jsx_runtime30.jsx)("div", { className: contentClassNames, style: {
    ...styles,
    "--rs-flyout-gap": contentGap
  }, ref: flyoutElRef, onTransitionEnd: handleTransitionEnd, onMouseEnter: triggerType === "hover" ? handleMouseEnter : void 0, onMouseLeave: triggerType === "hover" ? handleMouseLeave : void 0, onMouseDown: handleContentMouseDown, onTouchStart: handleContentMouseDown, onMouseUp: handleContentMouseUp, onTouchEnd: handleContentMouseUp, children: (0, import_jsx_runtime30.jsx)("div", { role, ...attributes, id, "aria-modal": triggerType === "click", style: contentAttributes == null ? void 0 : contentAttributes.style, className: innerClassNames, children }) }) });
  const closestScrollable = getClosestFlyoutTarget(triggerElRef.current);
  const scrollableRef = closestScrollable === document.body ? void 0 : { current: closestScrollable };
  return (0, import_jsx_runtime30.jsx)(Portal_default, { targetRef: containerRef || scrollableRef, children: content });
};
var FlyoutContent_default = FlyoutContent;

// node_modules/reshaped/dist/components/_private/Flyout/Flyout.js
var Flyout = (props) => {
  const { active } = props;
  if (typeof active === "boolean")
    return (0, import_jsx_runtime31.jsx)(FlyoutControlled_default, { ...props });
  return (0, import_jsx_runtime31.jsx)(FlyoutUncontrolled_default, { ...props });
};
Flyout.Trigger = FlyoutTrigger_default;
Flyout.Content = FlyoutContent_default;
var Flyout_default = Flyout;

// node_modules/reshaped/dist/components/Dismissible/Dismissible.js
var import_jsx_runtime37 = __toESM(require_jsx_runtime());

// node_modules/reshaped/dist/components/Button/Button.js
var import_jsx_runtime35 = __toESM(require_jsx_runtime());
var import_react32 = __toESM(require_react());

// node_modules/reshaped/dist/components/Loader/Loader.js
var import_jsx_runtime32 = __toESM(require_jsx_runtime());
import s31 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Loader/Loader.module.css";
var Loader = (props) => {
  const { size = "small", color = "primary", className, attributes } = props;
  const ariaLabel = attributes == null ? void 0 : attributes["aria-label"];
  const rootClassNames = classNames(s31.root, className, responsiveClassNames(s31, "--size", size), color && s31[`--color-${color}`]);
  return (0, import_jsx_runtime32.jsx)("span", { ...attributes, role: "progressbar", "aria-live": ariaLabel ? "assertive" : void 0, "aria-label": ariaLabel, className: rootClassNames, children: (0, import_jsx_runtime32.jsx)("span", { className: s31.inner }) });
};
var Loader_default = Loader;

// node_modules/reshaped/dist/components/Button/ButtonGroup.js
var import_jsx_runtime33 = __toESM(require_jsx_runtime());
import s32 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Button/Button.module.css";
var ButtonGroup = (props) => {
  const { children, className, attributes } = props;
  const groupClassNames = classNames(s32.group, className);
  return (0, import_jsx_runtime33.jsx)("div", { ...attributes, className: groupClassNames, role: "group", children });
};
var ButtonGroup_default = ButtonGroup;

// node_modules/reshaped/dist/components/Button/ButtonAligner.js
var import_jsx_runtime34 = __toESM(require_jsx_runtime());
import s33 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Button/Button.module.css";
var ButtonAligner = (props) => {
  return (0, import_jsx_runtime34.jsx)(Aligner_default, { ...props, side: props.side || props.position, className: [s33.aligner, props.className] });
};
var ButtonAligner_default = ButtonAligner;

// node_modules/reshaped/dist/components/Button/Button.js
import s34 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Button/Button.module.css";
var Button = (0, import_react32.forwardRef)((props, ref) => {
  const { variant = "solid", color = "neutral", elevated, highlighted, fullWidth, loading, disabled, type, href, size = "medium", children, rounded, onClick, icon, endIcon, as, className, attributes } = props;
  const iconOnly = (icon || endIcon) && !children;
  const rootClassName = classNames(s34.root, className, color && s34[`--color-${color}`], variant && s34[`--variant-${variant}`], responsiveClassNames(s34, "--size", size), responsiveClassNames(s34, "--full-width", fullWidth), elevated && variant !== "ghost" && s34["--elevated"], rounded && s34["--rounded"], disabled && s34["--disabled"], loading && s34["--loading"], highlighted && s34["--highlighted"], iconOnly && s34["--icon-only"]);
  const renderIcon = (position) => {
    const isStartValid = position === "start" && icon;
    const isEndValid = position === "end" && endIcon;
    const isInvalid = !(isStartValid || isEndValid);
    if (isInvalid)
      return null;
    const iconClassName = classNames(s34.icon, position === "end" && s34["--icon-position-end"]);
    const iconSize = responsivePropDependency(size, (size2) => {
      if (size2 === "large")
        return 5;
      if (size2 === "xlarge")
        return 6;
      return 4;
    });
    return (0, import_jsx_runtime35.jsx)(Icon_default, { className: iconClassName, svg: position === "start" ? icon : endIcon, size: iconSize, autoWidth: true });
  };
  return (0, import_jsx_runtime35.jsxs)(Actionable_default, { disabled: disabled || loading, className: rootClassName, attributes: { ...attributes, "data-rs-aligner-target": true }, type, onClick, href, ref, as, children: [loading && (0, import_jsx_runtime35.jsx)("div", { className: s34.loader, children: (0, import_jsx_runtime35.jsx)(Loader_default, { size: "small", color: "inherit" }) }), renderIcon("start"), children && (0, import_jsx_runtime35.jsx)("span", { className: s34.text, children }), renderIcon("end")] });
});
Button.Group = ButtonGroup_default;
Button.Aligner = ButtonAligner_default;
var Button_default = Button;

// node_modules/reshaped/dist/icons/Close.js
var import_jsx_runtime36 = __toESM(require_jsx_runtime());
var IconClose = () => {
  return (0, import_jsx_runtime36.jsxs)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", strokeWidth: "2", stroke: "currentColor", strokeLinecap: "round", strokeLinejoin: "round", children: [(0, import_jsx_runtime36.jsx)("line", { x1: "18", y1: "6", x2: "6", y2: "18" }), (0, import_jsx_runtime36.jsx)("line", { x1: "6", y1: "6", x2: "18", y2: "18" })] });
};
var Close_default = IconClose;

// node_modules/reshaped/dist/components/Dismissible/Dismissible.js
import s35 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Dismissible/Dismissible.module.css";
var Dismissible = (props) => {
  const { children, align, onClose, hideCloseButton, variant, closeAriaLabel, className, attributes } = props;
  const rootClassNames = classNames(s35.root, className, variant && s35[`--variant-${variant}`], align && s35[`--align-${align}`], hideCloseButton && s35["--hide-close"]);
  const WrapperTag = variant === "media" ? "div" : Button_default.Aligner;
  return (0, import_jsx_runtime37.jsxs)("div", { ...attributes, className: rootClassNames, children: [children, !hideCloseButton && (0, import_jsx_runtime37.jsx)(WrapperTag, { className: s35.close, children: (0, import_jsx_runtime37.jsx)(Button_default, { size: "small", ...variant === "media" ? { color: "media", variant: "faded" } : { variant: "ghost" }, onClick: onClose, attributes: { "aria-label": onClose ? closeAriaLabel : void 0 }, icon: Close_default }) })] });
};
var Dismissible_default = Dismissible;

// node_modules/reshaped/dist/components/Popover/Popover.js
import s37 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Popover/Popover.module.css";

// node_modules/reshaped/dist/styles/padding/index.js
import s36 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/styles/padding/padding.module.css";
var getPaddingStyles = (value) => {
  if (!value)
    return null;
  const variables = responsiveVariables("--rs-p", value);
  return { classNames: s36.root, variables };
};
var padding_default = getPaddingStyles;

// node_modules/reshaped/dist/components/Popover/Popover.js
var Popover = (props) => {
  const { id, forcePosition, onOpen, onClose, active, defaultActive, children, width, contentGap, variant = "elevated", triggerType = "click", position = "bottom", disableHideAnimation, disableContentHover, disableCloseOnOutsideClick, instanceRef, containerRef } = props;
  const padding = props.padding ?? (variant === "headless" ? 0 : 4);
  const trapFocusMode = props.trapFocusMode || (triggerType === "hover" ? "content-menu" : void 0);
  const paddingStyles = padding_default(padding);
  const contentClassName = classNames(s37.content, !!width && s37["content--has-width"], variant && s37[`content--variant-${variant}`], paddingStyles == null ? void 0 : paddingStyles.classNames);
  return (
    // @ts-ignore
    (0, import_jsx_runtime38.jsx)(Flyout_default, { id, instanceRef, position, forcePosition, onOpen, onClose, trapFocusMode, triggerType, active, defaultActive, width, disableHideAnimation, disableContentHover, disableCloseOnOutsideClick, contentGap, containerRef, contentClassName, contentAttributes: { style: { ...paddingStyles == null ? void 0 : paddingStyles.variables } }, children })
  );
};
var PopoverDismissible = (props) => {
  const { handleClose } = useFlyoutContext();
  return (0, import_jsx_runtime38.jsx)(Dismissible_default, { ...props, onClose: handleClose });
};
Popover.Dismissible = PopoverDismissible;
Popover.Trigger = Flyout_default.Trigger;
Popover.Content = Flyout_default.Content;
var Popover_default = Popover;

// node_modules/reshaped/dist/components/MenuItem/MenuItem.js
var import_jsx_runtime40 = __toESM(require_jsx_runtime());
var import_react33 = __toESM(require_react());

// node_modules/reshaped/dist/components/MenuItem/MenuItemAligner.js
var import_jsx_runtime39 = __toESM(require_jsx_runtime());
import s38 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/MenuItem/MenuItem.module.css";
var MenuItemAligner = (props) => {
  return (0, import_jsx_runtime39.jsx)(Aligner_default, { ...props, side: props.side || "inline", className: [s38.aligner, props.className] });
};
var MenuItemAligner_default = MenuItemAligner;

// node_modules/reshaped/dist/components/MenuItem/MenuItem.js
import s39 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/MenuItem/MenuItem.module.css";
var MenuItem = (0, import_react33.forwardRef)((props, ref) => {
  const { icon, startSlot, endSlot, children, color = "primary", selected, disabled, onClick, href, size = "medium", roundedCorners, as, className, attributes } = props;
  const rootClassNames = classNames(s39.root, className, responsiveClassNames(s39, "--size", size), responsiveClassNames(s39, "--rounded-corners", roundedCorners), color && s39[`--color-${color}`], selected && s39["--selected"], disabled && s39["--disabled"]);
  const gapSize = responsivePropDependency(size, (size2) => size2 === "large" ? 3 : 2);
  const iconSize = responsivePropDependency(size, (size2) => size2 === "large" ? 5 : 4);
  return (0, import_jsx_runtime40.jsx)(Actionable_default, { disabled, className: rootClassNames, attributes: { ...attributes, "data-rs-aligner-target": true }, onClick, href, ref, as, children: (0, import_jsx_runtime40.jsxs)(View_default, { direction: "row", gap: gapSize, align: "center", children: [icon && (0, import_jsx_runtime40.jsx)(Icon_default, { svg: icon, className: s39.icon, size: iconSize }), !icon && startSlot, children && (0, import_jsx_runtime40.jsx)(View_default.Item, { grow: true, className: s39.content, children }), endSlot] }) });
});
MenuItem.Aligner = MenuItemAligner_default;
var MenuItem_default = MenuItem;

// node_modules/reshaped/dist/icons/ChevronRight.js
var import_jsx_runtime41 = __toESM(require_jsx_runtime());
var IconChevronRight = () => {
  return (0, import_jsx_runtime41.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round", children: (0, import_jsx_runtime41.jsx)("polyline", { points: "9 18 15 12 9 6" }) });
};
var ChevronRight_default = IconChevronRight;

// node_modules/reshaped/dist/components/DropdownMenu/DropdownMenu.js
import s40 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/DropdownMenu/DropdownMenu.module.css";
var DropdownMenuSubContext = import_react34.default.createContext(null);
var DropdownMenu = (props) => {
  const { children, position = "bottom-start", triggerType = "click", trapFocusMode = "action-menu", ...popoverProps } = props;
  return (0, import_jsx_runtime42.jsx)(Popover_default, { ...popoverProps, position, padding: 0, trapFocusMode, triggerType, children });
};
var DropdownMenuContent = (props) => {
  const { children, attributes, className } = props;
  const { flyout: flyout2 } = useFlyoutContext();
  const subMenuInstance = import_react34.default.useContext(DropdownMenuSubContext);
  const [rtl] = useRTL_default();
  const { ref } = useHotkeys_default({
    [rtl ? RIGHT : LEFT]: () => {
      var _a;
      (_a = subMenuInstance == null ? void 0 : subMenuInstance.current) == null ? void 0 : _a.close();
    }
  }, [subMenuInstance == null ? void 0 : subMenuInstance.current], {
    disabled: flyout2.status === "idle"
  });
  const contentClassName = classNames(s40.menu, className);
  return (0, import_jsx_runtime42.jsx)(Popover_default.Content, { className: contentClassName, attributes: { ...attributes, ref }, children });
};
var DropdownMenuSection = (props) => {
  const { children } = props;
  return (0, import_jsx_runtime42.jsx)("div", { className: s40.section, role: "group", children });
};
var DropdownMenuItem = (props) => {
  const { onClick } = props;
  const { handleClose } = useFlyoutContext();
  const handleClick = (e) => {
    if (handleClose)
      handleClose({ closeParents: true });
    if (onClick)
      onClick(e);
  };
  return (0, import_jsx_runtime42.jsx)(MenuItem_default, { ...props, roundedCorners: true, className: s40.item, attributes: { role: "menuitem", ...props.attributes }, onClick: handleClick });
};
var DropdownMenuSubMenu = (props) => {
  const { children } = props;
  const dropdownMenuRef = import_react34.default.useRef();
  return (0, import_jsx_runtime42.jsx)(DropdownMenuSubContext.Provider, { value: dropdownMenuRef, children: (0, import_jsx_runtime42.jsx)(DropdownMenu, { triggerType: "hover", position: "end-top", contentGap: 0.5, instanceRef: dropdownMenuRef, children }) });
};
var DropdownMenuSubTriggerItem = (props) => {
  const { children, attributes, ...menuItemProps } = props;
  const subMenuInstance = import_react34.default.useContext(DropdownMenuSubContext);
  const [rtl] = useRTL_default();
  const { ref } = useHotkeys_default({
    [rtl ? LEFT : RIGHT]: () => {
      var _a;
      (_a = subMenuInstance == null ? void 0 : subMenuInstance.current) == null ? void 0 : _a.open();
    }
  }, [], { ref: attributes == null ? void 0 : attributes.ref, preventDefault: true });
  return (0, import_jsx_runtime42.jsx)(DropdownMenuItem, { ...menuItemProps, attributes: { ...attributes, ref }, endSlot: (0, import_jsx_runtime42.jsx)(Icon_default, { autoWidth: true, svg: ChevronRight_default, className: s40.arrow }), children });
};
var DropdownMenuSubTrigger = (props) => {
  const { children } = props;
  return (0, import_jsx_runtime42.jsx)(DropdownMenu.Trigger, { children: (attributes) => (0, import_jsx_runtime42.jsx)(DropdownMenuSubTriggerItem, { attributes, children }) });
};
DropdownMenu.Dismissible = Popover_default.Dismissible;
DropdownMenu.Trigger = Popover_default.Trigger;
DropdownMenu.Content = DropdownMenuContent;
DropdownMenu.Section = DropdownMenuSection;
DropdownMenu.Item = DropdownMenuItem;
DropdownMenu.SubMenu = DropdownMenuSubMenu;
DropdownMenu.SubTrigger = DropdownMenuSubTrigger;
var DropdownMenu_default = DropdownMenu;

// node_modules/reshaped/dist/components/Autocomplete/Autocomplete.js
var AutocompleteContext = import_react35.default.createContext({});
var Autocomplete = (props) => {
  var _a;
  const { children, onChange, onInput, onItemSelect, name, containerRef, instanceRef, onBackspace, ...textFieldProps } = props;
  const onBackspaceRef = useHandlerRef_default(onBackspace);
  const internalInputRef = import_react35.default.useRef(null);
  const inputAttributesRef = (_a = textFieldProps.inputAttributes) == null ? void 0 : _a.ref;
  const inputRef = inputAttributesRef && typeof inputAttributesRef !== "string" && "current" in inputAttributesRef ? inputAttributesRef : internalInputRef;
  const [active, setActive] = import_react35.default.useState(false);
  const hasChildren = !!import_react35.default.Children.toArray(children).filter(Boolean).length;
  const lockedRef = import_react35.default.useRef(false);
  const handleOpen = import_react35.default.useCallback(() => setActive(true), []);
  const handleClose = () => setActive(false);
  useHotkeys_default({
    [BACKSPACE]: () => {
      var _a2;
      return (_a2 = onBackspaceRef.current) == null ? void 0 : _a2.call(onBackspaceRef);
    }
  }, [onBackspaceRef], {
    ref: inputRef,
    disabled: !onBackspaceRef.current
  });
  useHotkeys_default({
    [DOWN]: () => handleOpen(),
    [ENTER]: () => {
      const el = getActiveElement();
      el == null ? void 0 : el.click();
    }
  }, [handleOpen], { ref: inputRef, preventDefault: true });
  const handleChange = (args) => {
    onChange == null ? void 0 : onChange(args);
    handleOpen();
  };
  const handleItemClick = (args) => {
    onChange == null ? void 0 : onChange({ value: args.value, name });
    onItemSelect == null ? void 0 : onItemSelect({ value: args.value });
    lockedRef.current = true;
    setTimeout(() => lockedRef.current = false, 100);
  };
  const handleInput = (e) => {
    var _a2, _b;
    onInput == null ? void 0 : onInput({ value: e.currentTarget.value, name, event: e });
    (_b = (_a2 = textFieldProps.inputAttributes) == null ? void 0 : _a2.onInput) == null ? void 0 : _b.call(_a2, e);
  };
  return (0, import_jsx_runtime43.jsx)(AutocompleteContext.Provider, { value: { onItemClick: handleItemClick }, children: (0, import_jsx_runtime43.jsxs)(DropdownMenu_default, { position: "bottom", width: "trigger", triggerType: "focus", trapFocusMode: "selection-menu", active: !lockedRef.current && hasChildren && active, onClose: handleClose, onOpen: handleOpen, containerRef, disableHideAnimation: true, instanceRef, children: [(0, import_jsx_runtime43.jsx)(DropdownMenu_default.Trigger, { children: ({ ref, ...attributes }) => (0, import_jsx_runtime43.jsx)(TextField_default, {
    ...textFieldProps,
    name,
    onChange: handleChange,
    focused: hasChildren && active,
    // Ignoring the type check since TS can't infer the correct html element type
    attributes: { ...textFieldProps.attributes, ref },
    inputAttributes: {
      ...textFieldProps.inputAttributes,
      onFocus: (e) => {
        var _a2, _b;
        (_a2 = attributes.onFocus) == null ? void 0 : _a2.call(attributes);
        (_b = textFieldProps.onFocus) == null ? void 0 : _b.call(textFieldProps, e);
      },
      onInput: handleInput,
      ref: inputRef,
      role: "combobox"
    }
  }) }), (0, import_jsx_runtime43.jsx)(DropdownMenu_default.Content, { children })] }) });
};
var AutocompleteItem = (props) => {
  const { value, onClick, ...menuItemProps } = props;
  const { onItemClick } = import_react35.default.useContext(AutocompleteContext);
  const handleClick = (e) => {
    onClick == null ? void 0 : onClick(e);
    onItemClick({ value });
  };
  return (0, import_jsx_runtime43.jsx)(DropdownMenu_default.Item, { ...menuItemProps, attributes: { ...menuItemProps.attributes, role: "option" }, onClick: handleClick });
};
Autocomplete.Item = AutocompleteItem;
var Autocomplete_default = Autocomplete;

// node_modules/reshaped/dist/components/Avatar/Avatar.js
var import_jsx_runtime44 = __toESM(require_jsx_runtime());
import s41 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Avatar/Avatar.module.css";
var Avatar = (props) => {
  const { color = "neutral", variant, src, size = 12, squared, initials, icon, alt, className, attributes } = props;
  const radius = squared ? responsivePropDependency(size, (size2) => {
    if (size2 >= 24)
      return "large";
    if (size2 >= 12)
      return "medium";
    return "small";
  }) : "circular";
  const heightStyles = height_default(size);
  const rootClassNames = classNames(s41.root, className, heightStyles == null ? void 0 : heightStyles.classNames, color && s41[`--color-${color}`], variant && s41[`--variant-${variant}`]);
  const renderContent = () => {
    if (src)
      return (0, import_jsx_runtime44.jsx)("img", { role: !initials ? "presentation" : void 0, src, alt, className: s41.img });
    if (icon)
      return (0, import_jsx_runtime44.jsx)(Icon_default, { svg: icon, size: responsivePropDependency(size, (size2) => Math.ceil(size2 * 0.4)) });
    return initials;
  };
  return (0, import_jsx_runtime44.jsx)(View_default, { borderRadius: radius, attributes: { ...attributes, style: { ...heightStyles == null ? void 0 : heightStyles.variables } }, backgroundColor: variant === "faded" ? `${color}-${variant}` : color, className: rootClassNames, children: renderContent() });
};
var Avatar_default = Avatar;

// node_modules/reshaped/dist/components/Badge/Badge.js
var import_jsx_runtime46 = __toESM(require_jsx_runtime());

// node_modules/reshaped/dist/components/Badge/BadgeContainer.js
var import_jsx_runtime45 = __toESM(require_jsx_runtime());
import s42 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Badge/Badge.module.css";
var BadgeContainer = (props) => {
  const { children, position = "top-end", overlap, className, attributes } = props;
  const rootClassNames = classNames(s42.container, className, overlap && s42["--container-overlap"], position && s42[`--container-position-${position}`]);
  return (0, import_jsx_runtime45.jsx)("div", { ...attributes, className: rootClassNames, children });
};
var BadgeContainer_default = BadgeContainer;

// node_modules/reshaped/dist/components/Badge/Badge.js
var import_react36 = __toESM(require_react());
import s43 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Badge/Badge.module.css";
var Badge = (0, import_react36.forwardRef)((props, ref) => {
  const { children, color, rounded, size = "medium", icon, endIcon, variant, hidden, href, onClick, onDismiss, dismissAriaLabel, className, attributes } = props;
  const isActionable = !!(onClick || href);
  const iconSize = size === "large" ? 4 : 3.5;
  const rootClassName = classNames(s43.root, className, rounded && s43["--rounded"], hidden && s43["--hidden"], size && s43[`--size-${size}`], color && s43[`--color-${color}`], variant && s43[`--variant-${variant}`], isActionable && s43["--actionable"]);
  const hnadleDismiss = (e) => {
    e.stopPropagation();
    onDismiss == null ? void 0 : onDismiss();
  };
  return (0, import_jsx_runtime46.jsxs)(Actionable_default, { onClick, href, className: rootClassName, attributes, ref, children: [icon && (0, import_jsx_runtime46.jsx)(Icon_default, { svg: icon, autoWidth: true, size: iconSize }), children && (0, import_jsx_runtime46.jsx)(Text_default, { variant: size === "large" ? "body-3" : "caption-1", weight: "medium", attributes: {
    "aria-hidden": hidden ? "true" : void 0
  }, children }), endIcon && (0, import_jsx_runtime46.jsx)(Icon_default, { svg: endIcon, autoWidth: true, size: iconSize }), onDismiss && (0, import_jsx_runtime46.jsx)(Actionable_default, { onClick: hnadleDismiss, className: s43.dismiss, as: "span", attributes: { "aria-label": dismissAriaLabel }, children: (0, import_jsx_runtime46.jsx)(Icon_default, { svg: Close_default, size: iconSize }) })] });
});
Badge.Container = BadgeContainer_default;
var Badge_default = Badge;

// node_modules/reshaped/dist/components/Breadcrumbs/Breadcrumbs.js
var import_jsx_runtime48 = __toESM(require_jsx_runtime());
var import_react37 = __toESM(require_react());

// node_modules/reshaped/dist/icons/DotsHorizontal.js
var import_jsx_runtime47 = __toESM(require_jsx_runtime());
var IconDotsHorizontal = () => (0, import_jsx_runtime47.jsxs)("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [(0, import_jsx_runtime47.jsx)("path", { d: "M8 9C8.55228 9 9 8.55228 9 8C9 7.44772 8.55228 7 8 7C7.44772 7 7 7.44772 7 8C7 8.55228 7.44772 9 8 9Z", fill: "currentColor" }), (0, import_jsx_runtime47.jsx)("path", { d: "M12 9C12.5523 9 13 8.55228 13 8C13 7.44772 12.5523 7 12 7C11.4477 7 11 7.44772 11 8C11 8.55228 11.4477 9 12 9Z", fill: "currentColor" }), (0, import_jsx_runtime47.jsx)("path", { d: "M4 9C4.55228 9 5 8.55228 5 8C5 7.44772 4.55228 7 4 7C3.44772 7 3 7.44772 3 8C3 8.55228 3.44772 9 4 9Z", fill: "currentColor" })] });
var DotsHorizontal_default = IconDotsHorizontal;

// node_modules/reshaped/dist/components/Breadcrumbs/Breadcrumbs.js
var Breadcrumbs = (props) => {
  const { children, separator, color, defaultVisibleItems, disableExpand, ariaLabel, className, attributes } = props;
  const visibleItems = defaultVisibleItems && defaultVisibleItems >= 2 ? defaultVisibleItems : null;
  const [expanded, setExpanded] = import_react37.default.useState(false);
  const rootClassNames = classNames(className);
  const childrenLength = import_react37.default.Children.count(children);
  let renderIndex = 0;
  const handleExpand = () => {
    setExpanded(true);
  };
  return (0, import_jsx_runtime48.jsx)("nav", { ...attributes, "aria-label": ariaLabel || (attributes == null ? void 0 : attributes["aria-label"]), className: rootClassNames, children: (0, import_jsx_runtime48.jsx)(View_default, { as: "ol", direction: "row", gap: 2, align: "center", children: import_react37.default.Children.map(children, (child, index) => {
    if (!child)
      return null;
    const lastCollapsedIndex = childrenLength - (visibleItems || 0);
    const isBeforeCollapse = renderIndex === 0;
    const isAfterCollapse = renderIndex > lastCollapsedIndex;
    const isDisplayed = !visibleItems || isBeforeCollapse || isAfterCollapse || expanded;
    const isCollapseButton = renderIndex === lastCollapsedIndex;
    renderIndex += 1;
    let itemNode = null;
    if (isDisplayed) {
      itemNode = child;
    } else if (isCollapseButton) {
      itemNode = disableExpand ? (0, import_jsx_runtime48.jsx)(Icon_default, { svg: DotsHorizontal_default, size: 4 }) : (0, import_jsx_runtime48.jsx)(Button_default.Aligner, { children: (0, import_jsx_runtime48.jsx)(Button_default, { variant: "ghost", size: "small", icon: DotsHorizontal_default, onClick: handleExpand }) });
    }
    if (itemNode === null)
      return null;
    return (0, import_jsx_runtime48.jsxs)(View_default, { as: "li", gap: 2, direction: "row", align: "center", children: [index > 0 && (isDisplayed || isCollapseButton) && (0, import_jsx_runtime48.jsx)(Text_default, { color: "neutral-faded", children: separator || (0, import_jsx_runtime48.jsx)(Icon_default, { svg: ChevronRight_default, size: 3 }) }), (0, import_jsx_runtime48.jsx)(Text_default, { variant: "body-3", color: color === "primary" ? "primary" : "neutral-faded", children: itemNode })] }, index);
  }) }) });
};
var Breadcrumbs_default = Breadcrumbs;

// node_modules/reshaped/dist/components/Breadcrumbs/BreadcrumbsItem.js
var import_jsx_runtime50 = __toESM(require_jsx_runtime());

// node_modules/reshaped/dist/components/Link/Link.js
var import_jsx_runtime49 = __toESM(require_jsx_runtime());
var import_react38 = __toESM(require_react());
import s44 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Link/Link.module.css";
var Link = (0, import_react38.forwardRef)((props, ref) => {
  const { icon, disabled, href, color = "primary", variant = "underline", className, children, attributes, type, onClick } = props;
  const rootClassNames = classNames(s44.root, className, disabled && s44["--disabled"], variant && s44[`--variant-${variant}`], color && s44[`--color-${color}`], icon && s44["--with-icon"]);
  return (0, import_jsx_runtime49.jsxs)(Actionable_default, { href, disabled, className: rootClassNames, attributes, type, onClick, ref, children: [icon && (0, import_jsx_runtime49.jsx)(Icon_default, { svg: icon }), children] });
});
var Link_default = Link;

// node_modules/reshaped/dist/components/Breadcrumbs/BreadcrumbsItem.js
var BreadcrumbsItem = (props) => {
  const { children, onClick, href, icon, disabled } = props;
  if (!href && !onClick && !disabled) {
    return (0, import_jsx_runtime50.jsx)(Text_default, { variant: "body-3", weight: "medium", color: "neutral", children });
  }
  return (0, import_jsx_runtime50.jsx)(Link_default, { onClick, href, icon, disabled, variant: "plain", color: "inherit", children });
};
var BreadcrumbsItem_default = BreadcrumbsItem;

// node_modules/reshaped/dist/components/Breadcrumbs/index.js
var Breadcrumbs2 = Breadcrumbs_default;
Breadcrumbs2.Item = BreadcrumbsItem_default;
var Breadcrumbs_default2 = Breadcrumbs2;

// node_modules/reshaped/dist/components/Calendar/Calendar.js
var import_jsx_runtime59 = __toESM(require_jsx_runtime());

// node_modules/reshaped/dist/components/Calendar/CalendarControlled.js
var import_jsx_runtime57 = __toESM(require_jsx_runtime());
var import_react42 = __toESM(require_react());

// node_modules/reshaped/dist/components/Calendar/Calendar.utils.js
var DAYS_IN_WEEK = 7;
var FIRST_WEEK_DAY = 1;
var getLocalISODate = (args) => {
  const { date } = args;
  return [
    date.getFullYear(),
    (date.getMonth() + 1).toString().padStart(2, "0"),
    date.getDate().toString().padStart(2, "0")
  ].join("-");
};
var getNormalizedDay = (args) => {
  const { date, firstWeekDay = FIRST_WEEK_DAY } = args;
  const day = date.getDay();
  return day < firstWeekDay ? DAYS_IN_WEEK - day - firstWeekDay : day - firstWeekDay;
};
var getWeekdayNames = (args) => {
  const { firstWeekDay = FIRST_WEEK_DAY, renderWeekDay } = args;
  const baseDate = new Date(2021, 1, firstWeekDay);
  const weekdays = [];
  for (let i = firstWeekDay; i < firstWeekDay + DAYS_IN_WEEK; i++) {
    const weekday = renderWeekDay ? renderWeekDay({ weekDay: i, date: baseDate }) : baseDate.toLocaleDateString("en-US", { weekday: "short" });
    weekdays.push(weekday.slice(0, 2));
    baseDate.setDate(baseDate.getDate() + 1);
  }
  return weekdays;
};
var getMonthNames = (args) => {
  const { renderMonthLabel } = args;
  return new Array(12).fill(null).map((_, i) => {
    const date = new Date(0, i);
    return renderMonthLabel ? renderMonthLabel({ month: i, date }) : date.toLocaleString("default", { month: "short" });
  });
};
var getMonthWeeks = (args) => {
  const { date, firstWeekDay } = args;
  const month = date.getMonth();
  const year = date.getFullYear();
  const weeks = [];
  const currentDate = new Date(year, month, 1);
  const firstDay = getNormalizedDay({ date: currentDate, firstWeekDay });
  if (firstDay !== 0)
    weeks.push(new Array(firstDay).fill(null));
  while (month === currentDate.getMonth()) {
    const day = getNormalizedDay({ date: currentDate, firstWeekDay });
    if (day === 0 || !weeks.length)
      weeks.push([]);
    weeks[weeks.length - 1].push(new Date(currentDate));
    currentDate.setDate(currentDate.getDate() + 1);
  }
  const lastDay = getNormalizedDay({ date: currentDate, firstWeekDay });
  if (lastDay !== 0)
    weeks[weeks.length - 1].push(...new Array(7 - lastDay).fill(null));
  return weeks;
};
var getFocusableDates = (rootEl) => {
  return (rootEl == null ? void 0 : rootEl.querySelectorAll("[data-rs-date]")) || [];
};
var setMonthTo = (date, value) => {
  const resultDate = new Date(date);
  resultDate.setMonth(value);
  return resultDate;
};
var setMonthToPrevious = (date) => {
  return setMonthTo(date, date.getMonth() - 1);
};
var setMonthToNext = (date) => {
  return setMonthTo(date, date.getMonth() + 1);
};
var setYearTo = (date, value) => {
  const resultDate = new Date(date);
  resultDate.setFullYear(value);
  return resultDate;
};
var setYearToPrevious = (date) => {
  return setYearTo(date, date.getFullYear() - 1);
};
var setYearToNext = (date) => {
  return setYearTo(date, date.getFullYear() + 1);
};
var applyNavigationBounds = (args) => {
  const { date, min, max } = args;
  const currentMonth = date.getMonth();
  const currentYear = date.getFullYear();
  const prevMonthLastDate = new Date(currentYear, currentMonth, 0);
  const nextMonthFirstDate = setMonthToNext(date);
  nextMonthFirstDate.setDate(0);
  return {
    isFirstMonth: min && min > prevMonthLastDate,
    isLastMonth: max && max < nextMonthFirstDate
  };
};

// node_modules/reshaped/dist/components/Calendar/useCalendarKeyboardNavigation.js
var import_react39 = __toESM(require_react());
var useCalendarKeyboardNavigation = (props) => {
  const { rootRef, changeToNextMonth, changeToPreviousMonth, monthDate, verticalDelta, min, max } = props;
  const overflowCountRef = import_react39.default.useRef(0);
  const focusDate = import_react39.default.useCallback((args) => {
    const { delta, onMonthChange } = args;
    const focusedEl = document.activeElement;
    if (!focusedEl)
      return;
    const focusable = getFocusableDates(rootRef.current);
    const focusableArr = Array.from(focusable);
    const currentIndex = focusableArr.findIndex((el) => el === focusedEl);
    const nextIndex = currentIndex + delta;
    const nextEl = focusableArr[nextIndex];
    const currentDateString = focusedEl.getAttribute("data-rs-date");
    if (!currentDateString)
      return;
    const [year, month, date] = currentDateString == null ? void 0 : currentDateString.split("-").map(Number);
    let nextDate;
    if (date) {
      nextDate = new Date(year, month - 1, date + delta);
    } else if (delta > 0) {
      nextDate = new Date(year, month - 1 + delta, 1);
    } else {
      nextDate = new Date(year, month - 1 + delta + 1, 0);
    }
    const disabled = min && nextDate < min || max && nextDate > max;
    if (disabled)
      return;
    if (nextEl) {
      nextEl.focus();
      return;
    }
    overflowCountRef.current = nextIndex < 0 ? nextIndex : nextIndex - (focusableArr.length - 1);
    onMonthChange();
  }, [rootRef, min, max]);
  import_react39.default.useEffect(() => {
    const count = overflowCountRef.current;
    if (count === 0)
      return;
    const els = getFocusableDates(rootRef.current);
    const targetIndex = count < 0 ? els.length + count : count - 1;
    const targetEl = els[targetIndex];
    if (targetEl)
      targetEl.focus();
    overflowCountRef.current = 0;
  }, [monthDate, rootRef]);
  useHotkeys_default({
    [LEFT]: () => focusDate({ delta: -1, onMonthChange: changeToPreviousMonth }),
    [RIGHT]: () => focusDate({ delta: 1, onMonthChange: changeToNextMonth }),
    [UP]: () => focusDate({ delta: -verticalDelta, onMonthChange: changeToPreviousMonth }),
    [DOWN]: () => focusDate({ delta: verticalDelta, onMonthChange: changeToNextMonth })
  }, [changeToNextMonth, changeToPreviousMonth, focusDate, verticalDelta], { ref: rootRef, preventDefault: true });
};
var useCalendarKeyboardNavigation_default = useCalendarKeyboardNavigation;

// node_modules/reshaped/dist/components/Calendar/CalendarMonth.js
var import_jsx_runtime52 = __toESM(require_jsx_runtime());

// node_modules/reshaped/dist/components/Calendar/CalendarDate.js
var import_jsx_runtime51 = __toESM(require_jsx_runtime());
import s45 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Calendar/Calendar.module.css";
var CalendarDate = (props) => {
  const { date, startValue, endValue, isActiveStart, isActiveEnd, disabled, focusable, onChange, range: range2, hoveredDate, onDateHover, onDateHoverEnd, renderAriaLabel } = props;
  if (!date)
    return (0, import_jsx_runtime51.jsx)("td", { className: s45.cell, "aria-hidden": "true" });
  const inRange = startValue && startValue < date && (endValue && endValue > date || hoveredDate && !endValue && hoveredDate > date);
  const dateClassNames = classNames([
    s45.cell,
    !range2 && isActiveStart && s45["cell--active-single"],
    isActiveStart && s45["cell--active-start"],
    (isActiveEnd || !endValue && isActiveStart && !(hoveredDate && startValue && hoveredDate > startValue)) && s45["cell--active-end"],
    inRange && s45["cell--in-range"]
  ]);
  const handleClick = () => {
    if (!range2) {
      onChange == null ? void 0 : onChange({ value: date });
      return;
    }
    const bothDatesSelected = startValue && endValue;
    const noneDatesSelected = !startValue && !endValue;
    const selectingBeforeStart = startValue && date < startValue;
    const selectingStart = bothDatesSelected || noneDatesSelected || selectingBeforeStart;
    const start = selectingStart ? date : startValue;
    const end = !selectingStart ? date : null;
    onChange == null ? void 0 : onChange({ value: { start, end } });
  };
  const handleMouseEnter = () => {
    onDateHover(date);
  };
  const handleMouseLeave = () => {
    onDateHoverEnd(date);
  };
  return (0, import_jsx_runtime51.jsx)("td", { className: dateClassNames, role: disabled ? "presentation" : "gridcell", children: (0, import_jsx_runtime51.jsx)(Actionable_default, { fullWidth: true, insetFocus: true, className: s45["cell-button"], disabled, onClick: handleClick, attributes: {
    role: "checkbox",
    tabIndex: focusable ? 0 : -1,
    "aria-hidden": disabled,
    "aria-label": renderAriaLabel ? renderAriaLabel({ date }) : date.toLocaleDateString("en-us", { month: "long", day: "numeric", weekday: "long" }),
    "aria-checked": isActiveStart || isActiveEnd,
    "data-rs-date": getLocalISODate({ date }),
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave,
    onFocus: handleMouseEnter,
    onBlur: handleMouseLeave
  }, children: date.getDate() }) });
};
var CalendarDate_default = CalendarDate;

// node_modules/reshaped/dist/components/Calendar/CalendarMonth.js
import s46 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Calendar/Calendar.module.css";
var CalendarMonth = (props) => {
  const { date, value, onChange, min, max, range: range2, firstWeekDay, hoveredDate, onDateHover, onDateHoverEnd, renderWeekDay, renderDateAriaLabel } = props;
  let foundFocusableDate = false;
  const month = date.getMonth();
  const weeks = getMonthWeeks({ date, firstWeekDay });
  const weekdayNames = getWeekdayNames({ firstWeekDay, renderWeekDay });
  return (0, import_jsx_runtime52.jsxs)("table", { className: s46.selection, role: "grid", children: [(0, import_jsx_runtime52.jsx)("thead", { "aria-hidden": "true", children: (0, import_jsx_runtime52.jsx)("tr", { children: weekdayNames.map((dayName) => (0, import_jsx_runtime52.jsx)("th", { className: s46.weekday, scope: "col", children: dayName }, dayName)) }) }), (0, import_jsx_runtime52.jsx)("tbody", { children: weeks.map((week) => {
    var _a;
    const key = [month, (_a = week[0]) == null ? void 0 : _a.getDate()].filter(Boolean).join("-");
    return (0, import_jsx_runtime52.jsx)("tr", { className: s46.row, children: week.map((date2, index) => {
      const disabled = !!date2 && (min && date2 < min || max && date2 > max);
      const month2 = date2 == null ? void 0 : date2.getMonth();
      const today = /* @__PURE__ */ new Date();
      const isoToday = getLocalISODate({ date: today });
      const startValue = value && "start" in value ? value.start : value;
      const endValue = value && "end" in value ? value.end : value;
      const isoDate = date2 && getLocalISODate({ date: date2 });
      const isoStartValue = startValue && getLocalISODate({ date: startValue });
      const isoEndValue = endValue && getLocalISODate({ date: endValue });
      const isActiveStart = !!isoDate && !!isoStartValue && isoDate === isoStartValue;
      const isActiveEnd = !!isoDate && !!isoEndValue && isoDate === isoEndValue;
      let focusable = false;
      if (!foundFocusableDate && date2) {
        if (!!startValue && startValue.getMonth() === (date2 == null ? void 0 : date2.getMonth())) {
          focusable = getLocalISODate({ date: startValue }) === getLocalISODate({ date: date2 });
        } else if (isoDate && month2 === today.getMonth()) {
          focusable = isoDate >= isoToday && !disabled;
        } else {
          focusable = !disabled;
        }
      }
      if (focusable)
        foundFocusableDate = true;
      return (0, import_jsx_runtime52.jsx)(CalendarDate_default, { date: date2, disabled, range: range2, focusable, startValue, endValue, isActiveStart, isActiveEnd, onChange, hoveredDate, onDateHover, onDateHoverEnd, renderAriaLabel: renderDateAriaLabel }, index);
    }) }, key);
  }) })] });
};
var CalendarMonth_default = CalendarMonth;

// node_modules/reshaped/dist/components/Calendar/CalendarYear.js
var import_jsx_runtime53 = __toESM(require_jsx_runtime());
var import_react40 = __toESM(require_react());
import s47 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Calendar/Calendar.module.css";
var MONTHS_PER_ROW = 3;
var CalendarYear = (props) => {
  const { renderMonthLabel, renderMonthAriaLabel, monthDate, min, max, onMonthClick } = props;
  const rootRef = import_react40.default.useRef(null);
  const monthNames = getMonthNames({ renderMonthLabel });
  const rows = [];
  for (let i = 0; i < monthNames.length; i += MONTHS_PER_ROW) {
    const chunk = monthNames.slice(i, i + MONTHS_PER_ROW);
    rows.push(chunk);
  }
  import_react40.default.useEffect(() => {
    var _a;
    const focusableEl = (_a = rootRef.current) == null ? void 0 : _a.querySelector('[tabIndex="0"]');
    onNextFrame(() => {
      focusableEl == null ? void 0 : focusableEl.focus();
    });
  }, []);
  return (0, import_jsx_runtime53.jsx)("table", { ref: rootRef, role: "grid", className: s47.selection, children: (0, import_jsx_runtime53.jsx)("tbody", { children: rows.map((row, i) => (0, import_jsx_runtime53.jsx)("tr", { className: s47.row, children: row.map((name, j) => {
    const monthIndex = i * MONTHS_PER_ROW + j;
    const date = new Date(monthDate.getFullYear(), monthIndex);
    const isOutsideMinBound = min && min.getFullYear() >= date.getFullYear() && min.getMonth() > date.getMonth();
    const isOutsideMaxBound = max && max.getFullYear() <= date.getFullYear() && max.getMonth() < date.getMonth();
    const disabled = isOutsideMaxBound || isOutsideMinBound;
    return (0, import_jsx_runtime53.jsx)("td", { role: disabled ? "presentation" : "gridcell", className: s47.cell, children: (0, import_jsx_runtime53.jsx)(Actionable_default, { fullWidth: true, insetFocus: true, className: s47["cell-button"], disabled, onClick: () => onMonthClick(monthIndex), attributes: {
      tabIndex: monthIndex === monthDate.getMonth() ? 0 : -1,
      "aria-hidden": disabled,
      "aria-label": renderMonthAriaLabel ? renderMonthAriaLabel({ month: monthIndex }) : name,
      "data-rs-date": `${monthDate.getFullYear()}-${(monthIndex + 1).toString().padStart(2, "0")}`
    }, children: name }) }, name);
  }) }, i)) }) });
};
var CalendarYear_default = CalendarYear;

// node_modules/reshaped/dist/components/Calendar/CalendarControls.js
var import_jsx_runtime56 = __toESM(require_jsx_runtime());
var import_react41 = __toESM(require_react());

// node_modules/reshaped/dist/components/HiddenVisually/HiddenVisually.js
var import_jsx_runtime54 = __toESM(require_jsx_runtime());
import s48 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/HiddenVisually/HiddenVisually.module.css";
var HiddenVisually = (props) => {
  const { children } = props;
  return (0, import_jsx_runtime54.jsx)("div", { className: s48.root, children });
};
var HiddenVisually_default = HiddenVisually;

// node_modules/reshaped/dist/icons/ChevronLeft.js
var import_jsx_runtime55 = __toESM(require_jsx_runtime());
var IconChevronLeft = () => {
  return (0, import_jsx_runtime55.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round", children: (0, import_jsx_runtime55.jsx)("polyline", { points: "15 18 9 12 15 6" }) });
};
var ChevronLeft_default = IconChevronLeft;

// node_modules/reshaped/dist/components/Calendar/CalendarControls.js
import s49 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Calendar/Calendar.module.css";
var CalendarControls = (props) => {
  const { selectionMode, onMonthTitleClick, monthTitleRef, monthDate, renderSelectedMonthLabel, isFirstMonth, isLastMonth, onNextClick, onPreviousClick, monthSelectionAriaLabel = "Select a month", previousMonthAriaLabel = "Previous month", previousYearAriaLabel = "Previous year", nextMonthAriaLabel = "Next month", nextYearAriaLabel = "Next year" } = props;
  const prevRef = import_react41.default.useRef(null);
  const nextRef = import_react41.default.useRef(null);
  import_react41.default.useEffect(() => {
    if (!isFirstMonth)
      return;
    if (document.activeElement !== prevRef.current)
      return;
    const targetEl = nextRef.current || monthTitleRef.current;
    onNextFrame(() => {
      targetEl == null ? void 0 : targetEl.focus();
    });
  }, [isFirstMonth, monthTitleRef]);
  import_react41.default.useEffect(() => {
    if (!isLastMonth)
      return;
    if (document.activeElement !== nextRef.current)
      return;
    const targetEl = prevRef.current || monthTitleRef.current;
    onNextFrame(() => {
      targetEl == null ? void 0 : targetEl.focus();
    });
  }, [isLastMonth, monthTitleRef]);
  return (0, import_jsx_runtime56.jsxs)(View_default, { direction: "row", gap: 2, align: "center", children: [(0, import_jsx_runtime56.jsx)(Hidden_default, { visibility: true, hide: isFirstMonth, children: (0, import_jsx_runtime56.jsx)("div", { className: s49.control, children: (0, import_jsx_runtime56.jsx)(Button_default, { variant: "ghost", icon: ChevronLeft_default, onClick: onPreviousClick, attributes: {
    ref: prevRef,
    "aria-label": selectionMode === "date" ? previousMonthAriaLabel : previousYearAriaLabel
  } }) }) }), (0, import_jsx_runtime56.jsxs)(View_default.Item, { grow: true, children: [selectionMode === "date" && (0, import_jsx_runtime56.jsxs)(Button_default, { fullWidth: true, variant: "ghost", onClick: onMonthTitleClick, attributes: { ref: monthTitleRef }, children: [renderSelectedMonthLabel ? renderSelectedMonthLabel({ date: monthDate }) : monthDate.toLocaleDateString("en-US", { month: "long", year: "numeric" }), (0, import_jsx_runtime56.jsx)(HiddenVisually_default, { children: monthSelectionAriaLabel })] }), selectionMode === "month" && (0, import_jsx_runtime56.jsx)(Text_default, { align: "center", weight: "medium", children: monthDate.toLocaleDateString("en-US", { year: "numeric" }) })] }), (0, import_jsx_runtime56.jsx)(Hidden_default, { visibility: true, hide: isLastMonth, children: (0, import_jsx_runtime56.jsx)("div", { className: s49.control, children: (0, import_jsx_runtime56.jsx)(Button_default, { variant: "ghost", icon: ChevronRight_default, onClick: onNextClick, attributes: {
    ref: nextRef,
    "aria-label": selectionMode === "date" ? nextMonthAriaLabel : nextYearAriaLabel
  } }) }) })] });
};
var CalendarControls_default = CalendarControls;

// node_modules/reshaped/dist/components/Calendar/CalendarControlled.js
var CalendarControlled = (props) => {
  const { value, onChange, defaultMonth, min, max, range: range2, firstWeekDay, renderMonthLabel, renderSelectedMonthLabel, renderWeekDay, previousMonthAriaLabel, previousYearAriaLabel, nextMonthAriaLabel, nextYearAriaLabel, monthSelectionAriaLabel, renderMonthAriaLabel, renderDateAriaLabel } = props;
  const [selectionMode, setSelectionMode] = import_react42.default.useState("date");
  const [monthDate, setMonthDate] = import_react42.default.useState(defaultMonth || /* @__PURE__ */ new Date());
  const [hoveredDate, setHoveredDate] = import_react42.default.useState(null);
  const monthTitleRef = import_react42.default.useRef(null);
  const prevSelectionModeRef = import_react42.default.useRef(selectionMode);
  const bounds = applyNavigationBounds({ date: monthDate, min, max });
  const selectionRootRef = import_react42.default.useRef(null);
  const handlePreviousClick = () => {
    if (selectionMode === "month") {
      setMonthDate((prev) => setYearToPrevious(prev));
      return;
    }
    setMonthDate((prev) => setMonthToPrevious(prev));
  };
  const handleNextClick = () => {
    if (selectionMode === "month") {
      setMonthDate((prev) => setYearToNext(prev));
      return;
    }
    setMonthDate((prev) => setMonthToNext(prev));
  };
  const handleMonthTitleClick = () => {
    setSelectionMode("month");
  };
  const handleMonthClick = (i) => {
    setMonthDate((prev) => setMonthTo(prev, i));
    setSelectionMode("date");
  };
  const handleDateHover = (date) => {
    setHoveredDate(date);
  };
  const handleDateHoverEnd = (date) => {
    if (hoveredDate && +hoveredDate === +date)
      setHoveredDate(null);
  };
  import_react42.default.useEffect(() => {
    if (selectionMode === "date" && selectionMode !== prevSelectionModeRef.current) {
      onNextFrame(() => {
        var _a;
        (_a = monthTitleRef.current) == null ? void 0 : _a.focus();
      });
    }
    prevSelectionModeRef.current = selectionMode;
  }, [selectionMode]);
  useCalendarKeyboardNavigation_default({
    monthDate,
    rootRef: selectionRootRef,
    changeToNextMonth: handleNextClick,
    changeToPreviousMonth: handlePreviousClick,
    // Each row has 7 days in date selection and 3 months in month
    verticalDelta: selectionMode === "date" ? 7 : 3,
    min,
    max
  });
  return (0, import_jsx_runtime57.jsxs)(View_default, { gap: 2, children: [(0, import_jsx_runtime57.jsx)(CalendarControls_default, { renderSelectedMonthLabel, monthDate, selectionMode, isFirstMonth: bounds.isFirstMonth, isLastMonth: bounds.isLastMonth, monthTitleRef, onMonthTitleClick: handleMonthTitleClick, onNextClick: handleNextClick, onPreviousClick: handlePreviousClick, previousMonthAriaLabel, previousYearAriaLabel, nextMonthAriaLabel, nextYearAriaLabel, monthSelectionAriaLabel }), (0, import_jsx_runtime57.jsxs)(View_default.Item, { attributes: { ref: selectionRootRef }, children: [selectionMode === "date" && (0, import_jsx_runtime57.jsx)(CalendarMonth_default, { date: monthDate, value, onChange, min, max, range: range2, firstWeekDay, hoveredDate, onDateHover: handleDateHover, onDateHoverEnd: handleDateHoverEnd, renderWeekDay, renderDateAriaLabel }), selectionMode === "month" && (0, import_jsx_runtime57.jsx)(CalendarYear_default, { monthDate, onMonthClick: handleMonthClick, renderMonthLabel, renderMonthAriaLabel, min, max })] })] });
};
var CalendarControlled_default = CalendarControlled;

// node_modules/reshaped/dist/components/Calendar/CalendarUncontrolled.js
var import_jsx_runtime58 = __toESM(require_jsx_runtime());
var import_react43 = __toESM(require_react());
var CalendarUncontrolled = (props) => {
  const { onChange, defaultValue, range: range2, ...controlledProps } = props;
  const [value, setValue] = import_react43.default.useState(defaultValue || null);
  if (range2) {
    return (0, import_jsx_runtime58.jsx)(CalendarControlled_default, { range: true, ...controlledProps, value, onChange: (args) => {
      setValue(args.value);
      onChange == null ? void 0 : onChange(args);
    } });
  }
  return (0, import_jsx_runtime58.jsx)(CalendarControlled_default, { ...controlledProps, value, onChange: (args) => {
    setValue(args.value);
    onChange == null ? void 0 : onChange(args);
  } });
};
var CalendarUncontrolled_default = CalendarUncontrolled;

// node_modules/reshaped/dist/components/Calendar/Calendar.js
var Calendar = (props) => {
  if (props.value !== void 0)
    return (0, import_jsx_runtime59.jsx)(CalendarControlled_default, { ...props });
  return (0, import_jsx_runtime59.jsx)(CalendarUncontrolled_default, { ...props });
};
var Calendar_default = Calendar;

// node_modules/reshaped/dist/components/Card/Card.js
var import_jsx_runtime60 = __toESM(require_jsx_runtime());
var import_react44 = __toESM(require_react());
import s50 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Card/Card.module.css";
var Card = (0, import_react44.forwardRef)((props, ref) => {
  const { padding = 4 } = props;
  const {
    selected,
    elevated,
    bleed,
    height,
    onClick,
    href,
    children,
    className,
    attributes,
    /**
     * Using any here to let TS save on type resolving, otherwise TS throws an error due to the type complexity
     * It still resolves the attributes correctly based on the tag
     */
    as: TagName = "div"
  } = props;
  const isActionable = !!href || !!onClick;
  const radiusStyles = radius_default("medium");
  const bleedStyles = bleed_default(bleed);
  const paddingStyles = padding_default(padding);
  const heightStyles = height_default(height);
  const rootClassNames = classNames(s50.root, radiusStyles == null ? void 0 : radiusStyles.classNames, bleedStyles == null ? void 0 : bleedStyles.classNames, paddingStyles == null ? void 0 : paddingStyles.classNames, heightStyles == null ? void 0 : heightStyles.classNames, isActionable && s50["--actionable"], elevated && s50["--elevated"], selected && s50["--selected"], className);
  const style = {
    ...attributes == null ? void 0 : attributes.style,
    ...bleedStyles == null ? void 0 : bleedStyles.variables,
    ...paddingStyles == null ? void 0 : paddingStyles.variables,
    ...heightStyles == null ? void 0 : heightStyles.variables
  };
  if (isActionable) {
    return (0, import_jsx_runtime60.jsx)(Actionable_default, { className: rootClassNames, attributes: { ...attributes, style }, href, as: TagName, onClick, ref, children: (0, import_jsx_runtime60.jsx)("span", { className: s50.content, children }) });
  }
  return (0, import_jsx_runtime60.jsx)(TagName, { ...attributes, onClick, href, ref, className: rootClassNames, style, children: (0, import_jsx_runtime60.jsx)("span", { className: s50.content, children }) });
});
var Card_default = Card;

// node_modules/reshaped/dist/components/Carousel/Carousel.js
var import_jsx_runtime62 = __toESM(require_jsx_runtime());
var import_react46 = __toESM(require_react());

// node_modules/reshaped/dist/components/Carousel/CarouselControl.js
var import_jsx_runtime61 = __toESM(require_jsx_runtime());
var import_react45 = __toESM(require_react());

// node_modules/reshaped/dist/components/Carousel/Carousel.types.js
var ControlType;
(function(ControlType2) {
  ControlType2["back"] = "back";
  ControlType2["forward"] = "forward";
})(ControlType || (ControlType = {}));

// node_modules/reshaped/dist/components/Carousel/CarouselControl.js
import s51 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Carousel/Carousel.module.css";
var CarouselControl = (props) => {
  const { type, scrollElRef, scrollPosition, onClick, isRTL, mounted } = props;
  const [visible, setVisible] = import_react45.default.useState(false);
  const [rendered, setRendered] = import_react45.default.useState(false);
  const isNext = type === ControlType.forward;
  const isDisplayedAsNext = type === (isRTL ? ControlType.back : ControlType.forward);
  const controlClassNames = classNames(s51.control, isDisplayedAsNext ? s51["--control-next"] : s51["--control-prev"], visible && s51["--control-visible"], rendered && s51["--control-rendered"]);
  useIsomorphicLayoutEffect_default(() => {
    const scrollEl = scrollElRef.current;
    if (!scrollEl || !mounted)
      return;
    let timer;
    const normalizedScrollPosition = Math.abs(scrollPosition);
    const isScrollAtStart = normalizedScrollPosition <= 0;
    const isScrollAtEnd = normalizedScrollPosition + scrollEl.clientWidth >= scrollEl.scrollWidth - 1;
    const hideControl = isNext ? isScrollAtEnd : isScrollAtStart;
    if (hideControl) {
      setVisible(false);
      timer = setTimeout(() => setRendered(false), 1500);
    } else {
      setRendered(true);
      setVisible(true);
    }
    return () => {
      if (timer)
        clearTimeout(timer);
    };
  }, [scrollPosition, scrollElRef, mounted, isNext]);
  return (0, import_jsx_runtime61.jsx)("div", { className: controlClassNames, "aria-hidden": "true", children: (0, import_jsx_runtime61.jsx)(Button_default, { onClick, icon: isDisplayedAsNext ? ChevronRight_default : ChevronLeft_default, rounded: true, variant: "outline", elevated: true, attributes: { "aria-disabled": !visible } }) });
};
var CarouselControl_default = CarouselControl;

// node_modules/reshaped/dist/components/Carousel/Carousel.js
import s52 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Carousel/Carousel.module.css";
var Carousel = (props) => {
  const { children, gap = 3, visibleItems, bleed, navigationDisplay, instanceRef, className, attributes } = props;
  const [mounted, setMounted] = import_react46.default.useState(false);
  const [scrollPosition, setScrollPosition] = import_react46.default.useState(0);
  const [isRTL] = useRTL_default();
  const scrollElRef = import_react46.default.useRef(null);
  const bleedClassNames = {};
  if (typeof bleed === "object") {
    Object.entries(bleed).forEach(([key, value]) => {
      bleedClassNames[key] = typeof value === "number" && value > 0;
    });
  }
  const rootClassNames = classNames(s52.root, className, ...responsiveClassNames(s52, "--bleed", typeof bleed === "number" ? true : bleedClassNames));
  const handleScroll = debounceHandler((event) => {
    const el = event.target;
    setScrollPosition(el.scrollLeft);
  }, 16);
  const getItemsGap = () => {
    const style = getComputedStyle(scrollElRef.current);
    const xGap = style.gap.split(" ")[0];
    return Number(xGap.replace("px", ""));
  };
  const navigateRight = () => {
    const scrollEl = scrollElRef.current;
    scrollEl.scrollBy({
      left: scrollEl.clientWidth + getItemsGap(),
      top: 0,
      behavior: "smooth"
    });
  };
  const navigateLeft = () => {
    const scrollEl = scrollElRef.current;
    scrollEl.scrollBy({
      left: -scrollEl.clientWidth - getItemsGap(),
      top: 0,
      behavior: "smooth"
    });
  };
  const navigateBack = isRTL ? navigateRight : navigateLeft;
  const navigateForward = isRTL ? navigateLeft : navigateRight;
  import_react46.default.useImperativeHandle(instanceRef, () => ({
    navigateBack,
    navigateForward
  }));
  useIsomorphicLayoutEffect_default(() => {
    setMounted(true);
  }, []);
  return (0, import_jsx_runtime62.jsxs)("section", { ...attributes, className: rootClassNames, style: {
    ...responsiveVariables("--rs-carousel-items", visibleItems),
    ...responsiveVariables("--rs-carousel-bleed", bleed)
  }, children: [navigationDisplay !== "hidden" && (0, import_jsx_runtime62.jsxs)(import_jsx_runtime62.Fragment, { children: [(0, import_jsx_runtime62.jsx)(CarouselControl_default, { isRTL, type: ControlType.back, scrollElRef, scrollPosition, onClick: navigateBack, mounted }), (0, import_jsx_runtime62.jsx)(CarouselControl_default, { isRTL, type: ControlType.forward, scrollElRef, scrollPosition, onClick: navigateForward, mounted })] }), (0, import_jsx_runtime62.jsx)(View_default, { as: "ul", direction: "row", wrap: false, gap, className: s52.scroll, attributes: { ref: scrollElRef, onScroll: handleScroll }, children: import_react46.default.Children.map(children, (child) => (0, import_jsx_runtime62.jsx)(View_default.Item, { className: s52.item, as: "li", children: child })) })] });
};
var Carousel_default = Carousel;

// node_modules/reshaped/dist/components/Checkbox/Checkbox.js
var import_jsx_runtime68 = __toESM(require_jsx_runtime());
var import_react49 = __toESM(require_react());

// node_modules/reshaped/dist/components/_private/HiddenInput/HiddenInput.js
var import_jsx_runtime63 = __toESM(require_jsx_runtime());
import s53 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/_private/HiddenInput/HiddenInput.module.css";
var HiddenInput = (props) => {
  const { name, value, type, onChange, onFocus, onBlur, checked, defaultChecked, disabled, className, attributes } = props;
  const rootClassNames = classNames(s53.root, className);
  return (0, import_jsx_runtime63.jsx)("input", { ...attributes, className: rootClassNames, type, name, value, checked, defaultChecked, disabled, onChange, onFocus: onFocus || (attributes == null ? void 0 : attributes.onFocus), onBlur: onBlur || (attributes == null ? void 0 : attributes.onBlur) });
};
var HiddenInput_default = HiddenInput;

// node_modules/reshaped/dist/components/CheckboxGroup/CheckboxGroup.js
var import_jsx_runtime66 = __toESM(require_jsx_runtime());

// node_modules/reshaped/dist/components/CheckboxGroup/CheckboxGroupControlled.js
var import_jsx_runtime64 = __toESM(require_jsx_runtime());

// node_modules/reshaped/dist/components/CheckboxGroup/CheckboxGroup.context.js
var import_react47 = __toESM(require_react());
var CheckboxContext = import_react47.default.createContext(null);
var useCheckboxGroup = () => import_react47.default.useContext(CheckboxContext);
var CheckboxGroup_context_default = CheckboxContext;

// node_modules/reshaped/dist/components/CheckboxGroup/CheckboxGroupControlled.js
var CheckboxGroupControlled = (props) => {
  const { onChange, name, disabled, value, children, hasError } = props;
  const handleChange = (args) => {
    const { event, value: fieldValue, checked } = args;
    if (!fieldValue)
      return;
    let nextValue = [...value];
    if (checked) {
      nextValue.push(fieldValue);
    } else {
      nextValue = nextValue.filter((v) => v !== fieldValue);
    }
    if (onChange)
      onChange({ name, value: nextValue, event });
  };
  return (0, import_jsx_runtime64.jsx)(CheckboxGroup_context_default.Provider, { value: { onChange: handleChange, disabled, value, name, hasError }, children });
};
var CheckboxGroupControlled_default = CheckboxGroupControlled;

// node_modules/reshaped/dist/components/CheckboxGroup/CheckboxGroupUncontrolled.js
var import_jsx_runtime65 = __toESM(require_jsx_runtime());
var import_react48 = __toESM(require_react());
var CheckboxGroupUncontrolled = (props) => {
  const { defaultValue, onChange } = props;
  const [value, setValue] = import_react48.default.useState(defaultValue || []);
  const handleChange = (args) => {
    if (!args.value)
      return;
    setValue(args.value);
    if (onChange)
      onChange(args);
  };
  return (0, import_jsx_runtime65.jsx)(CheckboxGroupControlled_default, { ...props, value, defaultValue: void 0, onChange: handleChange });
};
var CheckboxGroupUncontrolled_default = CheckboxGroupUncontrolled;

// node_modules/reshaped/dist/components/CheckboxGroup/CheckboxGroup.js
var CheckboxGroup = (props) => {
  const { value } = props;
  if (value !== void 0)
    return (0, import_jsx_runtime66.jsx)(CheckboxGroupControlled_default, { ...props });
  return (0, import_jsx_runtime66.jsx)(CheckboxGroupUncontrolled_default, { ...props });
};
var CheckboxGroup_default = CheckboxGroup;

// node_modules/reshaped/dist/icons/Checkmark.js
var import_jsx_runtime67 = __toESM(require_jsx_runtime());
var IconCheckmark = () => {
  return (0, import_jsx_runtime67.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", stroke: "currentColor", fill: "none", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round", children: (0, import_jsx_runtime67.jsx)("polyline", { points: "20 6 9 17 4 12" }) });
};
var Checkmark_default = IconCheckmark;

// node_modules/reshaped/dist/components/Checkbox/Checkbox.js
import s54 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Checkbox/Checkbox.module.css";
var Checkbox = (props) => {
  var _a;
  const { children, value, onChange, onFocus, onBlur, indeterminate, className, attributes, inputAttributes } = props;
  const checkboxGroup = useCheckboxGroup();
  const formControl = useFormControl();
  const hasError = (formControl == null ? void 0 : formControl.hasError) || props.hasError || (checkboxGroup == null ? void 0 : checkboxGroup.hasError);
  const disabled = (formControl == null ? void 0 : formControl.disabled) || props.disabled || (checkboxGroup == null ? void 0 : checkboxGroup.disabled);
  const checked = checkboxGroup ? (_a = checkboxGroup.value) == null ? void 0 : _a.includes(value) : props.checked;
  const defaultChecked = checkboxGroup ? void 0 : props.defaultChecked;
  const name = checkboxGroup ? checkboxGroup.name : props.name;
  const inputRef = import_react49.default.useRef(null);
  const rootClassName = classNames(s54.root, className, hasError && s54["--error"], disabled && s54["--disabled"]);
  const handleChange = (event) => {
    if (!name)
      return;
    const { checked: checked2 } = event.target;
    const changeArgs = { name, value, checked: checked2, event };
    if (onChange)
      onChange(changeArgs);
    if (checkboxGroup == null ? void 0 : checkboxGroup.onChange)
      checkboxGroup.onChange(changeArgs);
  };
  useIsomorphicLayoutEffect_default(() => {
    inputRef.current.indeterminate = indeterminate || false;
  }, [indeterminate, checked]);
  return (0, import_jsx_runtime68.jsxs)("label", { ...attributes, className: rootClassName, children: [(0, import_jsx_runtime68.jsxs)("span", { className: s54.field, children: [(0, import_jsx_runtime68.jsx)(HiddenInput_default, { className: s54.input, type: "checkbox", checked, defaultChecked, name, disabled, value, onChange: handleChange, onFocus, onBlur, attributes: {
    ...inputAttributes,
    ref: inputRef
  } }), (0, import_jsx_runtime68.jsx)("div", { className: s54.decorator, children: (0, import_jsx_runtime68.jsx)(Icon_default, { svg: Checkmark_default, className: s54.icon }) })] }), children && (0, import_jsx_runtime68.jsx)("span", { className: s54.text, children })] });
};
var Checkbox_default = Checkbox;

// node_modules/reshaped/dist/components/Container/Container.js
var import_jsx_runtime69 = __toESM(require_jsx_runtime());
import s55 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Container/Container.module.css";
var Container = (props) => {
  const { children, padding = 4, width, align, justify, height, maxHeight, className, attributes } = props;
  const rootClassNames = classNames(s55.root, className);
  return (0, import_jsx_runtime69.jsx)(View_default, { attributes, className: rootClassNames, paddingInline: padding, align, justify, height, maxHeight, width, maxWidth: "100%", children });
};
var Container_default = Container;

// node_modules/reshaped/dist/components/FileUpload/FileUpload.js
var import_jsx_runtime70 = __toESM(require_jsx_runtime());

// node_modules/reshaped/dist/hooks/useToggle.js
var import_react50 = __toESM(require_react());
var useToggle = (defaultValue) => {
  const [active, setActive] = import_react50.default.useState(defaultValue || false);
  const activate = import_react50.default.useCallback(() => {
    setActive(true);
  }, []);
  const deactivate = import_react50.default.useCallback(() => {
    setActive(false);
  }, []);
  const toggle = import_react50.default.useCallback(() => {
    setActive((active2) => !active2);
  }, []);
  return import_react50.default.useMemo(() => ({ active, activate, deactivate, toggle }), [activate, deactivate, toggle, active]);
};
var useToggle_default = useToggle;

// node_modules/reshaped/dist/components/FileUpload/FileUpload.js
import s56 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/FileUpload/FileUpload.module.css";
var FileUploadTrigger = (props) => {
  const { children } = props;
  return (0, import_jsx_runtime70.jsx)("span", { className: s56.trigger, children });
};
var FileUpload = (props) => {
  const { name, children, height, className, attributes, inputAttributes, onChange } = props;
  const highlightToggle = useToggle_default();
  const rootClassNames = classNames(s56.root, highlightToggle.active && s56["--highlighted"], className);
  const handleDragOver = (event) => {
    var _a;
    event.preventDefault();
    (_a = attributes == null ? void 0 : attributes.onDragOver) == null ? void 0 : _a.call(attributes, event);
  };
  const handleDragEnter = (event) => {
    var _a;
    highlightToggle.activate();
    (_a = attributes == null ? void 0 : attributes.onDragEnter) == null ? void 0 : _a.call(attributes, event);
  };
  const handleDragLeave = (event) => {
    var _a;
    if (event.currentTarget.contains(event.relatedTarget))
      return;
    highlightToggle.deactivate();
    (_a = attributes == null ? void 0 : attributes.onDragLeave) == null ? void 0 : _a.call(attributes, event);
  };
  const handleDrop = (event) => {
    var _a;
    event.preventDefault();
    highlightToggle.deactivate();
    onChange == null ? void 0 : onChange({ name, value: Array.from(event.dataTransfer.files), event });
    (_a = attributes == null ? void 0 : attributes.onDrop) == null ? void 0 : _a.call(attributes, event);
  };
  const handleChange = (event) => {
    var _a;
    const nextValue = event.target.files;
    if (!nextValue)
      return;
    onChange == null ? void 0 : onChange({ name, event, value: Array.from(nextValue) });
    (_a = inputAttributes == null ? void 0 : inputAttributes.onChange) == null ? void 0 : _a.call(inputAttributes, event);
  };
  return (0, import_jsx_runtime70.jsx)(View_default, { className: rootClassNames, height, attributes: {
    ...attributes,
    onDragOver: handleDragOver,
    onDragEnter: handleDragEnter,
    onDragLeave: handleDragLeave,
    onDrop: handleDrop
  }, children: (0, import_jsx_runtime70.jsxs)(View_default, { as: "label", className: s56.triggerLayer, padding: 6, borderRadius: "medium", gap: 2, align: "center", justify: "center", textAlign: "center", animated: true, height: "100%", children: [(0, import_jsx_runtime70.jsx)(View_default.Item, { children }), (0, import_jsx_runtime70.jsx)(HiddenVisually_default, { children: (0, import_jsx_runtime70.jsx)("input", { ...inputAttributes, type: "file", className: s56.field, name, onChange: handleChange }) })] }) });
};
FileUpload.Trigger = FileUploadTrigger;
var FileUpload_default = FileUpload;

// node_modules/reshaped/dist/components/Hotkey/Hotkey.js
var import_jsx_runtime71 = __toESM(require_jsx_runtime());
import s57 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Hotkey/Hotkey.module.css";
var Hotkey = (props) => {
  const { children, active, className, attributes } = props;
  const rootClassNames = classNames(s57.root, active && s57["--active"], className);
  return (0, import_jsx_runtime71.jsx)(Text_default, { as: "kbd", variant: "caption-1", weight: "medium", color: "neutral-faded", className: rootClassNames, attributes, children });
};
var Hotkey_default = Hotkey;

// node_modules/reshaped/dist/components/Image/Image.js
var import_jsx_runtime72 = __toESM(require_jsx_runtime());
var import_react51 = __toESM(require_react());
import s58 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Image/Image.module.css";
var Image = (props) => {
  const { src, alt, width, height, onLoad, onError, fallback, displayMode = "cover", borderRadius, className, attributes, imageAttributes } = props;
  const [status, setStatus] = import_react51.default.useState("loading");
  const radiusStyles = radius_default(borderRadius);
  const widthStyles = width_default(width);
  const heightStyles = height_default(height);
  const baseClassNames = classNames(s58.root, radiusStyles == null ? void 0 : radiusStyles.classNames, widthStyles == null ? void 0 : widthStyles.classNames, heightStyles == null ? void 0 : heightStyles.classNames, displayMode && s58[`--display-mode-${displayMode}`], className);
  const imgClassNames = classNames(s58.image, baseClassNames);
  const fallbackClassNames = classNames(s58.fallback, baseClassNames);
  const isFallback = (status === "error" || !src) && !!fallback;
  const style = {
    ...attributes == null ? void 0 : attributes.style,
    ...widthStyles == null ? void 0 : widthStyles.variables,
    ...heightStyles == null ? void 0 : heightStyles.variables
  };
  const handleLoad = (e) => {
    setStatus("success");
    onLoad == null ? void 0 : onLoad(e);
  };
  const handleError = (e) => {
    setStatus("error");
    onError == null ? void 0 : onError(e);
  };
  import_react51.default.useEffect(() => {
    setStatus("loading");
  }, [src]);
  if (isFallback) {
    if (typeof fallback === "string") {
      return (0, import_jsx_runtime72.jsx)("img", { ...attributes, src: fallback, alt, role: alt ? void 0 : "presentation", className: fallbackClassNames, style });
    }
    return (0, import_jsx_runtime72.jsx)("div", { ...attributes, className: fallbackClassNames, style, children: fallback });
  }
  return (0, import_jsx_runtime72.jsx)("img", { ...attributes, ...imageAttributes, src, alt, role: alt ? void 0 : "presentation", onLoad: handleLoad, onError: handleError, className: imgClassNames, style });
};
var Image_default = Image;

// node_modules/reshaped/dist/components/Modal/Modal.js
var import_jsx_runtime74 = __toESM(require_jsx_runtime());
var import_react55 = __toESM(require_react());

// node_modules/reshaped/dist/hooks/useResponsiveClientValue.js
var import_react52 = __toESM(require_react());
var breakpoints = {
  m: 660,
  l: 900,
  xl: 1280
};
var mediaQueries = {
  s: `(max-width: ${breakpoints.m - 1}px)`,
  m: `(min-width: ${breakpoints.m}px) and (max-width: ${breakpoints.l - 1}px)`,
  l: `(min-width: ${breakpoints.l}px) and (max-width: ${breakpoints.xl - 1}px)`,
  xl: `(min-width: ${breakpoints.xl}px)`
};
var useResponsiveClientValue = (value) => {
  const { defaultViewport } = import_react52.default.useContext(SingletonEnvironmentContext);
  const [viewport, setViewport] = import_react52.default.useState(defaultViewport);
  useIsomorphicLayoutEffect_default(() => {
    const viewports = Object.keys(mediaQueries);
    const matchers = viewports.map((viewport2) => {
      const mq = window.matchMedia(mediaQueries[viewport2]);
      return { mq, handler: () => mq.matches && setViewport(viewport2) };
    });
    matchers.forEach(({ handler, mq }) => {
      handler();
      mq.addEventListener("change", handler);
    });
    return () => {
      matchers.forEach(({ handler, mq }) => {
        mq.removeEventListener("change", handler);
      });
    };
  }, []);
  if (typeof value !== "object" || value === null || !("s" in value)) {
    return value;
  }
  if (viewport === "xl")
    return value.xl ?? value.l ?? value.m ?? value.s;
  if (viewport === "l")
    return value.l ?? value.m ?? value.s;
  if (viewport === "m")
    return value.m ?? value.s;
  return value.s;
};
var useResponsiveClientValue_default = useResponsiveClientValue;

// node_modules/reshaped/dist/components/Overlay/Overlay.js
var import_jsx_runtime73 = __toESM(require_jsx_runtime());
var import_react54 = __toESM(require_react());

// node_modules/reshaped/dist/hooks/useScrollLock.js
var import_react53 = __toESM(require_react());
var getScrollbarWidth = /* @__PURE__ */ (() => {
  let scrollbarWidth;
  return () => {
    if (scrollbarWidth)
      return scrollbarWidth;
    const scrollDiv = document.createElement("div");
    scrollDiv.style.position = "absolute";
    scrollDiv.style.top = "-9999px";
    scrollDiv.style.width = "50px";
    scrollDiv.style.height = "50px";
    scrollDiv.style.overflow = "scroll";
    document.body.appendChild(scrollDiv);
    scrollbarWidth = scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;
    document.body.removeChild(scrollDiv);
    return scrollbarWidth;
  };
})();
var useScrollLock = () => {
  const [locked, setLocked] = import_react53.default.useState(false);
  const overflowStyleRef = import_react53.default.useRef();
  const isOverflowingRef = import_react53.default.useRef(false);
  const lockScroll = import_react53.default.useCallback(() => {
    const targetEl = document.body;
    const rect = targetEl.getBoundingClientRect();
    isOverflowingRef.current = rect.left + rect.right < window.innerWidth;
    overflowStyleRef.current = targetEl.style.overflow;
    targetEl.style.overflow = "hidden";
    if (isOverflowingRef.current) {
      const scrollBarWidth = getScrollbarWidth();
      targetEl.style.paddingRight = `${scrollBarWidth}px`;
    }
    setLocked(true);
  }, [setLocked, isOverflowingRef, overflowStyleRef]);
  const unlockScroll = import_react53.default.useCallback(() => {
    const targetEl = document.body;
    targetEl.style.overflow = overflowStyleRef.current || "";
    if (isOverflowingRef.current)
      targetEl.style.paddingRight = "";
    setLocked(false);
  }, [setLocked, isOverflowingRef, overflowStyleRef]);
  return { scrollLocked: locked, lockScroll, unlockScroll };
};
var useScrollLock_default = useScrollLock;

// node_modules/reshaped/dist/components/Overlay/Overlay.js
import s59 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Overlay/Overlay.module.css";
var Overlay = (props) => {
  const { active, children, transparent, blurred, onClose, onOpen, disableCloseOnClick, className, attributes } = props;
  const onCloseRef = useHandlerRef_default(onClose);
  const onOpenRef = useHandlerRef_default(onOpen);
  const clickThrough = transparent === true;
  const opacity = clickThrough ? 0 : (1 - (transparent || 0)) * 0.7;
  const [mounted, setMounted] = import_react54.default.useState(false);
  const [animated, setAnimated] = import_react54.default.useState(false);
  const contentRef = import_react54.default.useRef(null);
  const isMouseDownValidRef = import_react54.default.useRef(false);
  const { lockScroll, unlockScroll } = useScrollLock_default();
  const { active: rendered, activate: render, deactivate: remove } = useToggle_default(active || false);
  const { active: visible, activate: show, deactivate: hide } = useToggle_default(active || false);
  const isDismissible = useIsDismissible_default(active, contentRef);
  const rootClassNames = classNames(s59.root, visible && s59["--visible"], clickThrough && s59["--click-through"], blurred && s59["--blurred"], animated && s59["--animated"], className);
  const isInsideChild = (el) => {
    if (!contentRef.current)
      return;
    const firstChild = contentRef.current.firstChild;
    if (!firstChild)
      return;
    return firstChild.contains(el);
  };
  const close = import_react54.default.useCallback((reason) => {
    var _a;
    if (!visible || !isDismissible())
      return;
    (_a = onCloseRef.current) == null ? void 0 : _a.call(onCloseRef, { reason });
  }, [visible, isDismissible, onCloseRef]);
  const handleMouseDown = (event) => {
    isMouseDownValidRef.current = !isInsideChild(event.target);
  };
  const handleMouseUp = (event) => {
    const isMouseUpValid = !isInsideChild(event.target);
    const shouldClose = isMouseDownValidRef.current && isMouseUpValid && !clickThrough;
    if (!shouldClose || disableCloseOnClick)
      return;
    close("overlay-click");
  };
  const handleTransitionEnd = (e) => {
    if (e.propertyName !== "opacity" || e.target !== e.currentTarget)
      return;
    setAnimated(false);
    if (visible)
      return;
    if (!clickThrough)
      unlockScroll();
    remove();
  };
  useHotkeys_default({ Escape: () => close("escape-key") }, [close]);
  import_react54.default.useEffect(() => {
    setAnimated(true);
    if (active && !rendered)
      render();
    if (!active && rendered)
      hide();
  }, [active, render, hide, rendered]);
  import_react54.default.useEffect(() => {
    if (!rendered)
      return;
    if (!clickThrough)
      lockScroll();
    onNextFrame(() => {
      show();
    });
  }, [rendered, show, lockScroll, clickThrough]);
  import_react54.default.useEffect(() => {
    var _a;
    if (!rendered || !contentRef.current)
      return;
    const trapFocus = new TrapFocus_default(contentRef.current);
    trapFocus.trap({
      initialFocusEl: contentRef.current.querySelector("[role=dialog][tabindex='-1']")
    });
    (_a = onOpenRef.current) == null ? void 0 : _a.call(onOpenRef);
    return () => trapFocus.release();
  }, [rendered, onOpenRef]);
  import_react54.default.useEffect(() => {
    return () => {
      if (!clickThrough)
        unlockScroll();
    };
  }, [unlockScroll, clickThrough]);
  useIsomorphicLayoutEffect_default(() => {
    setMounted(true);
  }, []);
  if (!rendered || !mounted)
    return null;
  return (0, import_jsx_runtime73.jsx)(Portal_default, { children: (0, import_jsx_runtime73.jsx)(Portal_default.Scope, { children: (ref) => (0, import_jsx_runtime73.jsx)("div", { ...attributes, ref, style: { "--rs-overlay-opacity": opacity }, role: "button", tabIndex: -1, className: rootClassNames, onMouseDown: handleMouseDown, onMouseUp: handleMouseUp, onTransitionEnd: handleTransitionEnd, children: (0, import_jsx_runtime73.jsx)("div", { className: s59.wrapper, children: (0, import_jsx_runtime73.jsx)("div", { className: s59.inner, children: (0, import_jsx_runtime73.jsx)("div", { className: s59.content, ref: contentRef, children: typeof children === "function" ? children({ active: visible }) : children }) }) }) }) }) });
};
var Overlay_default = Overlay;

// node_modules/reshaped/dist/components/Modal/Modal.js
import s60 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Modal/Modal.module.css";
var DRAG_THRESHOLD = 32;
var DRAG_OPPOSITE_THRESHOLD = 100;
var DRAG_EDGE_BOUNDARY = 32;
var Context = import_react55.default.createContext({
  id: "",
  titleMounted: false,
  setTitleMounted: () => {
  },
  subtitleMounted: false,
  setSubtitleMounted: () => {
  }
});
var useModal = () => import_react55.default.useContext(Context);
var ModalTitle = (props) => {
  const { children } = props;
  const { id, setTitleMounted } = useModal();
  import_react55.default.useEffect(() => {
    setTitleMounted(true);
    return () => setTitleMounted(false);
  }, [setTitleMounted]);
  return (0, import_jsx_runtime74.jsx)(Text_default, { variant: "featured-3", weight: "bold", attributes: { id: `${id}-title` }, children });
};
var ModalSubtitle = (props) => {
  const { children } = props;
  const { id, setSubtitleMounted } = useModal();
  import_react55.default.useEffect(() => {
    setSubtitleMounted(true);
    return () => setSubtitleMounted(false);
  }, [setSubtitleMounted]);
  return (0, import_jsx_runtime74.jsx)(Text_default, { variant: "body-3", color: "neutral-faded", attributes: { id: `${id}-subtitle` }, children });
};
var Modal = (props) => {
  const { children, onClose, onOpen, active, size, padding = 4, position = "center", overflow, transparentOverlay, blurredOverlay, ariaLabel, autoFocus = true, disableSwipeGesture, disableCloseOnOutsideClick, overlayClassName, className, attributes } = props;
  const onCloseRef = useHandlerRef_default(onClose);
  const id = useElementId_default();
  const clientPosition = useResponsiveClientValue_default(position);
  const [titleMounted, setTitleMounted] = import_react55.default.useState(false);
  const [subtitleMounted, setSubtitleMounted] = import_react55.default.useState(false);
  const [dragging, setDragging] = import_react55.default.useState(false);
  const internalRootRef = import_react55.default.useRef(null);
  const rootRef = (attributes == null ? void 0 : attributes.ref) || internalRootRef;
  const dragStartCoordinatesRef = import_react55.default.useRef({ x: 0, y: 0 });
  const dragLastCoordinateRef = import_react55.default.useRef(0);
  const dragDistanceRef = import_react55.default.useRef(0);
  const dragDirectionRef = import_react55.default.useRef(0);
  const [dragDistance, setDragDistance] = import_react55.default.useState(0);
  const [hideProgress, setHideProgress] = import_react55.default.useState(0);
  const paddingStyles = padding_default(padding);
  const value = import_react55.default.useMemo(() => ({
    titleMounted,
    setTitleMounted,
    subtitleMounted,
    setSubtitleMounted,
    id
  }), [id, subtitleMounted, titleMounted]);
  const resetDragData = () => {
    dragStartCoordinatesRef.current = { x: 0, y: 0 };
    dragLastCoordinateRef.current = 0;
    dragDirectionRef.current = 0;
    setDragDistance(0);
  };
  const handleDragStart = (e) => {
    var _a;
    if (disableSwipeGesture)
      return;
    if ((_a = window.getSelection()) == null ? void 0 : _a.toString())
      return;
    let currentEl = e.target;
    const rootEl = rootRef.current;
    while (currentEl && (currentEl === rootEl || (rootEl == null ? void 0 : rootEl.contains(currentEl)))) {
      if (currentEl.scrollTop !== 0 || currentEl.scrollLeft !== 0)
        return;
      if (currentEl.matches("input,textarea"))
        return;
      currentEl = currentEl ? currentEl.parentElement : null;
    }
    if (clientPosition === "start" && e.targetTouches[0].clientX < DRAG_EDGE_BOUNDARY)
      return;
    disableUserSelect();
    setDragging(true);
  };
  const handleTransitionEnd = (e) => {
    if (active)
      return;
    if (e.propertyName !== "transform")
      return;
    if (e.currentTarget !== e.target)
      return;
    resetDragData();
  };
  import_react55.default.useEffect(() => {
    if (!dragging)
      return;
    const handleDragEnd = () => {
      var _a;
      enableUserSelect();
      setDragging(false);
      const shouldClose = clientPosition === "start" ? dragDirectionRef.current < 0 : dragDirectionRef.current > 0;
      if (Math.abs(dragDistanceRef.current) > DRAG_THRESHOLD && shouldClose) {
        (_a = onCloseRef.current) == null ? void 0 : _a.call(onCloseRef, { reason: "drag" });
      } else {
        resetDragData();
      }
    };
    const handleDrag = (e) => {
      var _a, _b;
      if (!dragging || clientPosition === "center")
        return;
      if (((_a = rootRef.current) == null ? void 0 : _a.scrollTop) !== 0 || ((_b = rootRef.current) == null ? void 0 : _b.scrollLeft) !== 0)
        return;
      const target = e.targetTouches[0];
      const coordinate = { x: target.clientX, y: target.clientY };
      const key = clientPosition === "bottom" ? "y" : "x";
      const oppositeKey = clientPosition === "bottom" ? "x" : "y";
      if (!dragStartCoordinatesRef.current[key]) {
        dragStartCoordinatesRef.current = coordinate;
        dragLastCoordinateRef.current = coordinate[key];
      }
      const next = Math.abs(coordinate[key] - dragStartCoordinatesRef.current[key]);
      const nextPerpendicular = Math.abs(coordinate[oppositeKey] - dragStartCoordinatesRef.current[oppositeKey]);
      if (position !== "bottom" && (next < nextPerpendicular || nextPerpendicular > DRAG_OPPOSITE_THRESHOLD)) {
        dragLastCoordinateRef.current = coordinate[key];
        return;
      }
      dragDirectionRef.current = coordinate[key] - dragLastCoordinateRef.current;
      dragLastCoordinateRef.current = coordinate[key];
      setDragDistance((prev) => clientPosition === "start" ? Math.min(0, prev + dragDirectionRef.current) : Math.max(0, prev + dragDirectionRef.current));
    };
    document.addEventListener("touchmove", handleDrag, { passive: true });
    document.addEventListener("touchend", handleDragEnd, { passive: true });
    return () => {
      document.removeEventListener("touchmove", handleDrag);
      document.removeEventListener("touchend", handleDragEnd);
    };
  }, [dragging, clientPosition, onCloseRef, position, rootRef]);
  import_react55.default.useEffect(() => {
    const rootEl = rootRef.current;
    if (!rootEl || !clientPosition)
      return;
    const isInline = ["start", "end"].includes(clientPosition);
    const size2 = isInline ? rootEl.clientWidth : rootEl.clientHeight;
    const progress = Math.abs(dragDistance) / size2;
    setHideProgress(progress / 2);
    dragDistanceRef.current = dragDistance;
  }, [dragDistance, clientPosition, rootRef]);
  return (0, import_jsx_runtime74.jsx)(Overlay_default, { onClose, onOpen, disableCloseOnClick: disableCloseOnOutsideClick, active, transparent: transparentOverlay || hideProgress, blurred: blurredOverlay, className: overlayClassName, attributes: {
    onTouchStart: handleDragStart
  }, children: ({ active: active2 }) => {
    const rootClassNames = classNames(s60.root, className, paddingStyles == null ? void 0 : paddingStyles.classNames, active2 && s60["--active"], dragging && s60["--dragging"], overflow && s60[`--overflow-${overflow}`], responsiveClassNames(s60, "--position", position));
    return (0, import_jsx_runtime74.jsx)(Context.Provider, { value, children: (0, import_jsx_runtime74.jsx)("div", { ...attributes, style: {
      ...paddingStyles == null ? void 0 : paddingStyles.variables,
      ...responsiveVariables("--rs-modal-size", size),
      "--rs-modal-drag": Math.abs(dragDistance) < DRAG_THRESHOLD ? "0px" : `${dragDistance + DRAG_THRESHOLD * (clientPosition === "start" ? 1 : -1)}px`
    }, "aria-labelledby": titleMounted ? `${id}-title` : void 0, "aria-describedby": subtitleMounted ? `${id}-subtitle` : void 0, "aria-label": ariaLabel || (attributes == null ? void 0 : attributes["aria-label"]), className: rootClassNames, "aria-modal": "true", role: "dialog", tabIndex: !autoFocus ? -1 : void 0, ref: rootRef, onTransitionEnd: handleTransitionEnd, children }) });
  } });
};
Modal.Title = ModalTitle;
Modal.Subtitle = ModalSubtitle;
var Modal_default = Modal;

// node_modules/reshaped/dist/components/Pagination/Pagination.js
var import_jsx_runtime77 = __toESM(require_jsx_runtime());

// node_modules/reshaped/dist/components/Pagination/PaginationControlled.js
var import_jsx_runtime75 = __toESM(require_jsx_runtime());
import s61 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Pagination/Pagination.module.css";
var PaginationControlled = (props) => {
  const { total, page: selectedPage = 1, onChange, pageAriaLabel, previousAriaLabel, nextAriaLabel, className, attributes } = props;
  const selectionRadius = 1;
  const edgeRadius = 1;
  const pages = [];
  const minLengthToSplit = (edgeRadius + 1) * 2 + selectionRadius * 2 + 1;
  const hasHead = total > minLengthToSplit && selectedPage - selectionRadius > edgeRadius + 2;
  const hasTail = total > minLengthToSplit && selectedPage + selectionRadius < total - edgeRadius;
  let count = selectionRadius * 2 + 1;
  if (!hasHead)
    count += edgeRadius + 1;
  if (!hasTail)
    count += edgeRadius + 1;
  const selectionStart = hasHead ? Math.min(total - count + 1, Math.max(1, selectedPage - selectionRadius)) : 1;
  const selectionEnd = hasTail ? Math.min(selectionStart + count - 1, total) : total;
  if (hasHead)
    pages.push(...range(1, edgeRadius), null);
  pages.push(...range(selectionStart, selectionEnd));
  if (hasTail)
    pages.push(null, ...range(total - edgeRadius + 1, total));
  const changePage = (page) => {
    const resolvedValue = Math.min(total, Math.max(1, page));
    onChange == null ? void 0 : onChange({ page: resolvedValue });
  };
  return (0, import_jsx_runtime75.jsxs)(View_default, { direction: "row", align: "center", gap: 1, className, attributes, children: [(0, import_jsx_runtime75.jsx)(Button_default, { variant: "ghost", size: "small", icon: ChevronLeft_default, onClick: () => changePage(selectedPage - 1), disabled: selectedPage === 1, attributes: { "aria-label": previousAriaLabel } }), pages.map((page, index) => {
    if (page === null) {
      return (0, import_jsx_runtime75.jsx)(View_default, { width: 7, align: "center", children: "..." }, `dots-${index}`);
    }
    return (0, import_jsx_runtime75.jsx)(Button_default, { size: "small", variant: page === selectedPage ? "solid" : "ghost", color: page === selectedPage ? "primary" : "neutral", onClick: () => changePage(page), attributes: {
      "aria-label": pageAriaLabel == null ? void 0 : pageAriaLabel({ page }),
      "aria-current": page === selectedPage
    }, className: s61.page, children: page }, index);
  }), (0, import_jsx_runtime75.jsx)(Button_default, { variant: "ghost", size: "small", className: s61.page, icon: ChevronRight_default, onClick: () => changePage(selectedPage + 1), disabled: selectedPage === total, attributes: { "aria-label": nextAriaLabel } })] });
};
var PaginationControlled_default = PaginationControlled;

// node_modules/reshaped/dist/components/Pagination/PaginationUncontrolled.js
var import_jsx_runtime76 = __toESM(require_jsx_runtime());
var import_react56 = __toESM(require_react());
var PaginationUncontrolled = (props) => {
  const { defaultPage = 1, onChange, ...controlledProps } = props;
  const [page, setPage] = import_react56.default.useState(defaultPage || 1);
  const handleChange = (args) => {
    setPage(args.page);
    onChange == null ? void 0 : onChange(args);
  };
  return (0, import_jsx_runtime76.jsx)(PaginationControlled_default, { ...controlledProps, onChange: handleChange, page });
};
var PaginationUncontrolled_default = PaginationUncontrolled;

// node_modules/reshaped/dist/components/Pagination/Pagination.js
var Pagination = (props) => {
  const { page } = props;
  if (page !== void 0)
    return (0, import_jsx_runtime77.jsx)(PaginationControlled_default, { ...props });
  return (0, import_jsx_runtime77.jsx)(PaginationUncontrolled_default, { ...props });
};
var Pagination_default = Pagination;

// node_modules/reshaped/dist/components/PinField/PinField.js
var import_jsx_runtime80 = __toESM(require_jsx_runtime());

// node_modules/reshaped/dist/components/PinField/PinFieldControlled.js
var import_jsx_runtime78 = __toESM(require_jsx_runtime());
var import_react57 = __toESM(require_react());

// node_modules/reshaped/dist/components/PinField/PinField.constants.js
var regExpNumericChar = "\\d";
var regExpAlphabeticChar = "[a-zA-Z]";
var regExpAlphaNumericChar = `(${regExpNumericChar}|${regExpAlphabeticChar})`;

// node_modules/reshaped/dist/components/PinField/PinFieldControlled.js
import s62 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/PinField/PinField.module.css";
var sizeMap = {
  medium: 9,
  large: 12,
  xlarge: 14
};
var patternMap = {
  numeric: regExpNumericChar,
  alphabetic: regExpAlphabeticChar,
  alphanumeric: regExpAlphaNumericChar
};
var PinFieldControlled = (props) => {
  const { valueLength = 4, value, onChange, name, pattern = "numeric", size = "medium", variant = "outline", className, attributes, inputAttributes } = props;
  const patternRegexp = patternMap[pattern];
  const responsiveInputSize = responsivePropDependency(size, (value2) => sizeMap[value2]);
  const responsiveTextVariant = responsivePropDependency(size, (value2) => value2 === "medium" ? "body-3" : "body-2");
  const responsiveRadius = responsivePropDependency(size, (value2) => value2 === "xlarge" ? "medium" : "small");
  const [focusedIndex, setFocusedIndex] = import_react57.default.useState(null);
  const formControl = useFormControl();
  const modeRef = import_react57.default.useRef(value.length === valueLength ? "edit" : "type");
  const inputRef = import_react57.default.useRef(null);
  const nodes = [];
  const syncSelection = import_react57.default.useCallback((index) => {
    const el = inputRef.current;
    if (!el || el.selectionStart === null)
      return;
    const mode = modeRef.current;
    const selectionStart = index ?? el.selectionStart ?? 0;
    const nextSelectionStart = Math.min(mode === "type" ? el.value.length : el.value.length - 1, Math.max(0, selectionStart));
    if (modeRef.current === "type") {
      el.selectionStart = nextSelectionStart;
      el.selectionEnd = nextSelectionStart;
    } else {
      el.selectionStart = nextSelectionStart;
      el.selectionEnd = nextSelectionStart + 1;
    }
    setFocusedIndex(Math.min(el.selectionStart, valueLength - 1));
  }, [valueLength]);
  useHotkeys_default({
    [`${LEFT},${UP}`]: () => {
      onNextFrame(() => {
        const el = inputRef.current;
        if (!el || el.selectionStart === null)
          return;
        const mode = modeRef.current;
        const nextMode = !value.length ? "type" : "edit";
        modeRef.current = nextMode;
        syncSelection(mode === "type" && nextMode === "edit" ? el.selectionStart : el.selectionStart - 1);
      });
    },
    [`${RIGHT},${DOWN}`]: () => {
      onNextFrame(() => {
        const el = inputRef.current;
        if (!el || el.selectionStart === null)
          return;
        const nextMode = el.selectionStart === value.length && el.selectionStart !== valueLength ? "type" : "edit";
        modeRef.current = nextMode;
        syncSelection(el.selectionStart);
      });
    }
  }, [value, syncSelection, valueLength], {
    ref: inputRef
  });
  const handleFocus = () => {
    syncSelection(value.length);
  };
  const handleBlur = () => {
    setFocusedIndex(null);
  };
  const handlePaste = (e) => {
    if (focusedIndex === null || !inputRef.current)
      return;
    const data = e.clipboardData.getData("text");
    const updatedValue = value.slice(0, focusedIndex) + value.slice(focusedIndex + data.length);
    inputRef.current.value = updatedValue;
    inputRef.current.selectionEnd = focusedIndex;
    inputRef.current.selectionStart = inputRef.current.selectionStart;
  };
  const handleInput = (event) => {
    const el = event.target;
    const nextValue = el.value;
    const matcher = new RegExp(`^${patternRegexp}+$`);
    if (nextValue && !nextValue.match(matcher))
      return;
    if (el.selectionStart === null)
      return;
    const nextMode = (
      // Finished editing the last character
      nextValue.length === valueLength || // Staying inside the sequence
      nextValue.length > el.selectionStart ? "edit" : "type"
    );
    modeRef.current = nextMode;
    onChange == null ? void 0 : onChange({ event, name, value: nextValue });
    onNextFrame(() => {
      syncSelection();
    });
  };
  const handleItemClick = (event, index) => {
    if (!inputRef.current)
      return;
    event.preventDefault();
    inputRef.current.focus();
    modeRef.current = index >= value.length ? "type" : "edit";
    syncSelection(index);
  };
  for (let i = 0; i < valueLength; i++) {
    nodes.push((0, import_jsx_runtime78.jsx)(View_default, { height: responsiveInputSize, width: responsiveInputSize, borderRadius: responsiveRadius, borderColor: variant === "faded" ? "transparent" : "neutral", backgroundColor: variant === "faded" ? "neutral-faded" : "elevation-base", align: "center", justify: "center", className: [s62.item, focusedIndex === i && s62["item--focused"]], attributes: {
      onMouseDown: (e) => {
        handleItemClick(e, i);
      },
      onTouchStart: (e) => {
        handleItemClick(e, i);
      }
    }, children: value[i] && (0, import_jsx_runtime78.jsx)(Text_default, { variant: responsiveTextVariant, children: value[i] }) }, i));
  }
  return (0, import_jsx_runtime78.jsxs)(View_default, { gap: 2, direction: "row", className: [s62.root, className], attributes, children: [nodes, (0, import_jsx_runtime78.jsx)("input", { ...inputAttributes, ...formControl.attributes, type: "text", className: s62.input, onFocus: handleFocus, onBlur: handleBlur, onPaste: handlePaste, onInput: handleInput, value, name, maxLength: valueLength, ref: inputRef, autoComplete: (inputAttributes == null ? void 0 : inputAttributes.autoComplete) || "one-time-code", inputMode: pattern === "numeric" ? "numeric" : void 0, pattern: `${patternRegexp}{${valueLength}}` })] });
};
var PinFieldControlled_default = PinFieldControlled;

// node_modules/reshaped/dist/components/PinField/PinFieldUncontrolled.js
var import_jsx_runtime79 = __toESM(require_jsx_runtime());
var import_react58 = __toESM(require_react());
var PinFieldUncontrolled = (props) => {
  const { defaultValue, onChange, ...controlledProps } = props;
  const [value, setValue] = import_react58.default.useState(defaultValue || "");
  const handleChange = (args) => {
    setValue(args.value);
    onChange == null ? void 0 : onChange(args);
  };
  return (0, import_jsx_runtime79.jsx)(PinFieldControlled_default, { ...controlledProps, value, onChange: handleChange });
};
var PinFieldUncontrolled_default = PinFieldUncontrolled;

// node_modules/reshaped/dist/components/PinField/PinField.js
var PinField = (props) => {
  const { value } = props;
  if (value !== void 0)
    return (0, import_jsx_runtime80.jsx)(PinFieldControlled_default, { ...props });
  return (0, import_jsx_runtime80.jsx)(PinFieldUncontrolled_default, { ...props });
};
var PinField_default = PinField;

// node_modules/reshaped/dist/components/Progress/Progress.js
var import_jsx_runtime81 = __toESM(require_jsx_runtime());
import s63 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Progress/Progress.module.css";
var Progress = (props) => {
  const { value = 0, min = 0, max = 100, color = "primary", size = "medium", duration, className, attributes } = props;
  const rootClassNames = classNames(s63.root, className, color && s63[`--color-${color}`], size && s63[`--size-${size}`], !!duration && s63["--duration"]);
  const total = max - min;
  const normalizedValue = value - min;
  const resolvedValue = Math.max(min, Math.min(max, normalizedValue));
  const width = resolvedValue / total * 100;
  const translate = `${width - 100}%`;
  return (0, import_jsx_runtime81.jsx)("div", { role: "progressbar", ...attributes, className: rootClassNames, "aria-valuemax": max, "aria-valuemin": min, "aria-valuenow": value, children: (0, import_jsx_runtime81.jsx)("div", { className: s63.value, style: {
    "--rs-progress-value": translate,
    "--rs-progress-duration": duration ? `${duration}ms` : void 0
  } }) });
};
var Progress_default = Progress;

// node_modules/reshaped/dist/components/Radio/Radio.js
var import_jsx_runtime85 = __toESM(require_jsx_runtime());

// node_modules/reshaped/dist/components/RadioGroup/RadioGroup.js
var import_jsx_runtime84 = __toESM(require_jsx_runtime());

// node_modules/reshaped/dist/components/RadioGroup/RadioGroupControlled.js
var import_jsx_runtime82 = __toESM(require_jsx_runtime());

// node_modules/reshaped/dist/components/RadioGroup/RadioGroup.context.js
var import_react59 = __toESM(require_react());
var RadioContext = import_react59.default.createContext(null);
var useRadioGroup = () => import_react59.default.useContext(RadioContext);
var RadioGroup_context_default = RadioContext;

// node_modules/reshaped/dist/components/RadioGroup/RadioGroupControlled.js
var RadioGroupControlled = (props) => {
  const { onChange, name, disabled, value, children, hasError } = props;
  const handleChange = ({ event, value: value2 }) => {
    if (!value2)
      return;
    if (onChange)
      onChange({ name, value: value2, event });
  };
  return (0, import_jsx_runtime82.jsx)(RadioGroup_context_default.Provider, { value: { onChange: handleChange, disabled, value, name, hasError }, children });
};
var RadioGroupControlled_default = RadioGroupControlled;

// node_modules/reshaped/dist/components/RadioGroup/RadioGroupUncontrolled.js
var import_jsx_runtime83 = __toESM(require_jsx_runtime());
var import_react60 = __toESM(require_react());
var RadioGroupUncontrolled = (props) => {
  const { defaultValue, onChange } = props;
  const [value, setValue] = import_react60.default.useState(defaultValue || null);
  const handleChange = (args) => {
    if (!args.value)
      return;
    setValue(args.value);
    if (onChange)
      onChange(args);
  };
  return (0, import_jsx_runtime83.jsx)(RadioGroupControlled_default, { ...props, value, defaultValue: void 0, onChange: handleChange });
};
var RadioGroupUncontrolled_default = RadioGroupUncontrolled;

// node_modules/reshaped/dist/components/RadioGroup/RadioGroup.js
var RadioGroup = (props) => {
  const { value } = props;
  if (value !== void 0)
    return (0, import_jsx_runtime84.jsx)(RadioGroupControlled_default, { ...props });
  return (0, import_jsx_runtime84.jsx)(RadioGroupUncontrolled_default, { ...props });
};
var RadioGroup_default = RadioGroup;

// node_modules/reshaped/dist/components/Radio/Radio.js
import s64 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Radio/Radio.module.css";
var Radio = (props) => {
  const { children, value, onChange, onFocus, onBlur, className, attributes, inputAttributes } = props;
  const formControl = useFormControl();
  const radioGroup = useRadioGroup();
  const hasError = (formControl == null ? void 0 : formControl.hasError) || props.hasError || (radioGroup == null ? void 0 : radioGroup.hasError);
  const disabled = (formControl == null ? void 0 : formControl.disabled) || props.disabled || (radioGroup == null ? void 0 : radioGroup.disabled);
  const checked = radioGroup ? radioGroup.value === value : props.checked;
  const defaultChecked = radioGroup ? void 0 : props.defaultChecked;
  const name = radioGroup ? radioGroup.name : props.name;
  const rootClassName = classNames(s64.root, className, hasError && s64["--error"], disabled && s64["--disabled"]);
  const handleChange = (event) => {
    if (!name)
      return;
    const { checked: checked2 } = event.target;
    const changeArgs = { name, value, checked: checked2, event };
    if (onChange)
      onChange(changeArgs);
    if (radioGroup == null ? void 0 : radioGroup.onChange)
      radioGroup.onChange(changeArgs);
  };
  return (0, import_jsx_runtime85.jsxs)("label", { ...attributes, className: rootClassName, children: [(0, import_jsx_runtime85.jsxs)("span", { className: s64.field, children: [(0, import_jsx_runtime85.jsx)(HiddenInput_default, { className: s64.input, type: "radio", checked, defaultChecked, name, disabled, value, onChange: handleChange, onFocus, onBlur, attributes: inputAttributes }), (0, import_jsx_runtime85.jsx)("div", { className: s64.decorator })] }), children && (0, import_jsx_runtime85.jsx)("span", { className: s64.text, children })] });
};
var Radio_default = Radio;

// node_modules/reshaped/dist/components/Reshaped/Reshaped.js
var import_jsx_runtime90 = __toESM(require_jsx_runtime());

// node_modules/reshaped/dist/components/Toast/useToast.js
var import_react62 = __toESM(require_react());

// node_modules/reshaped/dist/components/Toast/Toast.context.js
var import_react61 = __toESM(require_react());

// node_modules/reshaped/dist/components/Toast/Toast.constants.js
var timeouts = {
  short: 4e3,
  long: 8e3
};
var positions = [
  "top-start",
  "top",
  "top-end",
  "bottom-start",
  "bottom",
  "bottom-end"
];
var defaultPositionData = positions.reduce((acc, cur) => ({ [cur]: [], ...acc }), {});
var defaultContextData = {
  queues: defaultPositionData,
  id: "",
  show: () => {
  },
  hide: () => {
  },
  remove: () => {
  },
  add: () => ""
};

// node_modules/reshaped/dist/components/Toast/Toast.context.js
var context = import_react61.default.createContext(defaultContextData);
var Toast_context_default = context;

// node_modules/reshaped/dist/components/Toast/useToast.js
var useToast = () => {
  const { add, hide, id } = import_react62.default.useContext(Toast_context_default);
  return import_react62.default.useMemo(() => ({ show: add, hide, id }), [add, hide, id]);
};
var useToast_default = useToast;

// node_modules/reshaped/dist/components/Toast/ToastProvider.js
var import_jsx_runtime89 = __toESM(require_jsx_runtime());
var import_react66 = __toESM(require_react());

// node_modules/reshaped/dist/components/Toast/ToastRegion.js
var import_jsx_runtime88 = __toESM(require_jsx_runtime());
var import_react65 = __toESM(require_react());

// node_modules/reshaped/dist/components/Toast/ToastContainer.js
var import_jsx_runtime87 = __toESM(require_jsx_runtime());
var import_react64 = __toESM(require_react());

// node_modules/reshaped/dist/components/Toast/Toast.js
var import_react63 = __toESM(require_react());
var import_jsx_runtime86 = __toESM(require_jsx_runtime());
import s65 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Toast/Toast.module.css";
var Toast = (props) => {
  const { size = "small", text, children, color = "inverted", icon, title, actionsSlot, startSlot, collapsed, className, attributes } = props;
  let backgroundColor = color === "inverted" || color === "neutral" ? "elevation-overlay" : color;
  if (color === "neutral")
    backgroundColor = collapsed ? "neutral" : "elevation-overlay";
  const borderColor = color === "neutral" ? "neutral-faded" : "transparent";
  const textTagName = size === "small" ? "span" : "div";
  const isLarge = size === "large";
  let actions = [];
  if (actionsSlot) {
    actions = Array.isArray(actionsSlot) ? actionsSlot : [actionsSlot];
  }
  const textContent = (title || text) && (0, import_jsx_runtime86.jsxs)(import_jsx_runtime86.Fragment, { children: [title && (0, import_jsx_runtime86.jsxs)(Text_default, { variant: "body-3", weight: "bold", as: textTagName, children: [title, " "] }), (0, import_jsx_runtime86.jsx)(Text_default, { variant: "body-3", as: textTagName, children: text })] });
  const toastNode = (0, import_jsx_runtime86.jsxs)(View_default, { backgroundColor, borderColor, padding: 4, borderRadius: "medium", animated: true, direction: "row", gap: 3, align: isLarge ? "start" : "center", className: [s65.toast, className], attributes, children: [icon && (0, import_jsx_runtime86.jsx)(Icon_default, { size: 5, svg: icon, className: s65.icon }), startSlot && !icon && (0, import_jsx_runtime86.jsx)(View_default.Item, { children: startSlot }), (0, import_jsx_runtime86.jsx)(View_default.Item, { grow: true, children: (0, import_jsx_runtime86.jsxs)(View_default, { direction: isLarge ? "column" : "row", align: isLarge ? "start" : "center", gap: 3, children: [(0, import_jsx_runtime86.jsx)(View_default.Item, { grow: true, children: textContent && children || size !== "small" ? (0, import_jsx_runtime86.jsxs)(View_default, { gap: 0.5, children: [textContent, children && (0, import_jsx_runtime86.jsx)(View_default, { gap: 3, children })] }) : textContent || children }), actions.length && (0, import_jsx_runtime86.jsx)(View_default, { direction: "row", align: "center", gap: 2, children: actions.map((slot, index) => {
    const isPrimary = size === "large" ? index === 0 : index === actions.length - 1;
    const primaryColor = color === "neutral" || color === "inverted" ? "neutral" : "media";
    const defaultProps = {
      variant: isPrimary ? "solid" : "ghost",
      size: "small",
      color: isPrimary ? primaryColor : "inherit",
      elevated: color !== "neutral"
    };
    if (slot.type === Button_default) {
      return (0, import_react63.createElement)(Button_default, { ...defaultProps, ...slot.props, key: index });
    } else {
      return slot;
    }
  }) })] }) })] });
  if (color === "inverted") {
    return (0, import_jsx_runtime86.jsx)(Theme_default, { colorMode: "inverted", children: toastNode });
  }
  return toastNode;
};
var Toast_default = Toast;

// node_modules/reshaped/dist/components/Toast/ToastContainer.js
import s66 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Toast/Toast.module.css";
var ToastContainer = (props) => {
  const { toastProps, id, status, inspected, index } = props;
  const { timeout = "short" } = toastProps;
  const { show, hide, remove } = import_react64.default.useContext(Toast_context_default);
  const [toastHeight, setToastHeight] = import_react64.default.useState();
  const timeoutRef = import_react64.default.useRef();
  const resizingRef = import_react64.default.useRef(false);
  const wrapperRef = import_react64.default.useRef(null);
  const visible = status === "entered";
  const containerClassNames = classNames(s66.container, visible && s66[`container--visible`], index === 0 && s66[`container--index-${index}`], !inspected && (index === 1 || index === 2) && s66[`container--index-${index}`], !inspected && index >= 3 && s66["container--index-overflow"]);
  const stopTimer = import_react64.default.useCallback(() => {
    if (!timeoutRef.current)
      return;
    clearTimeout(timeoutRef.current);
  }, []);
  const startTimer = import_react64.default.useCallback(() => {
    stopTimer();
    const timeoutValue = typeof timeout === "string" ? timeouts[timeout] : timeout;
    if (timeout === 0)
      return;
    timeoutRef.current = setTimeout(() => {
      hide(id);
    }, timeoutValue ?? timeouts.short);
  }, [hide, id, timeout, stopTimer]);
  const handleTransitionEnd = (e) => {
    if (e.propertyName !== "height")
      return;
    if (visible)
      return;
    remove(id);
  };
  import_react64.default.useEffect(() => {
    if (!visible)
      return;
    if (inspected) {
      stopTimer();
    } else {
      startTimer();
    }
  }, [inspected, startTimer, stopTimer, visible]);
  import_react64.default.useEffect(() => {
    if (wrapperRef.current) {
      setToastHeight(wrapperRef.current.clientHeight);
    }
    show(id);
    startTimer();
  }, [show, id, startTimer]);
  import_react64.default.useEffect(() => {
    if (!wrapperRef.current)
      return;
    const trapFocus = new TrapFocus_default(wrapperRef.current);
    if (visible) {
      trapFocus.trap({
        includeTrigger: true,
        mode: "content-menu"
      });
    } else if (checkKeyboardMode()) {
      trapFocus.release();
    }
  }, [visible]);
  import_react64.default.useEffect(() => {
    if (!visible || index > 0)
      return;
    const handleResize = () => {
      resizingRef.current = true;
      onNextFrame(() => {
        resizingRef.current = false;
      });
      if (wrapperRef.current) {
        setToastHeight(wrapperRef.current.clientHeight);
      }
    };
    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, [visible, index]);
  return (0, import_jsx_runtime87.jsx)("li", { className: containerClassNames, style: {
    // Height + padding + borders
    height: status === "entered" ? `calc(${toastHeight}px + var(--rs-unit-x2) + 2px)` : 0,
    // Disable transition when height of the toast can change
    transitionDuration: resizingRef.current ? "0s" : void 0
  }, onTransitionEnd: handleTransitionEnd, onFocus: stopTimer, onBlur: startTimer, children: (0, import_jsx_runtime87.jsx)("span", { className: s66.wrapper, children: (0, import_jsx_runtime87.jsx)(Toast_default, { ...toastProps, collapsed: index > 0 && !inspected, attributes: { ...toastProps.attributes, ref: wrapperRef } }) }) });
};
var ToastContainer_default = ToastContainer;

// node_modules/reshaped/dist/components/Toast/ToastRegion.js
import s67 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Toast/Toast.module.css";
var ToastRegion = (props) => {
  const { position, nested } = props;
  const { queues, options } = import_react65.default.useContext(Toast_context_default);
  const [inspecting, setInspecting] = import_react65.default.useState(false);
  const ignoreHoverRef = import_react65.default.useRef(false);
  const rootRef = import_react65.default.useRef(null);
  const queue2 = queues[position];
  const { width, expanded } = (options == null ? void 0 : options[position]) || {};
  const regionClassNames = classNames(s67.region, s67[`region--position-${position}`], nested && s67["region--nested"]);
  const filteredLength = queue2.filter((item) => item.status === "entered").length;
  let hiddenCount = 0;
  const handleTouchStart = () => {
    ignoreHoverRef.current = true;
  };
  const handleClick = (e) => {
    let currentEl = e.target;
    let isFocusable = false;
    while (currentEl && currentEl !== rootRef.current && !isFocusable) {
      isFocusable = currentEl.matches(focusableSelector);
      currentEl = currentEl.parentElement;
    }
    if (!isFocusable) {
      setInspecting((prevInspecting) => !prevInspecting);
    }
    ignoreHoverRef.current = false;
  };
  const handleMouseEnter = () => {
    if (ignoreHoverRef.current)
      return;
    setInspecting(true);
  };
  const handleMouseLeave = () => {
    if (ignoreHoverRef.current)
      return;
    setInspecting(false);
  };
  import_react65.default.useEffect(() => {
    if (queue2.length === 0)
      setInspecting(false);
  }, [queue2.length]);
  if (!queue2.length)
    return null;
  return (
    // We only use onClick for touch devices since touchend is not supported
    // eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions, jsx-a11y/click-events-have-key-events
    (0, import_jsx_runtime88.jsx)("ul", { role: "region", "aria-live": "polite", className: regionClassNames, ref: rootRef, onTouchStart: handleTouchStart, onClick: handleClick, onMouseEnter: handleMouseEnter, onMouseLeave: handleMouseLeave, style: { width }, children: queue2.map((data, index) => {
      const visibleIndex = filteredLength - index + hiddenCount - 1;
      if (data.status !== "entered")
        hiddenCount += 1;
      return (0, import_jsx_runtime88.jsx)(ToastContainer_default, { ...data, index: visibleIndex, inspected: inspecting || !!expanded }, data.id);
    }) })
  );
};
var ToastRegion_default = ToastRegion;

// node_modules/reshaped/dist/components/Toast/ToastProvider.js
var counter = 0;
var generateId = () => `__rs-toast-${counter++}`;
var toastReducer = (state, action) => {
  let nextState;
  switch (action.type) {
    case "add":
      const { position = "bottom-end", ...toastProps } = action.payload.toastProps || {};
      return {
        ...state,
        [position]: [...state[position], { id: action.payload.id, toastProps, status: "entering" }]
      };
    case "show":
      const { id: showId } = action.payload;
      nextState = { ...state };
      positions.forEach((position2) => {
        nextState[position2] = nextState[position2].map((item) => {
          if (item.status !== "entering")
            return item;
          return item.id === showId ? { ...item, status: "entered" } : item;
        });
      });
      return nextState;
    case "hide":
      const { id: hideId } = action.payload;
      nextState = { ...state };
      positions.forEach((position2) => {
        nextState[position2] = nextState[position2].map((item) => item.id === hideId ? { ...item, status: "exiting" } : item);
      });
      return nextState;
    case "remove":
      const { id: removeId } = action.payload;
      nextState = { ...state };
      positions.forEach((position2) => {
        nextState[position2] = nextState[position2].filter((item) => item.id !== removeId);
      });
      return nextState;
  }
};
var ToastProvider = (props) => {
  const { children, options } = props;
  const toast = useToast_default();
  const id = import_react66.default.useId();
  const [data, dispatch] = import_react66.default.useReducer(toastReducer, defaultContextData.queues);
  const add = import_react66.default.useCallback((toastProps) => {
    const id2 = generateId();
    dispatch({ type: "add", payload: { toastProps, id: id2 } });
    return id2;
  }, []);
  const show = import_react66.default.useCallback((id2) => {
    dispatch({ type: "show", payload: { id: id2 } });
  }, []);
  const hide = import_react66.default.useCallback((id2) => {
    dispatch({ type: "hide", payload: { id: id2 } });
  }, []);
  const remove = import_react66.default.useCallback((id2) => {
    dispatch({ type: "remove", payload: { id: id2 } });
  }, []);
  const value = import_react66.default.useMemo(() => ({
    queues: data,
    id,
    add,
    show,
    hide,
    remove,
    inspecting: false,
    options
  }), [data, show, hide, add, remove, id, options]);
  return (0, import_jsx_runtime89.jsxs)(Toast_context_default.Provider, { value, children: [children, positions.map((position) => (0, import_jsx_runtime89.jsx)(ToastRegion_default, { position, nested: !!toast.id }, position))] });
};
var ToastProvider_default = ToastProvider;

// node_modules/reshaped/dist/hooks/_private/useSingletonKeyboardMode.js
var import_react67 = __toESM(require_react());
var useSingletonKeyboardMode = () => {
  import_react67.default.useEffect(() => {
    const handleKeyDown = (e) => {
      if (e.metaKey || e.altKey || e.ctrlKey)
        return;
      enableKeyboardMode();
    };
    const handleClick = () => {
      disableKeyboardMode();
    };
    window.addEventListener("keydown", handleKeyDown);
    window.addEventListener("mousedown", handleClick);
    return () => {
      window.removeEventListener("keydown", handleKeyDown);
      window.removeEventListener("mousedown", handleClick);
    };
  }, []);
};
var useSingletonKeyboardMode_default = useSingletonKeyboardMode;

// node_modules/reshaped/dist/components/Reshaped/Reshaped.js
import "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Reshaped/Reshaped.css";
import s68 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Reshaped/Reshaped.module.css";
var ReshapedInner = (props) => {
  const { children, defaultRTL, defaultViewport = "s", toastOptions } = props;
  const rtlState = useSingletonRTL(defaultRTL);
  useSingletonKeyboardMode_default();
  return (0, import_jsx_runtime90.jsx)(SingletonEnvironmentContext.Provider, { value: { rtl: rtlState, defaultViewport }, children: (0, import_jsx_runtime90.jsx)(SingletonHotkeysProvider, { children: (0, import_jsx_runtime90.jsx)(ToastProvider_default, { options: toastOptions, children }) }) });
};
var Reshaped = (props) => {
  const { theme, defaultTheme = "reshaped", defaultColorMode, scoped, className } = props;
  const rootClassNames = classNames(s68.root, className);
  return (0, import_jsx_runtime90.jsx)(GlobalColorMode_default, { defaultMode: defaultColorMode, children: (0, import_jsx_runtime90.jsx)(PrivateTheme, { name: theme, defaultName: defaultTheme, className: rootClassNames, scoped, children: (0, import_jsx_runtime90.jsx)(ReshapedInner, { ...props, children: props.children }) }) });
};
var Reshaped_default = Reshaped;

// node_modules/reshaped/dist/components/Resizable/Resizable.js
var import_jsx_runtime91 = __toESM(require_jsx_runtime());
var import_react69 = __toESM(require_react());

// node_modules/reshaped/dist/hooks/useDrag.js
var import_react68 = __toESM(require_react());
var useDrag = (cb, options) => {
  const { disabled, containerRef: passedContainerRef, orientation = "all" } = options || {};
  const cbRef = useHandlerRef_default(cb);
  const toggle = useToggle_default();
  const triggerRef = import_react68.default.useRef(null);
  const internalContainerRef = import_react68.default.useRef(null);
  const containerRef = passedContainerRef || internalContainerRef;
  const triggerCompensationRef = import_react68.default.useRef({ x: 0, y: 0 });
  const isVertical = orientation === "vertical" || orientation === "all";
  const isHorizontal = orientation === "horizontal" || orientation === "all";
  const handleKeyboard = (x, y) => {
    const triggerEl = triggerRef.current;
    if (!triggerEl)
      return;
    const container = containerRef.current ?? document.body;
    const containerRect = container.getBoundingClientRect();
    const triggerRect = triggerEl == null ? void 0 : triggerEl.getBoundingClientRect();
    const nextArgs = { x: 0, y: 0, triggerX: 0, triggerY: 0 };
    if (isVertical) {
      const relativeY = Math.round(triggerRect.y) - containerRect.y + y;
      nextArgs.y = Math.max(0, Math.min(relativeY, containerRect.height - triggerRect.height));
      nextArgs.triggerY = triggerRect.y - containerRect.y;
    }
    if (isHorizontal) {
      const relativeX = Math.round(triggerRect.x) - containerRect.x + x;
      nextArgs.x = Math.max(0, Math.min(relativeX, containerRect.width - triggerRect.width));
      nextArgs.triggerX = triggerRect.x - containerRect.x;
    }
    cb(nextArgs);
  };
  useHotkeys_default({
    [LEFT]: () => isHorizontal && handleKeyboard(-20, 0),
    [RIGHT]: () => isHorizontal && handleKeyboard(20, 0),
    [UP]: () => isVertical && handleKeyboard(0, -20),
    [DOWN]: () => isVertical && handleKeyboard(0, 20)
  }, [], {
    ref: triggerRef,
    preventDefault: true,
    disabled
  });
  import_react68.default.useEffect(() => {
    const triggerEl = triggerRef.current;
    if (!triggerEl)
      return;
    if (!toggle.active)
      return;
    const handleDrag = (event) => {
      var _a;
      const resolvedEvent = event instanceof MouseEvent ? event : event.changedTouches[0];
      const container = containerRef.current ?? document.body;
      const containerRect = container.getBoundingClientRect();
      const triggerRect = triggerEl.getBoundingClientRect();
      const triggerX = resolvedEvent.clientX - containerRect.x;
      const triggerY = resolvedEvent.clientY - containerRect.y;
      const relativeX = triggerX - triggerCompensationRef.current.x;
      const relativeY = triggerY - triggerCompensationRef.current.y;
      (_a = cbRef.current) == null ? void 0 : _a.call(cbRef, {
        x: isHorizontal ? Math.max(0, Math.min(relativeX, containerRect.width - triggerRect.width)) : 0,
        y: isVertical ? Math.max(0, Math.min(relativeY, containerRect.height - triggerRect.height)) : 0,
        triggerX: triggerRect.x - containerRect.x,
        triggerY: triggerRect.y - containerRect.y
      });
    };
    const handleDragEnd = () => {
      triggerCompensationRef.current = { x: 0, y: 0 };
      toggle.deactivate();
      enableUserSelect();
      enableScroll();
    };
    document.addEventListener("touchmove", handleDrag, { passive: true });
    document.addEventListener("touchend", handleDragEnd, { passive: true });
    document.addEventListener("mousemove", handleDrag, { passive: true });
    document.addEventListener("mouseup", handleDragEnd, { passive: true });
    return () => {
      document.removeEventListener("touchmove", handleDrag);
      document.removeEventListener("touchend", handleDragEnd);
      document.removeEventListener("mousemove", handleDrag);
      document.removeEventListener("mouseup", handleDragEnd);
    };
  }, [toggle, isHorizontal, isVertical, containerRef, cbRef]);
  import_react68.default.useEffect(() => {
    const triggerEl = triggerRef.current;
    if (!triggerEl || disabled)
      return;
    const handleStart = (event) => {
      const resolvedEvent = event instanceof MouseEvent ? event : event.changedTouches[0];
      const triggerRect = triggerEl.getBoundingClientRect();
      triggerCompensationRef.current = {
        x: resolvedEvent.clientX - triggerRect.x,
        y: resolvedEvent.clientY - triggerRect.y
      };
      toggle.activate();
      disableUserSelect();
      disableScroll();
    };
    triggerEl.addEventListener("touchstart", handleStart, { passive: true });
    triggerEl.addEventListener("mousedown", handleStart, { passive: true });
    return () => {
      triggerEl.removeEventListener("touchstart", handleStart);
      triggerEl.removeEventListener("mousedown", handleStart);
    };
  }, [toggle, disabled]);
  return { ref: triggerRef, containerRef, active: toggle.active };
};
var useDrag_default = useDrag;

// node_modules/reshaped/dist/components/Resizable/Resizable.js
import s69 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Resizable/Resizable.module.css";
var PrivateResizableHandle = (props) => {
  const { containerRef, onDrag, index, direction, children } = props;
  const { ref, active } = useDrag_default((args) => {
    onDrag({ ...args, index });
  }, {
    containerRef,
    orientation: direction === "row" ? "horizontal" : "vertical"
  });
  const handleClassNames = classNames(s69.handle, active && s69["handle--dragging"]);
  if (children)
    return (0, import_jsx_runtime91.jsx)(View_default.Item, { children: children({ ref }) });
  return (0, import_jsx_runtime91.jsx)(View_default.Item, { className: handleClassNames, attributes: {
    role: "button",
    tabIndex: 0,
    ref: (el) => {
      ref.current = el;
    }
  } });
};
var PrivateResizableItem = import_react69.default.forwardRef((props, ref) => {
  const { children, defaultSize, minSize, maxSize } = props;
  const itemRef = import_react69.default.useRef(null);
  return (0, import_jsx_runtime91.jsx)(View_default.Item, { grow: true, className: s69.item, attributes: {
    ref: (el) => {
      if (typeof ref === "function")
        ref(el);
      itemRef.current = el;
    },
    style: {
      "--rs-resizable-default-size": defaultSize,
      "--rs-resizable-min-size": minSize,
      "--rs-resizable-max-size": maxSize
    }
  }, children });
});
var Resizable = (props) => {
  const { children, height, direction = "row", gap = 2, className, attributes } = props;
  const rootClassNames = classNames(s69.root, s69[`--direction-${direction}`], className);
  const containerRef = import_react69.default.useRef(null);
  const itemsRef = import_react69.default.useRef([]);
  const horizontal = direction === "row";
  let currentHandleIndex = 0;
  let currentItemIndex = 0;
  itemsRef.current = [];
  const checkedCrossedBoundaries = (args) => {
    const { item, grow, itemsSize, itemsCount } = args;
    const { minSize, maxSize } = item.props;
    const nextPx = grow / itemsCount / 100 * itemsSize;
    const minPx = minSize && Number(minSize.replace("px", ""));
    const maxPx = maxSize && Number(maxSize == null ? void 0 : maxSize.replace("px", ""));
    if (minPx && minPx > nextPx)
      return true;
    if (maxPx && maxPx < nextPx)
      return true;
    return false;
  };
  const onDrag = (args) => {
    const { index, x, y, triggerX, triggerY } = args;
    const startItem = itemsRef.current[index];
    const endItem = itemsRef.current[index + 1];
    if (!startItem.el || !endItem.el)
      return;
    const itemsCount = itemsRef.current.length;
    let currentItemsGrow = itemsCount * 100;
    let itemsSize = 0;
    itemsRef.current.forEach((item, i) => {
      if (!item.el)
        return;
      itemsSize += horizontal ? item.el.clientWidth : item.el.clientHeight;
      if (i === index || i === index + 1)
        return;
      currentItemsGrow -= Number(item.el.style.flexGrow || 100);
    }, 0);
    const startSize = horizontal ? startItem.el.clientWidth : startItem.el.clientHeight;
    const startOffset = horizontal ? startItem.el.offsetLeft : startItem.el.offsetTop;
    const endSize = horizontal ? endItem.el.clientWidth : endItem.el.clientHeight;
    const gapCompensation = (horizontal ? triggerX : triggerY) - startSize - startOffset;
    const dragCoord = (horizontal ? x : y) - gapCompensation;
    const currentItemsSize = startSize + endSize;
    const percent = Math.min(1, Math.max(0, (dragCoord - startOffset) / currentItemsSize));
    const nextStartGrow = Math.floor(percent * currentItemsGrow);
    const nextEndGrow = Math.floor(currentItemsGrow - nextStartGrow);
    if (checkedCrossedBoundaries({ item: startItem, itemsSize, grow: nextStartGrow, itemsCount })) {
      return;
    }
    if (checkedCrossedBoundaries({ item: endItem, itemsSize, grow: nextEndGrow, itemsCount })) {
      return;
    }
    startItem.el.style.flexGrow = nextStartGrow.toString();
    endItem.el.style.flexGrow = nextEndGrow.toString();
  };
  import_react69.default.useEffect(() => {
    const growValues = [];
    let totalItemsSize = 0;
    itemsRef.current.forEach((item) => {
      if (!item.el)
        return;
      totalItemsSize += horizontal ? item.el.clientWidth : item.el.clientHeight;
    });
    itemsRef.current.forEach((item, i) => {
      if (!item.el)
        return;
      const itemSizePercent = (horizontal ? item.el.clientWidth : item.el.clientHeight) / totalItemsSize;
      growValues[i] = itemsRef.current.length * itemSizePercent * 100;
    });
    itemsRef.current.forEach((item, i) => {
      if (!item.el || !growValues[i])
        return;
      item.el.style.flexGrow = growValues[i].toString();
      item.el.setAttribute("data-rs-resizable-item-mounted", "");
    });
  }, [horizontal]);
  const output = import_react69.default.Children.map(children, (child) => {
    const isComponent = import_react69.default.isValidElement(child);
    if (isComponent && child.type === Resizable.Handle && child.props) {
      return (0, import_jsx_runtime91.jsx)(PrivateResizableHandle, { ...child.props, containerRef, index: currentHandleIndex++, onDrag, direction });
    }
    if (isComponent && child.type === Resizable.Item && child.props) {
      const index = currentHandleIndex;
      return (0, import_jsx_runtime91.jsx)(PrivateResizableItem, { ...child.props, index: currentItemIndex++, ref: (el) => itemsRef.current[index] = { el, props: child.props } });
    }
    return null;
  });
  return (0, import_jsx_runtime91.jsx)(View_default, { attributes: { ...attributes, ref: containerRef }, className: rootClassNames, height, direction, align: "stretch", gap, children: output });
};
Resizable.Item = () => null;
Resizable.Handle = () => null;
var Resizable_default = Resizable;

// node_modules/reshaped/dist/components/Scrim/Scrim.js
var import_jsx_runtime92 = __toESM(require_jsx_runtime());
import s70 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Scrim/Scrim.module.css";
var Scrim = (props) => {
  const { children, backgroundSlot, position = "cover", attributes, className, scrimClassName } = props;
  const rootClassNames = classNames(s70.root, !!backgroundSlot && s70["--with-background"], position && s70[`--position-${position}`], className);
  const scrimClassNames = classNames(s70.scrim, scrimClassName);
  return (0, import_jsx_runtime92.jsxs)("div", { ...attributes, className: rootClassNames, children: [backgroundSlot, (0, import_jsx_runtime92.jsx)("div", { className: scrimClassNames, children: (0, import_jsx_runtime92.jsx)("div", { className: s70.content, children }) })] });
};
var Scrim_default = Scrim;

// node_modules/reshaped/dist/components/ScrollArea/ScrollArea.js
var import_jsx_runtime93 = __toESM(require_jsx_runtime());
var import_react70 = __toESM(require_react());
import s71 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/ScrollArea/ScrollArea.module.css";
var ScrollAreaBar = (props) => {
  const { ratio, position, vertical, onThumbMove } = props;
  const onThumbMoveRef = useHandlerRef_default(onThumbMove);
  const [dragging, setDragging] = import_react70.default.useState(false);
  const dragStartPositionRef = import_react70.default.useRef(0);
  const barRef = import_react70.default.useRef(null);
  const barClassNames = classNames(s71.scrollbar, vertical ? s71["--scrollbar-y"] : s71["--scrollbar-x"], dragging && s71["--scrollbar-dragging"]);
  const handleClick = (e) => {
    const elBar = barRef.current;
    const isDirty = dragStartPositionRef.current;
    dragStartPositionRef.current = 0;
    if (isDirty)
      return;
    if (!elBar || e.currentTarget !== elBar)
      return;
    const rect = elBar.getBoundingClientRect();
    const diff = vertical ? e.pageY - rect.top : e.pageX - rect.left;
    const total = vertical ? elBar.clientHeight : elBar.clientWidth;
    onThumbMove({ value: diff / total - ratio / 2, type: "absolute" });
  };
  const handleDrag = import_react70.default.useCallback((e) => {
    var _a;
    if (!dragStartPositionRef.current) {
      dragStartPositionRef.current = vertical ? e.pageY : e.pageX;
    }
    const elBar = barRef.current;
    if (!elBar)
      return;
    if (!dragging)
      return;
    const diff = vertical ? e.movementY : e.movementX;
    const total = vertical ? elBar.scrollHeight : elBar.scrollWidth;
    (_a = onThumbMoveRef.current) == null ? void 0 : _a.call(onThumbMoveRef, { value: diff / total, type: "relative" });
  }, [vertical, dragging, onThumbMoveRef]);
  const handleDragEnd = import_react70.default.useCallback(() => {
    setDragging(false);
    enableUserSelect();
  }, []);
  const handleDragStart = () => {
    setDragging(true);
    disableUserSelect();
  };
  import_react70.default.useEffect(() => {
    if (!dragging)
      return;
    document.addEventListener("mousemove", handleDrag);
    document.addEventListener("mouseup", handleDragEnd);
    return () => {
      document.removeEventListener("mousemove", handleDrag);
      document.removeEventListener("mouseup", handleDragEnd);
    };
  }, [handleDrag, handleDragEnd, dragging]);
  return (0, import_jsx_runtime93.jsx)("div", { className: barClassNames, style: {
    "--rs-scroll-area-ratio": ratio,
    "--rs-scroll-area-position": position
  }, ref: barRef, onClick: handleClick, onMouseDown: handleDragStart, "aria-hidden": "true", children: (0, import_jsx_runtime93.jsx)("div", { className: s71.thumb }) });
};
var ScrollArea = (0, import_react70.forwardRef)((props, ref) => {
  const { children, height, maxHeight, scrollbarDisplay = "hover", onScroll, className, attributes } = props;
  const [scrollRatio, setScrollRatio] = import_react70.default.useState({ x: 1, y: 1 });
  const [scrollPosition, setScrollPosition] = import_react70.default.useState({ x: 0, y: 0 });
  const scrollableRef = import_react70.default.useRef(null);
  const resizeObserverRef = import_react70.default.useRef();
  const heightStyles = height_default(height);
  const maxHeightStyles = maxHeight_default(maxHeight);
  const rootClassNames = classNames(s71.root, scrollbarDisplay && s71[`--display-${scrollbarDisplay}`], heightStyles == null ? void 0 : heightStyles.classNames, maxHeightStyles == null ? void 0 : maxHeightStyles.classNames, className);
  const rootVariables = {
    ...heightStyles == null ? void 0 : heightStyles.variables,
    ...maxHeightStyles == null ? void 0 : maxHeightStyles.variables
  };
  const updateScroll = import_react70.default.useCallback(() => {
    const scrollableEl = scrollableRef.current;
    if (!scrollableEl)
      return;
    setScrollRatio({
      x: scrollableEl.clientWidth / scrollableEl.scrollWidth,
      y: scrollableEl.clientHeight / scrollableEl.scrollHeight
    });
  }, []);
  const handleScroll = (e) => {
    const scrollableEl = scrollableRef.current;
    if (!scrollableEl)
      return;
    const next = {
      x: e.currentTarget.scrollLeft / scrollableEl.scrollWidth,
      y: e.currentTarget.scrollTop / scrollableEl.scrollHeight
    };
    setScrollPosition(next);
    onScroll == null ? void 0 : onScroll(next);
  };
  const handleThumbYMove = (args) => {
    const scrollableEl = scrollableRef.current;
    if (!scrollableEl)
      return;
    const value = scrollableEl.scrollHeight * args.value;
    if (args.type === "absolute") {
      scrollableEl.scrollTop = value;
    } else {
      scrollableEl.scrollTop += value;
    }
  };
  const handleThumbXMove = (args) => {
    const scrollableEl = scrollableRef.current;
    if (!scrollableEl)
      return;
    const value = scrollableEl.clientWidth * args.value;
    if (args.type === "absolute") {
      scrollableEl.scrollLeft = value;
    } else {
      scrollableEl.scrollLeft += value;
    }
  };
  import_react70.default.useImperativeHandle(ref, () => scrollableRef.current);
  useIsomorphicLayoutEffect_default(() => {
    updateScroll();
  }, [updateScroll]);
  useIsomorphicLayoutEffect_default(() => {
    const scrollableEl = scrollableRef.current;
    if (!scrollableEl)
      return;
    resizeObserverRef.current = new ResizeObserver(updateScroll);
    resizeObserverRef.current.observe(scrollableEl);
    return () => {
      var _a;
      (_a = resizeObserverRef.current) == null ? void 0 : _a.disconnect();
    };
  }, [updateScroll]);
  return (0, import_jsx_runtime93.jsxs)("div", { ...attributes, className: rootClassNames, style: rootVariables, children: [(0, import_jsx_runtime93.jsx)("div", { className: s71.scrollable, ref: scrollableRef, onScroll: handleScroll, children }), scrollRatio.y < 1 && scrollbarDisplay !== "hidden" && (0, import_jsx_runtime93.jsx)(ScrollAreaBar, { vertical: true, onThumbMove: handleThumbYMove, ratio: scrollRatio.y, position: scrollPosition.y }), scrollRatio.x < 1 && scrollbarDisplay !== "hidden" && (0, import_jsx_runtime93.jsx)(ScrollAreaBar, { onThumbMove: handleThumbXMove, ratio: scrollRatio.x, position: scrollPosition.x })] });
});
var ScrollArea_default = ScrollArea;

// node_modules/reshaped/dist/components/Select/Select.js
var import_jsx_runtime95 = __toESM(require_jsx_runtime());
var import_react71 = __toESM(require_react());

// node_modules/reshaped/dist/icons/ChevronVertical.js
var import_jsx_runtime94 = __toESM(require_jsx_runtime());
var IconChevronVertical = () => (0, import_jsx_runtime94.jsxs)("svg", { viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [(0, import_jsx_runtime94.jsx)("path", { d: "M7 16L12 21L17 16", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" }), (0, import_jsx_runtime94.jsx)("path", { d: "M17 8L12 3L7 8", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" })] });
var ChevronVertical_default = IconChevronVertical;

// node_modules/reshaped/dist/components/Select/Select.js
import s72 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Select/Select.module.css";
var Select = (props) => {
  var _a, _b;
  const { onChange, onClick, onFocus, onBlur, name, value, defaultValue, placeholder, options, children, icon, startSlot, size = "medium", variant = "outline", className, attributes } = props;
  const [empty, setEmpty] = import_react71.default.useState(value === void 0 ? !defaultValue : !value);
  const formControl = useFormControl();
  const id = useElementId_default(props.id);
  const inputId = ((_a = formControl == null ? void 0 : formControl.attributes) == null ? void 0 : _a.id) || ((_b = props.inputAttributes) == null ? void 0 : _b.id) || id;
  const disabled = (formControl == null ? void 0 : formControl.disabled) || props.disabled;
  const hasError = (formControl == null ? void 0 : formControl.hasError) || props.hasError;
  const inputAttributes = { ...props.inputAttributes, ...formControl == null ? void 0 : formControl.attributes };
  const rootClassName = classNames(s72.root, className, size && responsiveClassNames(s72, "--size", size), hasError && s72["--status-error"], disabled && s72["--disabled"], empty && options && s72["--placeholder"], variant && s72[`--variant-${variant}`]);
  const handleChange = (event) => {
    const nextValue = event.target.value;
    if (value === void 0)
      setEmpty(!nextValue);
    if (!onChange)
      return;
    onChange({ name, value: nextValue, event });
  };
  import_react71.default.useEffect(() => {
    if (value === void 0)
      return;
    setEmpty(!value);
  }, [value]);
  const startContent = (startSlot || icon) && (0, import_jsx_runtime95.jsx)("div", { className: s72.slot, children: icon ? (0, import_jsx_runtime95.jsx)(Icon_default, { size: responsivePropDependency(size, (size2) => {
    if (size2 === "large")
      return 5;
    if (size2 === "xlarge")
      return 6;
    return 4;
  }), svg: icon }) : startSlot });
  return (0, import_jsx_runtime95.jsxs)("div", { ...attributes, className: rootClassName, children: [options ? (0, import_jsx_runtime95.jsxs)(import_jsx_runtime95.Fragment, { children: [startContent, (0, import_jsx_runtime95.jsxs)("select", { ...inputAttributes, onFocus: onFocus || (inputAttributes == null ? void 0 : inputAttributes.onFocus), onBlur: onBlur || (inputAttributes == null ? void 0 : inputAttributes.onBlur), className: s72.input, disabled, name, value, defaultValue, onChange: handleChange, id: inputId, children: [placeholder && (0, import_jsx_runtime95.jsx)("option", { value: "", children: placeholder }), options.map((option) => (0, import_jsx_runtime95.jsx)("option", { value: option.value, disabled: option.disabled, children: option.label }, option.value))] })] }) : (0, import_jsx_runtime95.jsxs)(import_jsx_runtime95.Fragment, { children: [(0, import_jsx_runtime95.jsxs)(Actionable_default, { className: s72.input, disabled, onClick, attributes: {
    ...inputAttributes,
    onFocus: onFocus || (inputAttributes == null ? void 0 : inputAttributes.onFocus),
    onBlur: onBlur || (inputAttributes == null ? void 0 : inputAttributes.onBlur)
  }, children: [startContent, children || (placeholder ? (0, import_jsx_runtime95.jsx)(Text_default, { color: "neutral-faded", children: placeholder }) : null)] }), (0, import_jsx_runtime95.jsx)("input", { type: "hidden", value, name })] }), (0, import_jsx_runtime95.jsx)("div", { className: s72.arrow, children: (0, import_jsx_runtime95.jsx)(Icon_default, { svg: ChevronVertical_default, color: disabled ? "disabled" : "neutral-faded", size: responsivePropDependency(size, (size2) => {
    return size2 === "large" || size2 === "xlarge" ? 5 : 4;
  }) }) })] });
};
var Select_default = Select;

// node_modules/reshaped/dist/components/Skeleton/Skeleton.js
var import_jsx_runtime96 = __toESM(require_jsx_runtime());
import s73 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Skeleton/Skeleton.module.css";
var Skeleton = (props) => {
  const { borderRadius = "small", width, height, className, attributes } = props;
  const rootClassNames = classNames(s73.root, className);
  return (0, import_jsx_runtime96.jsx)(View_default, { backgroundColor: "disabled", width, height, borderRadius, className: rootClassNames, attributes });
};
var Skeleton_default = Skeleton;

// node_modules/reshaped/dist/components/Slider/Slider.js
var import_jsx_runtime100 = __toESM(require_jsx_runtime());

// node_modules/reshaped/dist/components/Slider/SliderControlled.js
var import_jsx_runtime98 = __toESM(require_jsx_runtime());
var import_react73 = __toESM(require_react());

// node_modules/reshaped/dist/components/Slider/SliderThumb.js
var import_jsx_runtime97 = __toESM(require_jsx_runtime());
var import_react72 = __toESM(require_react());

// node_modules/reshaped/dist/components/Slider/Slider.utilities.js
var getPrecision = (value) => {
  const floatPart = value.toString().split(".")[1];
  return (floatPart == null ? void 0 : floatPart.length) || 0;
};
var applyStepToValue = (value, step) => {
  const isStepFloat = step % 1 !== 0;
  const result = Math.round(value / step) * step;
  if (isStepFloat) {
    const precision = getPrecision(step);
    return Number(result.toFixed(precision));
  }
  return result;
};
var getDragCoord = ({ event, vertical }) => {
  if (vertical) {
    if (event instanceof MouseEvent)
      return event.clientY;
    return event.changedTouches[0].clientY;
  }
  if (event instanceof MouseEvent)
    return event.clientX;
  return event.changedTouches[0].clientX;
};

// node_modules/reshaped/dist/components/Slider/SliderThumb.js
import s74 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Slider/Slider.module.css";
var SliderThumb = (props, ref) => {
  const { name, value, disabled, active, position, max, min, step, onChange, onDragStart, renderValue, tooltipRef, orientation } = props;
  const id = import_react72.default.useId();
  const thumbClassNames = classNames(s74.thumb, active && s74["thumb--active"]);
  const precision = getPrecision(step);
  const tooltipValue = renderValue ? renderValue({ value }) : value.toFixed(precision);
  const handleChange = (e) => {
    onChange(+e.target.value);
  };
  return (0, import_jsx_runtime97.jsxs)(import_jsx_runtime97.Fragment, { children: [(0, import_jsx_runtime97.jsx)("input", { className: s74.input, type: "range", name, value, onChange: handleChange, disabled, max, min, step, "aria-labelledby": id, "aria-orientation": orientation }), (0, import_jsx_runtime97.jsx)("div", { ref, className: thumbClassNames, onMouseDown: onDragStart, onTouchStart: onDragStart, style: { "--ts-slider-thumb-position": `${position}%` }, id, "aria-hidden": "true", children: renderValue !== false && (0, import_jsx_runtime97.jsx)(Theme_default, { colorMode: "inverted", children: (0, import_jsx_runtime97.jsx)(Text_default, { variant: "caption-1", weight: "medium", className: s74.tooltip, attributes: { ref: tooltipRef }, children: tooltipValue }) }) })] });
};
var SliderThumb_default = import_react72.default.forwardRef(SliderThumb);

// node_modules/reshaped/dist/components/Slider/SliderControlled.js
import s75 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Slider/Slider.module.css";
var THUMB_SIZE = 16;
var SliderControlled = (props) => {
  var _a;
  const { name, range: range2, max, min, step = 1, onChange, onChangeCommit, renderValue, className, attributes, orientation = "horizontal" } = props;
  const onChangeRef = useHandlerRef_default(onChange);
  const onChangeCommitRef = useHandlerRef_default(onChangeCommit);
  const vertical = orientation === "vertical";
  const minValue = range2 && props.minValue !== void 0 ? applyStepToValue(props.minValue, step) : void 0;
  const maxValue = applyStepToValue(range2 ? props.maxValue : props.value, step);
  const barRef = import_react73.default.useRef(null);
  const minRef = import_react73.default.useRef(null);
  const maxRef = import_react73.default.useRef(null);
  const minTooltipRef = import_react73.default.useRef(null);
  const maxTooltipRef = import_react73.default.useRef(null);
  const [draggingId, setDraggingId] = import_react73.default.useState(null);
  const [rtl] = useRTL_default();
  const formControl = useFormControl();
  const id = useElementId_default();
  const inputId = ((_a = formControl == null ? void 0 : formControl.attributes) == null ? void 0 : _a.id) || id;
  const minId = `${inputId}-min`;
  const maxId = `${inputId}-max`;
  const disabled = (formControl == null ? void 0 : formControl.disabled) || props.disabled;
  const rootClassNames = classNames(s75.root, disabled && s75["--disabled"], orientation && s75[`--orientation-${orientation}`], className);
  const getPositionValue = import_react73.default.useCallback((dragCoord) => {
    const barEl = barRef.current;
    if (!barEl)
      return;
    const barSize = vertical ? barEl.clientHeight : barEl.clientWidth;
    const barRect = barEl.getBoundingClientRect();
    const barCoord = barRect[vertical ? "top" : "left"] + THUMB_SIZE / 2;
    const position = dragCoord - barCoord;
    const thumbsAreaWidth = barSize - THUMB_SIZE;
    let percentage = position / thumbsAreaWidth;
    if (rtl || vertical)
      percentage = 1 - percentage;
    let value = (max - min) * percentage + min;
    value = Math.max(min, Math.min(max, value));
    return applyStepToValue(value, step);
  }, [max, min, rtl, step, vertical]);
  const getPercentPosition = (value) => {
    const ratio = (value - min) / (max - min);
    return ratio * 100;
  };
  const positionTooltip = import_react73.default.useCallback((draggingId2) => {
    var _a2, _b, _c;
    if (vertical)
      return;
    const draggingRef = draggingId2 === minId ? minTooltipRef : maxTooltipRef;
    const thumbRef = draggingId2 === minId ? minRef : maxRef;
    let nextTooltipOffset = 0;
    const barRect = (_a2 = barRef.current) == null ? void 0 : _a2.getBoundingClientRect();
    const draggingRect = (_b = draggingRef.current) == null ? void 0 : _b.getBoundingClientRect();
    const thumbRect = (_c = thumbRef.current) == null ? void 0 : _c.getBoundingClientRect();
    const barLeftSide = barRect == null ? void 0 : barRect.left;
    const barRightSide = barLeftSide && barLeftSide + (barRect == null ? void 0 : barRect.width);
    const tooltipLeftSide = thumbRect && draggingRect && thumbRect.left - draggingRect.width / 2;
    const tooltipRightSide = thumbRect && draggingRect && thumbRect.left + draggingRect.width / 2;
    if (tooltipLeftSide && barLeftSide && tooltipLeftSide < barLeftSide - 8) {
      nextTooltipOffset = draggingRect.width / 2 - 8;
    }
    if (tooltipRightSide && barRightSide && tooltipRightSide > barRightSide) {
      nextTooltipOffset = -(draggingRect.width / 2 - 8);
    }
    const tooltipEl = draggingRef.current;
    if (tooltipEl) {
      tooltipEl.style.setProperty("--rs-slider-tooltip-offset", `${nextTooltipOffset || 0}px`);
    }
  }, [minId, vertical]);
  const handleMinChange = import_react73.default.useCallback((value, options) => {
    if (!range2)
      return;
    const method = (options == null ? void 0 : options.commit) ? onChangeCommitRef.current : onChangeRef.current;
    method == null ? void 0 : method({ minValue: value, maxValue, name });
  }, [maxValue, name, range2, onChangeCommitRef, onChangeRef]);
  const handleMaxChange = import_react73.default.useCallback((value, options) => {
    if (range2) {
      const method2 = (options == null ? void 0 : options.commit) ? onChangeCommitRef.current : onChangeRef.current;
      method2 == null ? void 0 : method2({ minValue, maxValue: value, name });
      return;
    }
    const method = (options == null ? void 0 : options.commit) ? onChangeCommitRef.current : onChangeRef.current;
    method == null ? void 0 : method({ value, name });
  }, [minValue, name, range2, onChangeRef, onChangeCommitRef]);
  const handleMouseDown = ({ nativeEvent }) => {
    if (disabled)
      return;
    let minDistance;
    let closestId;
    const dragCoord = getDragCoord({ event: nativeEvent, vertical });
    const nextValue = getPositionValue(dragCoord);
    const thumbs = [
      { ref: minRef, id: minId },
      { ref: maxRef, id: maxId }
    ];
    thumbs.forEach((item) => {
      if (!item.ref.current)
        return;
      const el = item.ref.current;
      const elRect = el.getBoundingClientRect();
      const distance = Math.abs((vertical ? elRect.top : elRect.left) - dragCoord);
      if (minDistance === void 0 || distance <= minDistance) {
        minDistance = distance;
        closestId = item.id;
      }
    });
    if (!closestId || nextValue === void 0)
      return;
    if (closestId === minId)
      handleMinChange(nextValue);
    if (closestId === maxId)
      handleMaxChange(nextValue);
    disableUserSelect();
    disableScroll();
    setDraggingId(closestId);
  };
  const handleMinDragStart = () => {
    if (disabled)
      return;
    setDraggingId(minId);
  };
  const handleMaxDragStart = () => {
    if (disabled)
      return;
    setDraggingId(maxId);
  };
  const handleDragStop = import_react73.default.useCallback(() => {
    if (draggingId === minId && minValue !== void 0) {
      handleMinChange(minValue, { commit: true });
    }
    if (draggingId === maxId) {
      handleMaxChange(maxValue, { commit: true });
    }
    enableUserSelect();
    enableScroll();
    setDraggingId(null);
  }, [minValue, maxValue, handleMinChange, handleMaxChange, draggingId, minId, maxId]);
  const handleDrag = import_react73.default.useCallback((e) => {
    if (!draggingId)
      return;
    const coord = getDragCoord({ event: e, vertical });
    const nextValue = getPositionValue(coord);
    if (nextValue === void 0)
      return;
    let nextDraggingId = draggingId;
    if (draggingId === minId && nextValue > maxValue)
      nextDraggingId = maxId;
    if (draggingId === maxId && minValue && nextValue < minValue)
      nextDraggingId = minId;
    if (nextDraggingId === minId)
      handleMinChange(nextValue);
    if (nextDraggingId === maxId)
      handleMaxChange(nextValue);
    if (draggingId !== nextDraggingId)
      setDraggingId(nextDraggingId);
  }, [
    draggingId,
    minValue,
    maxValue,
    getPositionValue,
    handleMaxChange,
    handleMinChange,
    maxId,
    minId,
    vertical
  ]);
  import_react73.default.useEffect(() => {
    positionTooltip(minId);
    positionTooltip(maxId);
  }, [minId, maxId, minValue, maxValue, positionTooltip]);
  import_react73.default.useEffect(() => {
    window.addEventListener("mouseup", handleDragStop);
    window.addEventListener("touchend", handleDragStop);
    window.addEventListener("mousemove", handleDrag);
    window.addEventListener("touchmove", handleDrag);
    return () => {
      window.removeEventListener("mouseup", handleDragStop);
      window.removeEventListener("touchend", handleDragStop);
      window.removeEventListener("mousemove", handleDrag);
      window.removeEventListener("touchmove", handleDrag);
    };
  }, [handleDragStop, handleDrag]);
  const minPercentPosition = minValue && getPercentPosition(minValue);
  const maxPercentPosition = getPercentPosition(maxValue);
  return (
    // mouse/touch events only needed for non-keyboard use
    // eslint-disable-next-line jsx-a11y/no-static-element-interactions
    (0, import_jsx_runtime98.jsxs)("div", { ...attributes, className: rootClassNames, onMouseDown: handleMouseDown, onTouchStart: handleMouseDown, children: [(0, import_jsx_runtime98.jsx)("div", { className: s75.bar, ref: barRef, children: (0, import_jsx_runtime98.jsx)("div", { className: s75.selection, style: {
      "--rs-slider-selection-start": `${minPercentPosition || 0}%`,
      "--rs-slider-selection-size": `${maxPercentPosition - (minPercentPosition || 0)}%`
    } }) }), (0, import_jsx_runtime98.jsxs)("div", { className: s75.thumbs, children: [minValue !== void 0 && minPercentPosition !== void 0 && (0, import_jsx_runtime98.jsx)(SliderThumb_default, { id: minId, active: minId === draggingId, name, disabled, onChange: handleMinChange, value: minValue, onDragStart: handleMinDragStart, position: minPercentPosition, max, min, ref: minRef, tooltipRef: minTooltipRef, renderValue, step, orientation }), (0, import_jsx_runtime98.jsx)(SliderThumb_default, { id: maxId, active: maxId === draggingId, name, disabled, onChange: handleMaxChange, value: maxValue, onDragStart: handleMaxDragStart, position: maxPercentPosition, max, min, ref: maxRef, tooltipRef: maxTooltipRef, renderValue, step, orientation })] })] })
  );
};
var SliderControlled_default = SliderControlled;

// node_modules/reshaped/dist/components/Slider/SliderUncontrolled.js
var import_jsx_runtime99 = __toESM(require_jsx_runtime());
var import_react74 = __toESM(require_react());
var SliderUncontrolled = (props) => {
  const { min, max, onChange, range: range2 } = props;
  const defaultMinValue = "defaultMinValue" in props && props.defaultMinValue !== void 0 && props.defaultMinValue || "defaultValue" in props && props.defaultValue !== void 0 && props.defaultValue || min;
  const defaultMaxValue = "defaultMaxValue" in props && props.defaultMaxValue !== void 0 && props.defaultMaxValue || "defaultValue" in props && props.defaultValue !== void 0 && props.defaultValue || (range2 ? max : min);
  const [minValue, setMinValue] = import_react74.default.useState(defaultMinValue);
  const [maxValue, setMaxValue] = import_react74.default.useState(defaultMaxValue);
  const handleSingleChange = (args) => {
    if (range2)
      return;
    setMaxValue(args.value);
    onChange == null ? void 0 : onChange(args);
  };
  const handleRangeChange = (args) => {
    if (!range2)
      return;
    setMinValue(args.minValue);
    setMaxValue(args.maxValue);
    onChange == null ? void 0 : onChange(args);
  };
  if (range2) {
    return (0, import_jsx_runtime99.jsx)(SliderControlled_default, { ...props, min, max, minValue, maxValue, defaultMinValue: void 0, defaultMaxValue: void 0, onChange: handleRangeChange });
  }
  return (0, import_jsx_runtime99.jsx)(SliderControlled_default, { ...props, min, max, value: maxValue, defaultValue: void 0, onChange: handleSingleChange });
};
var SliderUncontrolled_default = SliderUncontrolled;

// node_modules/reshaped/dist/components/Slider/Slider.js
var Slider = (props) => {
  const { min = 0, max = 100, ...rest } = props;
  if ("value" in props && props.value !== void 0 || "minValue" in props && "maxValue" in props && props.minValue !== void 0 && props.maxValue !== void 0) {
    return (0, import_jsx_runtime100.jsx)(SliderControlled_default, { ...rest, min, max });
  }
  return (0, import_jsx_runtime100.jsx)(SliderUncontrolled_default, { ...rest, min, max });
};
var Slider_default = Slider;

// node_modules/reshaped/dist/components/Stepper/Stepper.js
var import_jsx_runtime101 = __toESM(require_jsx_runtime());
var import_react75 = __toESM(require_react());
import s76 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Stepper/Stepper.module.css";
var StepperItemPrivate = (props) => {
  const { title, subtitle, children, direction, className, attributes, labelDisplay, step, completed, active, last } = props;
  const labelHidden = labelDisplay && responsivePropDependency(labelDisplay, (value) => value === "hidden");
  const labelNode = (0, import_jsx_runtime101.jsx)(View_default, { gap: 3, grow: true, children: (0, import_jsx_runtime101.jsxs)(View_default.Item, { children: [(0, import_jsx_runtime101.jsx)(Text_default, { variant: "body-3", weight: "medium", children: title }), (0, import_jsx_runtime101.jsx)(Text_default, { variant: "caption-1", color: "neutral-faded", children: subtitle })] }) });
  return (0, import_jsx_runtime101.jsxs)(View_default, { children: [(0, import_jsx_runtime101.jsxs)(View_default, { attributes, className, direction: "row", gap: 2, align: "center", position: "static", children: [(0, import_jsx_runtime101.jsxs)(View_default.Item, { children: [(0, import_jsx_runtime101.jsx)(View_default, { align: "center", justify: "center", backgroundColor: active || completed ? "primary" : "neutral-faded", borderColor: active || completed ? void 0 : "neutral-faded", borderRadius: "circular", as: "span", width: 8, height: 8, zIndex: 5, children: (0, import_jsx_runtime101.jsx)(Text_default, { variant: "body-3", weight: active ? "bold" : "medium", children: completed ? (0, import_jsx_runtime101.jsx)(Icon_default, { svg: Checkmark_default, size: 4 }) : step }) }), direction === "column" && !last && (0, import_jsx_runtime101.jsx)(Divider_default, { vertical: true, className: s76.verticalDivider })] }), labelDisplay ? (0, import_jsx_runtime101.jsx)(Hidden_default, { hide: labelHidden, children: labelNode }) : labelNode] }), direction === "column" && children && (0, import_jsx_runtime101.jsx)(Expandable_default, { active, children: (0, import_jsx_runtime101.jsx)(View_default, { paddingStart: 10, paddingTop: 2, children }) })] });
};
var StepperItem = (_) => null;
var Stepper = (props) => {
  const { children, direction = "row", activeId, labelDisplay, className, attributes } = props;
  const vertical = direction === "column";
  const length = import_react75.default.Children.count(children);
  return (0, import_jsx_runtime101.jsx)(View_default, { attributes, direction, align: vertical ? "stretch" : "center", className, gap: 3, wrap: false, children: import_react75.default.Children.map(children, (child, index) => {
    const itemId = child.props.id || `${index}`;
    return (0, import_jsx_runtime101.jsxs)(import_react75.default.Fragment, { children: [(0, import_jsx_runtime101.jsx)(StepperItemPrivate, { ...child.props, id: child.props.id || `${index}`, active: (activeId == null ? void 0 : activeId.toString()) === itemId, step: index + 1, last: index === length - 1, direction, labelDisplay }), !vertical && index < length - 1 && (0, import_jsx_runtime101.jsx)(View_default, { grow: true, children: (0, import_jsx_runtime101.jsx)(Divider_default, {}) })] }, index);
  }) });
};
Stepper.Item = StepperItem;
var Stepper_default = Stepper;

// node_modules/reshaped/dist/components/Switch/Switch.js
var import_jsx_runtime102 = __toESM(require_jsx_runtime());
import s77 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Switch/Switch.module.css";
var Switch = (props) => {
  var _a;
  const { children, name, checked, size, reversed, defaultChecked, onChange, onFocus, onBlur, className, attributes } = props;
  const rootClassNames = classNames(s77.root, size && s77[`root--size-${size}`], reversed && s77["root--reversed"], className);
  const formControl = useFormControl();
  const id = useElementId_default((formControl == null ? void 0 : formControl.attributes.id) || props.id || ((_a = props.inputAttributes) == null ? void 0 : _a.id));
  const inputAttributes = { ...props.inputAttributes, ...formControl == null ? void 0 : formControl.attributes };
  const disabled = (formControl == null ? void 0 : formControl.disabled) || props.disabled;
  const handleChange = (event) => {
    if (!onChange)
      return;
    onChange({
      name,
      event,
      checked: event.target.checked
    });
  };
  return (0, import_jsx_runtime102.jsxs)("label", { ...attributes, className: rootClassNames, children: [(0, import_jsx_runtime102.jsx)("input", { type: "checkbox", ...inputAttributes, className: s77.input, name, checked, defaultChecked, disabled, onChange: handleChange, onFocus: onFocus || (inputAttributes == null ? void 0 : inputAttributes.onFocus), onBlur: onBlur || (inputAttributes == null ? void 0 : inputAttributes.onBlur), id }), (0, import_jsx_runtime102.jsx)("span", { className: s77.area, "aria-hidden": "true", children: (0, import_jsx_runtime102.jsx)("span", { className: s77.thumb }) }), children && (0, import_jsx_runtime102.jsx)(Text_default, { variant: size === "small" ? "caption-1" : "body-3", weight: "medium", color: disabled ? "disabled" : void 0, children })] });
};
var Switch_default = Switch;

// node_modules/reshaped/dist/components/Table/Table.js
var import_jsx_runtime103 = __toESM(require_jsx_runtime());
var import_react76 = __toESM(require_react());
import s78 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Table/Table.module.css";
var TableCellPrivate = (props) => {
  const { minWidth, rowSpan, colSpan, align, verticalAlign, tagName: TagName, padding, paddingInline, paddingBlock, children, className, attributes } = props;
  const width = props.width === "auto" ? "0px" : props.width;
  const widthStyles = width_default(width);
  const minWidthStyles = minWidth_default(minWidth || width);
  const headingClassNames = classNames(s78.cell, widthStyles == null ? void 0 : widthStyles.classNames, minWidthStyles == null ? void 0 : minWidthStyles.classNames, (width === 0 || width === "0px") && s78["cell--width-auto"], align && s78[`cell--align-${align}`], verticalAlign && s78[`cell--valign-${verticalAlign}`], className);
  const headingStyle = {
    ...widthStyles == null ? void 0 : widthStyles.variables,
    ...minWidthStyles == null ? void 0 : minWidthStyles.variables,
    ...responsiveVariables("--rs-table-p-vertical", paddingBlock ?? padding),
    ...responsiveVariables("--rs-table-p-horizontal", paddingInline ?? padding)
  };
  return (0, import_jsx_runtime103.jsx)(TagName, { ...attributes, className: headingClassNames, rowSpan, colSpan, style: headingStyle, children });
};
var TableCell = (props) => {
  return (0, import_jsx_runtime103.jsx)(TableCellPrivate, { ...props, tagName: "td" });
};
var TableHeading = (props) => {
  return (0, import_jsx_runtime103.jsx)(TableCellPrivate, { ...props, tagName: "th" });
};
var TableRow = (props) => {
  const { highlighted, children, attributes } = props;
  const rowClassNames = classNames(s78.row, highlighted && s78["--row-highlighted"]);
  return (0, import_jsx_runtime103.jsx)("tr", { ...attributes, className: rowClassNames, children });
};
var TableBody = (props) => {
  const { children, attributes, className } = props;
  return (0, import_jsx_runtime103.jsx)("tbody", { ...attributes, className: classNames(className), children });
};
var TableHead = (props) => {
  const { children, attributes, className } = props;
  return (0, import_jsx_runtime103.jsx)("thead", { ...attributes, className: classNames(className), children });
};
var Table = (props) => {
  const { children, border, columnBorder, className, attributes } = props;
  const rootClassNames = classNames(s78.root, className, border && s78["--border-outer"], columnBorder && s78["--border-column"]);
  const [firstChild] = import_react76.default.Children.toArray(children);
  return (0, import_jsx_runtime103.jsx)("div", { ...attributes, className: rootClassNames, children: (0, import_jsx_runtime103.jsx)("table", { className: s78.table, children: import_react76.default.isValidElement(firstChild) && (firstChild.type === TableBody || firstChild.type === TableHead) ? children : (0, import_jsx_runtime103.jsx)(TableBody, { children }) }) });
};
Table.Cell = TableCell;
Table.Heading = TableHeading;
Table.Row = TableRow;
Table.Body = TableBody;
Table.Head = TableHead;
var Table_default = Table;

// node_modules/reshaped/dist/components/Tabs/Tabs.js
var import_jsx_runtime109 = __toESM(require_jsx_runtime());

// node_modules/reshaped/dist/components/Tabs/TabsControlled.js
var import_jsx_runtime104 = __toESM(require_jsx_runtime());
var import_react78 = __toESM(require_react());

// node_modules/reshaped/dist/components/Tabs/TabsContext.js
var import_react77 = __toESM(require_react());
var Context2 = import_react77.default.createContext({});
var TabsProvider = Context2.Provider;
var useTabs = (value) => {
  const { id, ...data } = import_react77.default.useContext(Context2);
  return {
    ...data,
    panelId: value !== void 0 ? `${id}-tabs-panel-${value}` : void 0,
    buttonId: value !== void 0 ? `${id}-tabs-button-${value}` : void 0
  };
};

// node_modules/reshaped/dist/components/Tabs/TabsControlled.js
var TabsControlled = (props) => {
  const { children, value, onChange, onSilentChange, itemWidth, variant, name, direction = "row", size = "medium" } = props;
  const id = useElementId_default();
  const elActiveRef = import_react78.default.useRef(null);
  const elPrevActiveRef = import_react78.default.useRef(elActiveRef.current);
  const elScrollableRef = import_react78.default.useRef(null);
  const [selection, setSelection] = import_react78.default.useState({
    scaleX: 0,
    scaleY: 0,
    left: 0,
    top: 0,
    status: "idle"
  });
  const setDefaultValue = (value2) => {
    if (value2 === void 0)
      return;
    if (onSilentChange)
      onSilentChange({ value: value2, name });
  };
  return (0, import_jsx_runtime104.jsx)(TabsProvider, { value: {
    value,
    name,
    size,
    direction,
    itemWidth,
    variant,
    onChange,
    id,
    setDefaultValue,
    elActiveRef,
    elPrevActiveRef,
    elScrollableRef,
    selection,
    setSelection
  }, children });
};
var TabsControlled_default = TabsControlled;

// node_modules/reshaped/dist/components/Tabs/TabsUncontrolled.js
var import_jsx_runtime105 = __toESM(require_jsx_runtime());
var import_react79 = __toESM(require_react());
var TabsUncontrolled = (props) => {
  const { defaultValue, onChange } = props;
  const [value, setValue] = import_react79.default.useState(defaultValue);
  const handleChange = ({ value: value2 }) => {
    setValue(value2);
    if (onChange)
      onChange({ value: value2 });
  };
  const handleSilentChange = ({ value: value2 }) => {
    setValue(value2);
  };
  return (0, import_jsx_runtime105.jsx)(TabsControlled_default, { ...props, onChange: handleChange, onSilentChange: handleSilentChange, value, defaultValue: void 0 });
};
var TabsUncontrolled_default = TabsUncontrolled;

// node_modules/reshaped/dist/components/Tabs/TabsItem.js
var import_jsx_runtime106 = __toESM(require_jsx_runtime());
var import_react80 = __toESM(require_react());
import s79 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Tabs/Tabs.module.css";
var TabsItem = (props, ref) => {
  const { value, children, icon, href, attributes } = props;
  const { onChange, panelId, name, size, value: tabsValue, selection, elActiveRef, elPrevActiveRef, elScrollableRef } = useTabs(value);
  const itemRef = import_react80.default.useRef(null);
  const active = tabsValue === value;
  const visuallySelected = active && selection.status === "idle";
  const itemClassNames = classNames(s79.item, visuallySelected && s79["--item-active"]);
  const isFormControl = !!name;
  const tabAttributes = {
    role: "tab",
    tabIndex: active ? 0 : -1,
    "aria-selected": active
  };
  const updateRefs = import_react80.default.useCallback(() => {
    if (!("current" in itemRef)) {
      throw new Error("Reshaped, Tabs: TabItem is expecting an object ref format but received a function ref");
    }
    elPrevActiveRef.current = elActiveRef.current;
    elActiveRef.current = itemRef.current;
  }, [elActiveRef, elPrevActiveRef]);
  const handleChange = () => {
    var _a, _b, _c;
    if (href && !onChange)
      return;
    const listEl = elScrollableRef.current;
    const currentListItem = (_a = itemRef.current) == null ? void 0 : _a.parentElement;
    const prevListItem = (_b = elActiveRef.current) == null ? void 0 : _b.parentElement;
    updateRefs();
    if (onChange)
      onChange({ value, name });
    if (!listEl || !currentListItem || !prevListItem || listEl.scrollWidth === listEl.clientWidth) {
      return;
    }
    const navigatingBack = currentListItem.offsetLeft < prevListItem.offsetLeft;
    const threshold = (currentListItem.offsetLeft - listEl.scrollLeft) / listEl.clientWidth;
    const shouldScroll = navigatingBack ? threshold < 0.3 : threshold > 0.5;
    if (!shouldScroll)
      return;
    (_c = itemRef.current) == null ? void 0 : _c.scrollIntoView({ behavior: "smooth", block: "center", inline: "center" });
  };
  import_react80.default.useEffect(() => {
    if (!active)
      return;
    updateRefs();
  }, [active, updateRefs]);
  return (0, import_jsx_runtime106.jsx)("div", { ...attributes, className: itemClassNames, ref: itemRef, role: "presentation", children: (0, import_jsx_runtime106.jsxs)(Actionable_default, { ref, href, insetFocus: true, onClick: !name ? handleChange : void 0, className: s79.button, as: name ? "label" : void 0, attributes: {
    ...!isFormControl && tabAttributes,
    "aria-controls": panelId
  }, children: [name && (0, import_jsx_runtime106.jsx)(HiddenInput_default, { type: "radio", name, value, checked: visuallySelected, onChange: handleChange, className: s79.radio }), (0, import_jsx_runtime106.jsxs)("span", { className: s79.buttonContent, children: [icon && (0, import_jsx_runtime106.jsx)(Icon_default, { svg: icon, className: s79.icon, size: 4 }), children && (0, import_jsx_runtime106.jsx)(Text_default, { variant: size === "large" ? "body-2" : "body-3", weight: "medium", children })] })] }) });
};
var TabsItem_default = import_react80.default.forwardRef(TabsItem);

// node_modules/reshaped/dist/components/Tabs/TabsList.js
var import_jsx_runtime107 = __toESM(require_jsx_runtime());
var import_react81 = __toESM(require_react());
import s80 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Tabs/Tabs.module.css";
var findParentItem = (el, rootEl) => {
  if (el === rootEl || !el)
    return null;
  if (el.classList.contains(s80.listItem))
    return el;
  return findParentItem(el.parentElement, rootEl);
};
var TabsList = (props) => {
  const { children, className, attributes } = props;
  const { value, setDefaultValue, itemWidth, variant, name, direction, size, selection, setSelection, elActiveRef, elPrevActiveRef, elScrollableRef } = useTabs();
  const [rtl] = useRTL_default();
  const [fadeSide, setFadeSide] = import_react81.default.useState(null);
  const rootClassNames = classNames(s80.root, size && s80[`--size-${size}`], direction && s80[`--direction-${direction}`], itemWidth && s80[`--item-width-${itemWidth}`], variant && s80[`--variant-${variant}`], (fadeSide === "start" || fadeSide === "both") && s80["--fade-start"], (fadeSide === "end" || fadeSide === "both") && s80["--fade-end"], className);
  const selectorClassNames = classNames(s80.selector, selection.status === "idle" && s80["--selector-hidden"], selection.status === "animated" && s80["--selector-animated"]);
  const handleNextClick = () => {
    elScrollableRef.current.scrollBy({
      // Using ceil here since during the second navigation half of the value may be
      // smaller than during the first navigation because of the odd numbers
      left: Math.ceil(elScrollableRef.current.clientWidth / 2) * (rtl ? -1 : 1),
      behavior: "smooth"
    });
  };
  const handlePrevClick = () => {
    elScrollableRef.current.scrollBy({
      left: Math.ceil(elScrollableRef.current.clientWidth / 2) * (rtl ? 1 : -1),
      behavior: "smooth"
    });
  };
  const handleTransitionEnd = () => {
    setSelection((selectionStyle) => ({
      ...selectionStyle,
      status: "idle"
    }));
  };
  const getElementSelectionStyle = import_react81.default.useCallback((el) => {
    if (!elScrollableRef.current)
      return null;
    const itemEl = findParentItem(el, elScrollableRef.current);
    if (!itemEl)
      return null;
    return {
      scaleX: itemEl.clientWidth,
      scaleY: itemEl.clientHeight,
      top: itemEl.offsetTop,
      left: itemEl.offsetLeft
    };
  }, [elScrollableRef]);
  const { ref: hotkeysRef } = useHotkeys_default({
    "ArrowLeft, ArrowUp": (e) => {
      if (name)
        return;
      e.preventDefault();
      focusPreviousElement(elScrollableRef.current);
    },
    "ArrowRight, ArrowDown": (e) => {
      if (name)
        return;
      e.preventDefault();
      focusNextElement(elScrollableRef.current);
    },
    Home: (e) => {
      if (name)
        return;
      e.preventDefault();
      focusFirstElement(elScrollableRef.current);
    },
    End: (e) => {
      if (name)
        return;
      e.preventDefault();
      focusLastElement(elScrollableRef.current);
    }
  });
  useIsomorphicLayoutEffect_default(() => {
    if (value)
      return;
    const firstItem = import_react81.default.Children.toArray(children)[0];
    if (!firstItem || firstItem.type !== TabsItem_default)
      return;
    setDefaultValue(firstItem.props.value);
  }, [value]);
  useIsomorphicLayoutEffect_default(() => {
    if (!elPrevActiveRef.current || elPrevActiveRef.current === elActiveRef.current)
      return;
    const selectionStyle = getElementSelectionStyle(elPrevActiveRef.current);
    if (!selectionStyle)
      return;
    setSelection({ ...selectionStyle, status: "prepared" });
  }, [value, getElementSelectionStyle]);
  useIsomorphicLayoutEffect_default(() => {
    if (selection.status !== "prepared" || !elActiveRef.current)
      return;
    const selectionStyle = getElementSelectionStyle(elActiveRef.current);
    if (!selectionStyle)
      return;
    setSelection({ ...selectionStyle, status: "animated" });
  }, [selection]);
  useIsomorphicLayoutEffect_default(() => {
    const elScrollable = elScrollableRef.current;
    if (!elScrollable || direction === "column")
      return;
    const updateArrowNav = () => {
      const isScrollable = elScrollable.clientWidth < elScrollable.scrollWidth;
      if (!isScrollable)
        setFadeSide(null);
      const scrollLeft = elScrollable.scrollLeft * (rtl ? -1 : 1);
      const cutOffStart = scrollLeft > 1;
      const cutOffEnd = scrollLeft + elScrollable.clientWidth < elScrollable.scrollWidth - 1;
      if (cutOffEnd && cutOffStart)
        return setFadeSide("both");
      if (cutOffStart)
        return setFadeSide("start");
      if (cutOffEnd)
        return setFadeSide("end");
    };
    const debouncedUpdateArrowNav = throttle(updateArrowNav, 16);
    requestAnimationFrame(() => {
      updateArrowNav();
    });
    window.addEventListener("resize", debouncedUpdateArrowNav);
    elScrollable.addEventListener("scroll", debouncedUpdateArrowNav);
    return () => {
      window.removeEventListener("resize", debouncedUpdateArrowNav);
      elScrollable.removeEventListener("scroll", debouncedUpdateArrowNav);
    };
  }, [rtl]);
  return (0, import_jsx_runtime107.jsxs)("div", { ...attributes, className: rootClassNames, children: [(0, import_jsx_runtime107.jsx)("div", { className: s80.inner, ref: elScrollableRef, children: (0, import_jsx_runtime107.jsxs)("div", { className: s80.list, role: "tablist", ref: hotkeysRef, children: [import_react81.default.Children.map(children, (child, index) => {
    if (!child)
      return null;
    return (0, import_jsx_runtime107.jsx)("div", { className: s80.listItem, children: child }, child.props.value || child.key || index);
  }), (0, import_jsx_runtime107.jsx)("div", { onTransitionEnd: handleTransitionEnd, className: selectorClassNames, style: {
    "--rs-tab-selection-x": selection.left,
    "--rs-tab-selection-y": selection.top,
    "--rs-tab-selection-scale-x": selection.scaleX,
    "--rs-tab-selection-scale-y": selection.scaleY
  } })] }) }), (fadeSide === "start" || fadeSide === "both") && (0, import_jsx_runtime107.jsx)("span", { className: s80.prev, children: (0, import_jsx_runtime107.jsx)(Button_default, { onClick: handlePrevClick, size: "small", icon: ChevronLeft_default, rounded: true, attributes: { "aria-hidden": true, tabIndex: -1 } }) }), (fadeSide === "end" || fadeSide === "both") && (0, import_jsx_runtime107.jsx)("span", { className: s80.next, children: (0, import_jsx_runtime107.jsx)(Button_default, { onClick: handleNextClick, size: "small", icon: ChevronRight_default, rounded: true, attributes: { "aria-hidden": true, tabIndex: -1 } }) })] });
};
var TabsList_default = TabsList;

// node_modules/reshaped/dist/components/Tabs/TabsPanel.js
var import_jsx_runtime108 = __toESM(require_jsx_runtime());
import s81 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Tabs/Tabs.module.css";
var TabsPanel = (props) => {
  const { value: panelValue, children } = props;
  const { value, panelId, buttonId } = useTabs(panelValue);
  const active = panelValue === value;
  const panelClassNames = classNames(s81.panel, !active && s81["--panel-hidden"]);
  return (0, import_jsx_runtime108.jsx)("div", { className: panelClassNames, tabIndex: 0, role: "tabpanel", id: panelId, "aria-labelledby": buttonId, children: active && children });
};
var TabsPanel_default = TabsPanel;

// node_modules/reshaped/dist/components/Tabs/Tabs.js
var Tabs = (props) => {
  const { value } = props;
  if (value !== void 0)
    return (0, import_jsx_runtime109.jsx)(TabsControlled_default, { ...props });
  return (0, import_jsx_runtime109.jsx)(TabsUncontrolled_default, { ...props });
};
Tabs.Item = TabsItem_default;
Tabs.List = TabsList_default;
Tabs.Panel = TabsPanel_default;
var Tabs_default = Tabs;

// node_modules/reshaped/dist/components/TextArea/TextArea.js
var import_jsx_runtime110 = __toESM(require_jsx_runtime());
var import_react82 = __toESM(require_react());
import s82 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/TextArea/TextArea.module.css";
var TextArea = (props) => {
  var _a, _b;
  const { onChange, onFocus, onBlur, name, value, defaultValue, placeholder, size = "medium", variant = "outline", resize, className, attributes } = props;
  const [autogrowValue, setAutogrowValue] = import_react82.default.useState(value || defaultValue || "");
  const formControl = useFormControl();
  const id = useElementId_default(props.id);
  const inputId = ((_a = formControl == null ? void 0 : formControl.attributes) == null ? void 0 : _a.id) || ((_b = props.inputAttributes) == null ? void 0 : _b.id) || id;
  const disabled = (formControl == null ? void 0 : formControl.disabled) || props.disabled;
  const hasError = (formControl == null ? void 0 : formControl.hasError) || props.hasError;
  const inputAttributes = { ...props.inputAttributes, ...formControl == null ? void 0 : formControl.attributes };
  const rootClassName = classNames(s82.root, size && responsiveClassNames(s82, "--size", size), hasError && s82["--status-error"], disabled && s82["--disabled"], variant && s82[`--variant-${variant}`], resize !== void 0 && s82[`--resize-${resize}`], className);
  const handleChange = (event) => {
    const nextValue = event.target.value;
    onChange == null ? void 0 : onChange({ name, value: nextValue, event });
    if (resize === "auto" && typeof value !== "string") {
      setAutogrowValue(nextValue);
    }
  };
  import_react82.default.useEffect(() => {
    if (typeof value !== "string" || resize !== "auto")
      return;
    setAutogrowValue(value);
  }, [value, resize]);
  return (0, import_jsx_runtime110.jsx)("div", { ...attributes, "data-rs-aligner-target": true, className: rootClassName, "data-rs-textarea-value": autogrowValue, children: (0, import_jsx_runtime110.jsx)("textarea", { rows: 3, ...inputAttributes, className: s82.input, disabled, name, placeholder, value, defaultValue, onChange: handleChange, onFocus: onFocus || (inputAttributes == null ? void 0 : inputAttributes.onFocus), onBlur: onBlur || (inputAttributes == null ? void 0 : inputAttributes.onBlur), id: inputId }) });
};
TextArea.Aligner = Aligner_default;
var TextArea_default = TextArea;

// node_modules/reshaped/dist/components/Timeline/Timeline.js
var import_jsx_runtime111 = __toESM(require_jsx_runtime());
var import_react83 = __toESM(require_react());
import s83 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Timeline/Timeline.module.css";
var TimelineItem = (props) => {
  const { children, markerSlot, className, attributes } = props;
  const hasMarker = markerSlot !== null;
  const itemClassNames = classNames(s83.item, !hasMarker && s83["item--full-width"], className);
  return (0, import_jsx_runtime111.jsxs)(View_default, { as: "li", direction: "row", align: "stretch", gap: 3, attributes, className: itemClassNames, children: [hasMarker && (0, import_jsx_runtime111.jsx)("span", { className: s83.marker, children: markerSlot }), (0, import_jsx_runtime111.jsx)(View_default.Item, { grow: true, children })] });
};
var Timeline = (props) => {
  const { children, className, attributes } = props;
  const rootClassNames = classNames(className);
  return (0, import_jsx_runtime111.jsx)("ul", { ...attributes, className: rootClassNames, children: import_react83.default.Children.map(children, (child, index) => {
    return (child == null ? void 0 : child.type) === TimelineItem ? child : (0, import_jsx_runtime111.jsx)(TimelineItem, { children: child }, index);
  }) });
};
Timeline.Item = TimelineItem;
var Timeline_default = Timeline;

// node_modules/reshaped/dist/components/Tooltip/Tooltip.js
var import_jsx_runtime112 = __toESM(require_jsx_runtime());
import s84 from "C:/Users/user/Documents/GitHub/OA/node_modules/reshaped/dist/components/Tooltip/Tooltip.module.css";
var Tooltip = (props) => {
  const { id, text, children, onOpen, onClose, position = "bottom", containerRef, active, disabled, disableContentHover } = props;
  if (!text)
    return (0, import_jsx_runtime112.jsx)(import_jsx_runtime112.Fragment, { children: children({}) });
  return (0, import_jsx_runtime112.jsxs)(Flyout_default, { id, active, position, disabled, onOpen, onClose, disableContentHover, containerRef, triggerType: "hover", children: [(0, import_jsx_runtime112.jsx)(Flyout_default.Trigger, { children }), (0, import_jsx_runtime112.jsx)(Flyout_default.Content, { children: (0, import_jsx_runtime112.jsx)(Theme_default, { colorMode: "inverted", children: (0, import_jsx_runtime112.jsx)(Text_default, { variant: "caption-1", className: s84.root, children: text }) }) })] });
};
var Tooltip_default = Tooltip;

// node_modules/reshaped/dist/utilities/storybook/Placeholder.js
var import_jsx_runtime113 = __toESM(require_jsx_runtime());
var Placeholder = (props) => {
  const { w = "auto", h = 50, children } = props;
  return (0, import_jsx_runtime113.jsx)("div", { style: {
    width: w,
    height: h,
    minWidth: h,
    padding: "var(--rs-unit-x2)",
    background: "rgba(var(--rs-color-rgb-background-neutral), 0.32)",
    boxSizing: "border-box",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    borderRadius: "var(--rs-radius-small)"
  }, children });
};
var Placeholder_default = Placeholder;
export {
  Accordion_default as Accordion,
  ActionBar_default as ActionBar,
  Actionable_default as Actionable,
  Alert_default as Alert,
  Autocomplete_default as Autocomplete,
  Avatar_default as Avatar,
  Badge_default as Badge,
  Breadcrumbs_default2 as Breadcrumbs,
  Button_default as Button,
  Calendar_default as Calendar,
  Card_default as Card,
  Carousel_default as Carousel,
  Checkbox_default as Checkbox,
  CheckboxGroup_default as CheckboxGroup,
  Container_default as Container,
  Dismissible_default as Dismissible,
  Divider_default as Divider,
  DropdownMenu_default as DropdownMenu,
  FileUpload_default as FileUpload,
  FormControl_default as FormControl,
  Hidden_default as Hidden,
  HiddenVisually_default as HiddenVisually,
  Hotkey_default as Hotkey,
  Icon_default as Icon,
  Image_default as Image,
  Link_default as Link,
  Loader_default as Loader,
  MenuItem_default as MenuItem,
  Modal_default as Modal,
  Overlay_default as Overlay,
  Pagination_default as Pagination,
  PinField_default as PinField,
  Placeholder_default as Placeholder,
  Popover_default as Popover,
  Progress_default as Progress,
  Radio_default as Radio,
  RadioGroup_default as RadioGroup,
  Reshaped_default as Reshaped,
  Resizable_default as Resizable,
  Scrim_default as Scrim,
  ScrollArea_default as ScrollArea,
  Select_default as Select,
  Skeleton_default as Skeleton,
  Slider_default as Slider,
  Stepper_default as Stepper,
  Switch_default as Switch,
  Table_default as Table,
  Tabs_default as Tabs,
  Text_default as Text,
  TextArea_default as TextArea,
  TextField_default as TextField,
  Theme_default as Theme,
  Timeline_default as Timeline,
  ToastProvider_default as ToastProvider,
  Tooltip_default as Tooltip,
  View_default as View,
  classNames,
  responsiveClassNames,
  responsivePropDependency,
  useFormControl,
  useHotkeys_default as useHotkeys,
  useIsomorphicLayoutEffect_default as useIsomorphicLayoutEffect,
  useRTL_default as useRTL,
  useResponsiveClientValue_default as useResponsiveClientValue,
  useScrollLock_default as useScrollLock,
  useTheme,
  useToast_default as useToast,
  useToggle_default as useToggle
};
//# sourceMappingURL=reshaped.js.map
